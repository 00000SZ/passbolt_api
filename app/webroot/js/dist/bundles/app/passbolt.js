/*[system-bundles-config]*/
System.bundles = {};
/*stealconfig.js*/
define('stealconfig.js', function (require, exports, module) {
    steal.config({
        map: {
            'jquery/jquery': 'jquery',
            'underscore': 'lib/underscore/underscore',
            'can': 'lib/can'
        },
        paths: {
            'passbolt': 'app/passbolt.js',
            'jquery': 'lib/jquery/dist/jquery.js',
            'mad': 'lib/mad/src/mad.js',
            'mad/*': 'lib/mad/src/*.js',
            'xregexp': 'lib/xregexp/xregexp-all.js',
            'sha1': 'lib/jsSHA/src/sha.js',
            'moment': 'lib/moment/moment.js'
        },
        'meta': {
            'mocha': {
                'format': 'global',
                'exports': 'mocha',
                'deps': ['steal-mocha/add-dom']
            }
        },
        'ext': { 'ejs': 'can/view/ejs/system' }
    });
    System.config({ buildConfig: { map: { 'can/util/util': 'lib/can/util/domless/domless' } } });
});
/*moment*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('moment', factory) : global.moment = factory();
}(this, function () {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
            if (m._strict) {
                m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }
    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function Locale() {
    }
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
        }
        return locales[name];
    }
    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);
            locale_locales__getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function locale_locales__getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
        return chooseLocale(key);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }
    function get_set__get(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }
    function get_set__set(mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
    function getSet(units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function isFunction(sth) {
        return typeof sth === 'function' && Object.prototype.toString.call(sth) === '[object Function]';
    }
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function () {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', matchWord);
    addRegexToken('MMMM', matchWord);
    addParseToken([
        'M',
        'MM'
    ], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m) {
        return this._months[m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m) {
        return this._monthsShort[m.month()];
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            if (typeof value !== 'number') {
                return mom;
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var isoDates = [
            [
                'YYYYYY-MM-DD',
                /[+-]\d{6}-\d{2}-\d{2}/
            ],
            [
                'YYYY-MM-DD',
                /\d{4}-\d{2}-\d{2}/
            ],
            [
                'GGGG-[W]WW-E',
                /\d{4}-W\d{2}-\d/
            ],
            [
                'GGGG-[W]WW',
                /\d{4}-W\d{2}/
            ],
            [
                'YYYY-DDD',
                /\d{4}-\d{3}/
            ]
        ];
    var isoTimes = [
            [
                'HH:mm:ss.SSSS',
                /(T| )\d\d:\d\d:\d\d\.\d+/
            ],
            [
                'HH:mm:ss',
                /(T| )\d\d:\d\d:\d\d/
            ],
            [
                'HH:mm',
                /(T| )\d\d:\d\d/
            ],
            [
                'HH',
                /(T| )\d\d/
            ]
        ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = from_string__isoRegex.exec(string);
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    function createDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }
    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }
    addFormatToken(0, [
        'YY',
        2
    ], 0, function () {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    addUnitAlias('year', 'y');
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }
        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }
        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
            dow: 0,
            doy: 6
        };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }
        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;
        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;
        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        }
        return [
            now.getFullYear(),
            now.getMonth(),
            now.getDate()
        ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
            } else {
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
    utils_hooks__hooks.ISO_8601 = function () {
    };
    function configFromStringAndFormat(config) {
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!valid__isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = [
            i.year,
            i.month,
            i.day || i.date,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ];
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || locale_locales__getLocale(config._l);
        if (input === null || format === undefined && input === '') {
            return valid__createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof input === 'object') {
            configFromObject(config);
        } else if (typeof input === 'number') {
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (typeof locale === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
            var other = local__createLocal.apply(null, arguments);
            return other < this ? this : other;
        });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = locale_locales__getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(string) {
        var matches = (string || '').match(matchOffset) || [];
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
                '-',
                0,
                0
            ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    utils_hooks__hooks.updateOffset = function () {
    };
    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0, localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        input = input ? local__createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return !this._isUTC;
    }
    function isUtcOffset() {
        return this._isUTC;
    }
    function isUtc() {
        return this._isUTC && this._offset === 0;
    }
    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;
    function create__createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                d: parseIso(match[4], sign),
                h: parseIso(match[5], sign),
                m: parseIso(match[6], sign),
                s: parseIso(match[7], sign),
                w: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
        return ret;
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {
                milliseconds: 0,
                months: 0
            };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time, formats) {
        var now = time || local__createLocal(), sod = cloneWithOffset(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }
    function isBefore(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }
    function isBetween(from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }
    function isSame(input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
        }
    }
    function diff(input, units, asFloat) {
        var that = cloneWithOffset(input, this), zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000, delta, output;
        units = normalizeUnits(units);
        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1000 : units === 'minute' ? delta / 60000 : units === 'hour' ? delta / 3600000 : units === 'day' ? (delta - zoneDelta) / 86400000 : units === 'week' ? (delta - zoneDelta) / 604800000 : delta;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust);
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }
    function format(inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        });
    function localeData() {
        return this._locale;
    }
    function startOf(units) {
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            this.month(0);
        case 'quarter':
        case 'month':
            this.date(1);
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
        case 'hour':
            this.minutes(0);
        case 'minute':
            this.seconds(0);
        case 'second':
            this.milliseconds(0);
        }
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }
        return this;
    }
    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }
    function to_type__valueOf() {
        return +this._d - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(+this / 1000);
    }
    function toDate() {
        return this._offset ? new Date(+this) : this._d;
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function moment_valid__isValid() {
        return valid__isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    addFormatToken(0, [
        'gg',
        2
    ], 0, function () {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function () {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([
            year,
            11,
            31 + dow - doy
        ]), dow, doy).week;
    }
    function getSetWeekYear(input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add(input - year, 'y');
    }
    function getSetISOWeekYear(input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add(input - year, 'y');
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    addFormatToken('Q', 0, 0, 'quarter');
    addUnitAlias('quarter', 'Q');
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    addUnitAlias('date', 'D');
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
        return null;
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m) {
        return this._weekdays[m.day()];
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return this._weekdaysShort[m.day()];
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return this._weekdaysMin[m.day()];
    }
    function localeWeekdaysParse(weekdayName) {
        var i, mom, regex;
        this._weekdaysParse = this._weekdaysParse || [];
        for (i = 0; i < 7; i++) {
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([
                    2000,
                    1
                ]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, function () {
        return this.hours() % 12 || 12;
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'a',
        'A'
    ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    var getSetHour = makeGetSet('Hours', true);
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    addUnitAlias('minute', 'm');
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    addUnitAlias('second', 's');
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function () {
        return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = moment_format__toISOString;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
        return local__createLocal(input * 1000);
    }
    function moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }
    var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        };
    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
        };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    function preParsePostFormat(string) {
        return string;
    }
    var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }
    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function list(format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) {
            return lists__get(format, index, field, setter);
        }
        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }
    function lists__listMonths(format, index) {
        return list(format, index, 'months', 12, 'month');
    }
    function lists__listMonthsShort(format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }
    function lists__listWeekdays(format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }
    function lists__listWeekdaysShort(format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }
    function lists__listWeekdaysMin(format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }
    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }
    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
            case 'week':
                return days / 7 + milliseconds / 604800000;
            case 'day':
                return days + milliseconds / 86400000;
            case 'hour':
                return days * 24 + milliseconds / 3600000;
            case 'minute':
                return days * 1440 + milliseconds / 60000;
            case 'second':
                return days * 86400 + milliseconds / 1000;
            case 'millisecond':
                return Math.floor(days * 86400000) + milliseconds;
            default:
                throw new Error('Unknown unit ' + units);
            }
        }
    }
    function duration_as__valueOf() {
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }
    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
            s: 45,
            m: 45,
            h: 22,
            d: 26,
            M: 11
        };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds < thresholds.s && [
                's',
                seconds
            ] || minutes === 1 && ['m'] || minutes < thresholds.m && [
                'mm',
                minutes
            ] || hours === 1 && ['h'] || hours < thresholds.h && [
                'hh',
                hours
            ] || days === 1 && ['d'] || days < thresholds.d && [
                'dd',
                days
            ] || months === 1 && ['M'] || months < thresholds.M && [
                'MM',
                months
            ] || years === 1 && ['y'] || [
                'yy',
                years
            ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }
    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
        if (!total) {
            return 'P0D';
        }
        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    utils_hooks__hooks.version = '2.10.6';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    var _moment = utils_hooks__hooks;
    return _moment;
}));
/*jquery*/
(function (global, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    var arr = [];
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var document = window.document, version = '2.1.4', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
            return letter.toUpperCase();
        };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: '',
        length: 0,
        toArray: function () {
            return slice.call(this);
        },
        get: function (num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function (callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
            throw new Error(msg);
        },
        noop: function () {
        },
        isFunction: function (obj) {
            return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
            return obj != null && obj === obj.window;
        },
        isNumeric: function (obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isPlainObject: function (obj) {
            if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                return false;
            }
            return true;
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        type: function (obj) {
            if (obj == null) {
                return obj + '';
            }
            return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
        },
        globalEval: function (code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code) {
                if (code.indexOf('use strict') === 1) {
                    script = document.createElement('script');
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    indirect(code);
                }
            }
        },
        camelCase: function (string) {
            return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function (obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function (elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function (fn, context) {
            var tmp, args, proxy;
            if (typeof context === 'string') {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function () {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: Date.now,
        support: support
    });
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = 'length' in obj && obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
    }
    var Sizzle = function (window) {
            var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                    }
                    return 0;
                }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                    var i = 0, len = list.length;
                    for (; i < len; i++) {
                        if (list[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', identifier = characterEncoding.replace('w', 'w#'), attributes = '\\[' + whitespace + '*(' + characterEncoding + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                    'ID': new RegExp('^#(' + characterEncoding + ')'),
                    'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
                    'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
                    'ATTR': new RegExp('^' + attributes),
                    'PSEUDO': new RegExp('^' + pseudos),
                    'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                    'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
                    'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
                }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                    var high = '0x' + escaped - 65536;
                    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
                }, unloadHandler = function () {
                    setDocument();
                };
            try {
                push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
                arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
                push = {
                    apply: arr.length ? function (target, els) {
                        push_native.apply(target, slice.call(els));
                    } : function (target, els) {
                        var j = target.length, i = 0;
                        while (target[j++] = els[i++]) {
                        }
                        target.length = j - 1;
                    }
                };
            }
            function Sizzle(selector, context, results, seed) {
                var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                results = results || [];
                nodeType = context.nodeType;
                if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                    return results;
                }
                if (!seed && documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                elem = context.getElementById(m);
                                if (elem && elem.parentNode) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        nid = old = expando;
                        newContext = context;
                        newSelector = nodeType !== 1 && selector;
                        if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
                            groups = tokenize(selector);
                            if (old = context.getAttribute('id')) {
                                nid = old.replace(rescape, '\\$&');
                            } else {
                                context.setAttribute('id', nid);
                            }
                            nid = '[id=\'' + nid + '\'] ';
                            i = groups.length;
                            while (i--) {
                                groups[i] = nid + toSelector(groups[i]);
                            }
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                            newSelector = groups.join(',');
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, newContext.querySelectorAll(newSelector));
                                return results;
                            } catch (qsaError) {
                            } finally {
                                if (!old) {
                                    context.removeAttribute('id');
                                }
                            }
                        }
                    }
                }
                return select(selector.replace(rtrim, '$1'), context, results, seed);
            }
            function createCache() {
                var keys = [];
                function cache(key, value) {
                    if (keys.push(key + ' ') > Expr.cacheLength) {
                        delete cache[keys.shift()];
                    }
                    return cache[key + ' '] = value;
                }
                return cache;
            }
            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }
            function assert(fn) {
                var div = document.createElement('div');
                try {
                    return !!fn(div);
                } catch (e) {
                    return false;
                } finally {
                    if (div.parentNode) {
                        div.parentNode.removeChild(div);
                    }
                    div = null;
                }
            }
            function addHandle(attrs, handler) {
                var arr = attrs.split('|'), i = attrs.length;
                while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                }
            }
            function siblingCheck(a, b) {
                var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
                if (diff) {
                    return diff;
                }
                if (cur) {
                    while (cur = cur.nextSibling) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }
                return a ? 1 : -1;
            }
            function createInputPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === type;
                };
            }
            function createButtonPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === 'input' || name === 'button') && elem.type === type;
                };
            }
            function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                    argument = +argument;
                    return markFunction(function (seed, matches) {
                        var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                        while (i--) {
                            if (seed[j = matchIndexes[i]]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }
            function testContext(context) {
                return context && typeof context.getElementsByTagName !== 'undefined' && context;
            }
            support = Sizzle.support = {};
            isXML = Sizzle.isXML = function (elem) {
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== 'HTML' : false;
            };
            setDocument = Sizzle.setDocument = function (node) {
                var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }
                document = doc;
                docElem = doc.documentElement;
                parent = doc.defaultView;
                if (parent && parent !== parent.top) {
                    if (parent.addEventListener) {
                        parent.addEventListener('unload', unloadHandler, false);
                    } else if (parent.attachEvent) {
                        parent.attachEvent('onunload', unloadHandler);
                    }
                }
                documentIsHTML = !isXML(doc);
                support.attributes = assert(function (div) {
                    div.className = 'i';
                    return !div.getAttribute('className');
                });
                support.getElementsByTagName = assert(function (div) {
                    div.appendChild(doc.createComment(''));
                    return !div.getElementsByTagName('*').length;
                });
                support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
                support.getById = assert(function (div) {
                    docElem.appendChild(div).id = expando;
                    return !doc.getElementsByName || !doc.getElementsByName(expando).length;
                });
                if (support.getById) {
                    Expr.find['ID'] = function (id, context) {
                        if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                            var m = context.getElementById(id);
                            return m && m.parentNode ? [m] : [];
                        }
                    };
                    Expr.filter['ID'] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            return elem.getAttribute('id') === attrId;
                        };
                    };
                } else {
                    delete Expr.find['ID'];
                    Expr.filter['ID'] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                            return node && node.value === attrId;
                        };
                    };
                }
                Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                    if (typeof context.getElementsByTagName !== 'undefined') {
                        return context.getElementsByTagName(tag);
                    } else if (support.qsa) {
                        return context.querySelectorAll(tag);
                    }
                } : function (tag, context) {
                    var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                    if (tag === '*') {
                        while (elem = results[i++]) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }
                        return tmp;
                    }
                    return results;
                };
                Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                    if (documentIsHTML) {
                        return context.getElementsByClassName(className);
                    }
                };
                rbuggyMatches = [];
                rbuggyQSA = [];
                if (support.qsa = rnative.test(doc.querySelectorAll)) {
                    assert(function (div) {
                        docElem.appendChild(div).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\f]\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                        if (div.querySelectorAll('[msallowcapture^=\'\']').length) {
                            rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                        }
                        if (!div.querySelectorAll('[selected]').length) {
                            rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                        }
                        if (!div.querySelectorAll('[id~=' + expando + '-]').length) {
                            rbuggyQSA.push('~=');
                        }
                        if (!div.querySelectorAll(':checked').length) {
                            rbuggyQSA.push(':checked');
                        }
                        if (!div.querySelectorAll('a#' + expando + '+*').length) {
                            rbuggyQSA.push('.#.+[+~]');
                        }
                    });
                    assert(function (div) {
                        var input = doc.createElement('input');
                        input.setAttribute('type', 'hidden');
                        div.appendChild(input).setAttribute('name', 'D');
                        if (div.querySelectorAll('[name=d]').length) {
                            rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                        }
                        if (!div.querySelectorAll(':enabled').length) {
                            rbuggyQSA.push(':enabled', ':disabled');
                        }
                        div.querySelectorAll('*,:x');
                        rbuggyQSA.push(',.*:');
                    });
                }
                if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                    assert(function (div) {
                        support.disconnectedMatch = matches.call(div, 'div');
                        matches.call(div, '[s!=\'\']:x');
                        rbuggyMatches.push('!=', pseudos);
                    });
                }
                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
                hasCompare = rnative.test(docElem.compareDocumentPosition);
                contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
                } : function (a, b) {
                    if (b) {
                        while (b = b.parentNode) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                sortOrder = hasCompare ? function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }
                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                    if (compare) {
                        return compare;
                    }
                    compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                    if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                        if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                            return -1;
                        }
                        if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                            return 1;
                        }
                        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                    }
                    return compare & 4 ? -1 : 1;
                } : function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }
                    var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                    if (!aup || !bup) {
                        return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                    } else if (aup === bup) {
                        return siblingCheck(a, b);
                    }
                    cur = a;
                    while (cur = cur.parentNode) {
                        ap.unshift(cur);
                    }
                    cur = b;
                    while (cur = cur.parentNode) {
                        bp.unshift(cur);
                    }
                    while (ap[i] === bp[i]) {
                        i++;
                    }
                    return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
                };
                return doc;
            };
            Sizzle.matches = function (expr, elements) {
                return Sizzle(expr, null, null, elements);
            };
            Sizzle.matchesSelector = function (elem, expr) {
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }
                expr = expr.replace(rattributeQuotes, '=\'$1\']');
                if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                    try {
                        var ret = matches.call(elem, expr);
                        if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) {
                    }
                }
                return Sizzle(expr, document, null, [elem]).length > 0;
            };
            Sizzle.contains = function (context, elem) {
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }
                return contains(context, elem);
            };
            Sizzle.attr = function (elem, name) {
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }
                var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
                return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            };
            Sizzle.error = function (msg) {
                throw new Error('Syntax error, unrecognized expression: ' + msg);
            };
            Sizzle.uniqueSort = function (results) {
                var elem, duplicates = [], j = 0, i = 0;
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);
                if (hasDuplicate) {
                    while (elem = results[i++]) {
                        if (elem === results[i]) {
                            j = duplicates.push(i);
                        }
                    }
                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }
                sortInput = null;
                return results;
            };
            getText = Sizzle.getText = function (elem) {
                var node, ret = '', i = 0, nodeType = elem.nodeType;
                if (!nodeType) {
                    while (node = elem[i++]) {
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    if (typeof elem.textContent === 'string') {
                        return elem.textContent;
                    } else {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
                return ret;
            };
            Expr = Sizzle.selectors = {
                cacheLength: 50,
                createPseudo: markFunction,
                match: matchExpr,
                attrHandle: {},
                find: {},
                relative: {
                    '>': {
                        dir: 'parentNode',
                        first: true
                    },
                    ' ': { dir: 'parentNode' },
                    '+': {
                        dir: 'previousSibling',
                        first: true
                    },
                    '~': { dir: 'previousSibling' }
                },
                preFilter: {
                    'ATTR': function (match) {
                        match[1] = match[1].replace(runescape, funescape);
                        match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                        if (match[2] === '~=') {
                            match[3] = ' ' + match[3] + ' ';
                        }
                        return match.slice(0, 4);
                    },
                    'CHILD': function (match) {
                        match[1] = match[1].toLowerCase();
                        if (match[1].slice(0, 3) === 'nth') {
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                            match[5] = +(match[7] + match[8] || match[3] === 'odd');
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }
                        return match;
                    },
                    'PSEUDO': function (match) {
                        var excess, unquoted = !match[6] && match[2];
                        if (matchExpr['CHILD'].test(match[0])) {
                            return null;
                        }
                        if (match[3]) {
                            match[2] = match[4] || match[5] || '';
                        } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }
                        return match.slice(0, 3);
                    }
                },
                filter: {
                    'TAG': function (nodeNameSelector) {
                        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                        return nodeNameSelector === '*' ? function () {
                            return true;
                        } : function (elem) {
                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                        };
                    },
                    'CLASS': function (className) {
                        var pattern = classCache[className + ' '];
                        return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                            return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                        });
                    },
                    'ATTR': function (name, operator, check) {
                        return function (elem) {
                            var result = Sizzle.attr(elem, name);
                            if (result == null) {
                                return operator === '!=';
                            }
                            if (!operator) {
                                return true;
                            }
                            result += '';
                            return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                        };
                    },
                    'CHILD': function (type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                        return first === 1 && last === 0 ? function (elem) {
                            return !!elem.parentNode;
                        } : function (elem, context, xml) {
                            var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                            if (parent) {
                                if (simple) {
                                    while (dir) {
                                        node = elem;
                                        while (node = node[dir]) {
                                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        start = dir = type === 'only' && !start && 'nextSibling';
                                    }
                                    return true;
                                }
                                start = [forward ? parent.firstChild : parent.lastChild];
                                if (forward && useCache) {
                                    outerCache = parent[expando] || (parent[expando] = {});
                                    cache = outerCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = cache[0] === dirruns && cache[2];
                                    node = nodeIndex && parent.childNodes[nodeIndex];
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if (node.nodeType === 1 && ++diff && node === elem) {
                                            outerCache[type] = [
                                                dirruns,
                                                nodeIndex,
                                                diff
                                            ];
                                            break;
                                        }
                                    }
                                } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                    diff = cache[1];
                                } else {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                (node[expando] || (node[expando] = {}))[type] = [
                                                    dirruns,
                                                    diff
                                                ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                diff -= last;
                                return diff === first || diff % first === 0 && diff / first >= 0;
                            }
                        };
                    },
                    'PSEUDO': function (pseudo, argument) {
                        var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                        if (fn[expando]) {
                            return fn(argument);
                        }
                        if (fn.length > 1) {
                            args = [
                                pseudo,
                                pseudo,
                                '',
                                argument
                            ];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                                var idx, matched = fn(seed, argument), i = matched.length;
                                while (i--) {
                                    idx = indexOf(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) : function (elem) {
                                return fn(elem, 0, args);
                            };
                        }
                        return fn;
                    }
                },
                pseudos: {
                    'not': markFunction(function (selector) {
                        var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                        return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                            var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                            while (i--) {
                                if (elem = unmatched[i]) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) : function (elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);
                            input[0] = null;
                            return !results.pop();
                        };
                    }),
                    'has': markFunction(function (selector) {
                        return function (elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),
                    'contains': markFunction(function (text) {
                        text = text.replace(runescape, funescape);
                        return function (elem) {
                            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                        };
                    }),
                    'lang': markFunction(function (lang) {
                        if (!ridentifier.test(lang || '')) {
                            Sizzle.error('unsupported lang: ' + lang);
                        }
                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function (elem) {
                            var elemLang;
                            do {
                                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                            return false;
                        };
                    }),
                    'target': function (elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },
                    'root': function (elem) {
                        return elem === docElem;
                    },
                    'focus': function (elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },
                    'enabled': function (elem) {
                        return elem.disabled === false;
                    },
                    'disabled': function (elem) {
                        return elem.disabled === true;
                    },
                    'checked': function (elem) {
                        var nodeName = elem.nodeName.toLowerCase();
                        return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                    },
                    'selected': function (elem) {
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }
                        return elem.selected === true;
                    },
                    'empty': function (elem) {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeType < 6) {
                                return false;
                            }
                        }
                        return true;
                    },
                    'parent': function (elem) {
                        return !Expr.pseudos['empty'](elem);
                    },
                    'header': function (elem) {
                        return rheader.test(elem.nodeName);
                    },
                    'input': function (elem) {
                        return rinputs.test(elem.nodeName);
                    },
                    'button': function (elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === 'input' && elem.type === 'button' || name === 'button';
                    },
                    'text': function (elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                    },
                    'first': createPositionalPseudo(function () {
                        return [0];
                    }),
                    'last': createPositionalPseudo(function (matchIndexes, length) {
                        return [length - 1];
                    }),
                    'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                        return [argument < 0 ? argument + length : argument];
                    }),
                    'even': createPositionalPseudo(function (matchIndexes, length) {
                        var i = 0;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    'odd': createPositionalPseudo(function (matchIndexes, length) {
                        var i = 1;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; --i >= 0;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; ++i < length;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    })
                }
            };
            Expr.pseudos['nth'] = Expr.pseudos['eq'];
            for (i in {
                    radio: true,
                    checkbox: true,
                    file: true,
                    password: true,
                    image: true
                }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in {
                    submit: true,
                    reset: true
                }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }
            function setFilters() {
            }
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();
            tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }
                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;
                while (soFar) {
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            soFar = soFar.slice(match[0].length) || soFar;
                        }
                        groups.push(tokens = []);
                    }
                    matched = false;
                    if (match = rcombinators.exec(soFar)) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: match[0].replace(rtrim, ' ')
                        });
                        soFar = soFar.slice(matched.length);
                    }
                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }
                    if (!matched) {
                        break;
                    }
                }
                return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
            };
            function toSelector(tokens) {
                var i = 0, len = tokens.length, selector = '';
                for (; i < len; i++) {
                    selector += tokens[i].value;
                }
                return selector;
            }
            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
                return combinator.first ? function (elem, context, xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            return matcher(elem, context, xml);
                        }
                    }
                } : function (elem, context, xml) {
                    var oldCache, outerCache, newCache = [
                            dirruns,
                            doneName
                        ];
                    if (xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                if (matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    } else {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                outerCache = elem[expando] || (elem[expando] = {});
                                if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                    return newCache[2] = oldCache[2];
                                } else {
                                    outerCache[dir] = newCache;
                                    if (newCache[2] = matcher(elem, context, xml)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                };
            }
            function elementMatcher(matchers) {
                return matchers.length > 1 ? function (elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }
                    return true;
                } : matchers[0];
            }
            function multipleContexts(selector, contexts, results) {
                var i = 0, len = contexts.length;
                for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }
                return results;
            }
            function condense(unmatched, map, filter, context, xml) {
                var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
                for (; i < len; i++) {
                    if (elem = unmatched[i]) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);
                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }
                return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                    var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }
                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);
                        i = temp.length;
                        while (i--) {
                            if (elem = temp[i]) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }
                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                temp = [];
                                i = matcherOut.length;
                                while (i--) {
                                    if (elem = matcherOut[i]) {
                                        temp.push(matcherIn[i] = elem);
                                    }
                                }
                                postFinder(null, matcherOut = [], temp, xml);
                            }
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }
                    } else {
                        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }
            function matcherFromTokens(tokens) {
                var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                        return elem === checkContext;
                    }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                        return indexOf(checkContext, elem) > -1;
                    }, implicitRelative, true), matchers = [function (elem, context, xml) {
                            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                            checkContext = null;
                            return ret;
                        }];
                for (; i < len; i++) {
                    if (matcher = Expr.relative[tokens[i].type]) {
                        matchers = [addCombinator(elementMatcher(matchers), matcher)];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                        if (matcher[expando]) {
                            j = ++i;
                            for (; j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }
                            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                        }
                        matchers.push(matcher);
                    }
                }
                return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                        var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                        if (outermost) {
                            outermostContext = context !== document && context;
                        }
                        for (; i !== len && (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                j = 0;
                                while (matcher = elementMatchers[j++]) {
                                    if (matcher(elem, context, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }
                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                }
                            }
                            if (bySet) {
                                if (elem = !matcher && elem) {
                                    matchedCount--;
                                }
                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }
                        matchedCount += i;
                        if (bySet && i !== matchedCount) {
                            j = 0;
                            while (matcher = setMatchers[j++]) {
                                matcher(unmatched, setMatched, context, xml);
                            }
                            if (seed) {
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }
                                setMatched = condense(setMatched);
                            }
                            push.apply(results, setMatched);
                            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                                Sizzle.uniqueSort(results);
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }
                        return unmatched;
                    };
                return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle.compile = function (selector, match) {
                var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
                if (!cached) {
                    if (!match) {
                        match = tokenize(selector);
                    }
                    i = match.length;
                    while (i--) {
                        cached = matcherFromTokens(match[i]);
                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                    cached.selector = selector;
                }
                return cached;
            };
            select = Sizzle.select = function (selector, context, results, seed) {
                var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
                results = results || [];
                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;
                        } else if (compiled) {
                            context = context.parentNode;
                        }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        if (Expr.relative[type = token.type]) {
                            break;
                        }
                        if (find = Expr.find[type]) {
                            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }
                                break;
                            }
                        }
                    }
                }
                (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
                return results;
            };
            support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
            support.detectDuplicates = !!hasDuplicate;
            setDocument();
            support.sortDetached = assert(function (div1) {
                return div1.compareDocumentPosition(document.createElement('div')) & 1;
            });
            if (!assert(function (div) {
                    div.innerHTML = '<a href=\'#\'></a>';
                    return div.firstChild.getAttribute('href') === '#';
                })) {
                addHandle('type|href|height|width', function (elem, name, isXML) {
                    if (!isXML) {
                        return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                    }
                });
            }
            if (!support.attributes || !assert(function (div) {
                    div.innerHTML = '<input/>';
                    div.firstChild.setAttribute('value', '');
                    return div.firstChild.getAttribute('value') === '';
                })) {
                addHandle('value', function (elem, name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                        return elem.defaultValue;
                    }
                });
            }
            if (!assert(function (div) {
                    return div.getAttribute('disabled') == null;
                })) {
                addHandle(booleans, function (elem, name, isXML) {
                    var val;
                    if (!isXML) {
                        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                    }
                });
            }
            return Sizzle;
        }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === 'string') {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) >= 0 !== not;
        });
    }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ':not(' + expr + ')';
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, len = this.length, ret = [], self = this;
            if (typeof selector !== 'string') {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + ' ' + selector : selector;
            return ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
            var match, elem;
            if (!selector) {
                return this;
            }
            if (typeof selector === 'string') {
                if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            } else if (jQuery.isFunction(selector)) {
                return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : selector(jQuery);
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.extend({
        dir: function (elem, dir, until) {
            var matched = [], truncate = until !== undefined;
            while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                    if (truncate && jQuery(elem).is(until)) {
                        break;
                    }
                    matched.push(elem);
                }
            }
            return matched;
        },
        sibling: function (n, elem) {
            var matched = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    matched.push(n);
                }
            }
            return matched;
        }
    });
    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return jQuery.dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.unique(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnotwhite = /\S+/g;
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function (data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (stack) {
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                var type = jQuery.type(arg);
                                if (type === 'function') {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && type !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (firing) {
                            firingLength = list.length;
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                remove: function () {
                    if (list) {
                        jQuery.each(arguments, function (_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
                },
                empty: function () {
                    list = [];
                    firingLength = 0;
                    return this;
                },
                disable: function () {
                    list = stack = memory = undefined;
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function () {
                    return !stack;
                },
                fireWith: function (context, args) {
                    if (list && (!fired || stack)) {
                        args = args || [];
                        args = [
                            context,
                            args.slice ? args.slice() : args
                        ];
                        if (firing) {
                            stack.push(args);
                        } else {
                            fire(args);
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        'rejected'
                    ],
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory')
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                    } else {
                                        newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
                    return function (value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!--remaining) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function (fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler('ready');
                jQuery(document).off('ready');
            }
        }
    });
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed, false);
        window.removeEventListener('load', completed, false);
        jQuery.ready();
    }
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === 'complete') {
                setTimeout(jQuery.ready);
            } else {
                document.addEventListener('DOMContentLoaded', completed, false);
                window.addEventListener('load', completed, false);
            }
        }
        return readyList.promise(obj);
    };
    jQuery.ready.promise();
    var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, len = elems.length, bulk = key == null;
            if (jQuery.type(key) === 'object') {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }
            } else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) {
                    raw = true;
                }
                if (bulk) {
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;
                    } else {
                        bulk = fn;
                        fn = function (elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }
                if (fn) {
                    for (; i < len; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }
            return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
        };
    jQuery.acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        Object.defineProperty(this.cache = {}, 0, {
            get: function () {
                return {};
            }
        });
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.accepts = jQuery.acceptData;
    Data.prototype = {
        key: function (owner) {
            if (!Data.accepts(owner)) {
                return 0;
            }
            var descriptor = {}, unlock = owner[this.expando];
            if (!unlock) {
                unlock = Data.uid++;
                try {
                    descriptor[this.expando] = { value: unlock };
                    Object.defineProperties(owner, descriptor);
                } catch (e) {
                    descriptor[this.expando] = unlock;
                    jQuery.extend(owner, descriptor);
                }
            }
            if (!this.cache[unlock]) {
                this.cache[unlock] = {};
            }
            return unlock;
        },
        set: function (owner, data, value) {
            var prop, unlock = this.key(owner), cache = this.cache[unlock];
            if (typeof data === 'string') {
                cache[data] = value;
            } else {
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data);
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        get: function (owner, key) {
            var cache = this.cache[this.key(owner)];
            return key === undefined ? cache : cache[key];
        },
        access: function (owner, key, value) {
            var stored;
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
                stored = this.get(owner, key);
                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
            if (key === undefined) {
                this.cache[unlock] = {};
            } else {
                if (jQuery.isArray(key)) {
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) {
                        name = [
                            key,
                            camel
                        ];
                    } else {
                        name = camel;
                        name = name in cache ? [name] : name.match(rnotwhite) || [];
                    }
                }
                i = name.length;
                while (i--) {
                    delete cache[name[i]];
                }
            }
        },
        hasData: function (owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function (owner) {
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    var data_priv = new Data();
    var data_user = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {
                }
                data_user.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function (elem, name, data) {
            return data_user.access(elem, name, data);
        },
        removeData: function (elem, name) {
            data_user.remove(elem, name);
        },
        _data: function (elem, name, data) {
            return data_priv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            data_priv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = data_user.get(elem);
                    if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf('data-') === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        data_priv.set(elem, 'hasDataAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    data_user.set(this, key);
                });
            }
            return access(this, function (value) {
                var data, camelKey = jQuery.camelCase(key);
                if (elem && value === undefined) {
                    data = data_user.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = data_user.get(elem, camelKey);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function () {
                    var data = data_user.get(this, camelKey);
                    data_user.set(this, camelKey, value);
                    if (key.indexOf('-') !== -1 && data !== undefined) {
                        data_user.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                data_user.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = data_priv.get(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = data_priv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    data_priv.remove(elem, [
                        type + 'queue',
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = data_priv.get(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var cssExpand = [
            'Top',
            'Right',
            'Bottom',
            'Left'
        ];
    var isHidden = function (elem, el) {
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
    };
    var rcheckableType = /^(?:checkbox|radio)$/i;
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }());
    var strundefined = typeof undefined;
    support.focusinBubbles = 'onfocusin' in window;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                data_priv.remove(elem, 'events');
            }
        },
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') >= 0) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.disabled !== true || event.type !== 'click') {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        fixHooks: {},
        keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function (event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
            filter: function (event, original) {
                var eventDoc, doc, body, button = original.button;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
            load: { noBubble: true },
            focus: {
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            click: {
                trigger: function () {
                    if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                        this.click();
                        return false;
                    }
                },
                _default: function (event) {
                    return jQuery.nodeName(event.target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && e.preventDefault) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && e.stopPropagation) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    data_priv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        data_priv.remove(doc, fix);
                    } else {
                        data_priv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
            var origFn, type;
            if (typeof types === 'object') {
                if (typeof selector !== 'string') {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === 'string') {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
            option: [
                1,
                '<select multiple=\'multiple\'>',
                '</select>'
            ],
            thead: [
                1,
                '<table>',
                '</table>'
            ],
            col: [
                2,
                '<table><colgroup>',
                '</colgroup></table>'
            ],
            tr: [
                2,
                '<table><tbody>',
                '</tbody></table>'
            ],
            td: [
                3,
                '<table><tbody><tr>',
                '</tr></tbody></table>'
            ],
            _default: [
                0,
                '',
                ''
            ]
        };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
        }
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);
            data_user.set(dest, udataCur);
        }
    }
    function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === 'object') {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || fragment.appendChild(context.createElement('div'));
                        tag = (rtagName.exec(elem) || [
                            '',
                            ''
                        ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp = fragment.firstChild;
                        tmp.textContent = '';
                    }
                }
            }
            fragment.textContent = '';
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(fragment.appendChild(elem), 'script');
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || '')) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            return fragment;
        },
        cleanData: function (elems) {
            var data, elem, type, key, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
                if (jQuery.acceptData(elem)) {
                    key = elem[data_priv.expando];
                    if (key && (data = data_priv.cache[key])) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (data_priv.cache[key]) {
                            delete data_priv.cache[key];
                        }
                    }
                }
                delete data_user.cache[elem[data_user.expando]];
            }
        }
    });
    jQuery.fn.extend({
        text: function (value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        remove: function (selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (; (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, 'script'));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = '';
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, '<$1></$2>');
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var arg = arguments[0];
            this.domManip(arguments, function (elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(elem, this);
                }
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function (selector) {
            return this.remove(selector, true);
        },
        domManip: function (args, callback) {
            args = concat.apply([], args);
            var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
                return this.each(function (index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                    hasScripts = scripts.length;
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, 'script'));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    if (jQuery._evalUrl) {
                                        jQuery._evalUrl(node.src);
                                    }
                                } else {
                                    jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                                }
                            }
                        }
                    }
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], 'display');
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === 'none' || !display) {
                iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
                doc = iframe[0].contentDocument;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
        if (elem.ownerDocument.defaultView.opener) {
            return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        }
        return window.getComputedStyle(elem, null);
    };
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
        }
        if (computed) {
            if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + '' : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    (function () {
        var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;' + 'position:absolute';
        container.appendChild(div);
        function computePixelPositionAndBoxSizingReliable() {
            div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;display:block;margin-top:1%;top:1%;' + 'border:1px;padding:1px;width:4px;position:absolute';
            div.innerHTML = '';
            docElem.appendChild(container);
            var divStyle = window.getComputedStyle(div, null);
            pixelPositionVal = divStyle.top !== '1%';
            boxSizingReliableVal = divStyle.width === '4px';
            docElem.removeChild(container);
        }
        if (window.getComputedStyle) {
            jQuery.extend(support, {
                pixelPosition: function () {
                    computePixelPositionAndBoxSizingReliable();
                    return pixelPositionVal;
                },
                boxSizingReliable: function () {
                    if (boxSizingReliableVal == null) {
                        computePixelPositionAndBoxSizingReliable();
                    }
                    return boxSizingReliableVal;
                },
                reliableMarginRight: function () {
                    var ret, marginDiv = div.appendChild(document.createElement('div'));
                    marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;' + 'box-sizing:content-box;display:block;margin:0;border:0;padding:0';
                    marginDiv.style.marginRight = marginDiv.style.width = '0';
                    div.style.width = '1px';
                    docElem.appendChild(container);
                    ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                    docElem.removeChild(container);
                    div.removeChild(marginDiv);
                    return ret;
                }
            });
        }
    }());
    jQuery.swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
        }, cssPrefixes = [
            'Webkit',
            'O',
            'Moz',
            'ms'
        ];
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
            if (extra === 'margin') {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === 'content') {
                    val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (extra !== 'margin') {
                    val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (extra !== 'padding') {
                    val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = data_priv.get(elem, 'olddisplay');
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === 'none') {
                    elem.style.display = '';
                }
                if (elem.style.display === '' && isHidden(elem)) {
                    values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);
                if (display !== 'none' || !hidden) {
                    data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === 'none' || elem.style.display === '') {
                elem.style.display = show ? values[index] || '' : 'none';
            }
        }
        return elements;
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            'columnCount': true,
            'fillOpacity': true,
            'flexGrow': true,
            'flexShrink': true,
            'fontWeight': true,
            'lineHeight': true,
            'opacity': true,
            'order': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        cssProps: { 'float': 'cssFloat' },
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = 'number';
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === 'number' && !jQuery.cssNumber[origName]) {
                    value += 'px';
                }
                if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    style[name] = value;
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        'height',
        'width'
    ], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
            }
        };
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
        if (computed) {
            return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
                elem,
                'marginRight'
            ]);
        }
    });
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === 'boolean') {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || 'swing';
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
            '*': [function (prop, value) {
                    var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
                    if (start && start[3] !== unit) {
                        unit = unit || start[3];
                        parts = parts || [];
                        start = +target || 1;
                        do {
                            scale = scale || '.5';
                            start = start / scale;
                            jQuery.style(tween.elem, prop, start + unit);
                        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                    }
                    if (parts) {
                        start = tween.start = +start || +target || 0;
                        tween.unit = unit;
                        tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
                    }
                    return tween;
                }]
        };
    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            display = jQuery.css(elem, 'display');
            checkDisplay = display === 'none' ? data_priv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
                style.display = 'inline-block';
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                display = undefined;
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ('hidden' in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access(elem, 'fxshow', {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                data_priv.remove(elem, 'fxshow');
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
                    }
                }
            }
        } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
            style.display = display;
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, { specialEasing: {} }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.split(' ');
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || data_priv.get(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function () {
                clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
    }());
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === strundefined) {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + '');
                    return value;
                }
            } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name);
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        elem[propName] = false;
                    }
                    elem.removeAttribute(name);
                }
            }
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        },
        prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
                return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
                }
            }
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }
    jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || '').match(rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || '').match(rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : '';
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === 'boolean' && type === 'string') {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function () {
                if (type === 'string') {
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === strundefined || type === 'boolean') {
                    if (this.className) {
                        data_priv.set(this, '__className__', this.className);
                    }
                    this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
                }
            });
        },
        hasClass: function (selector) {
            var className = ' ' + selector + ' ', i = 0, l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
        }
    });
    jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
    });
    var nonce = jQuery.now();
    var rquery = /\?/;
    jQuery.parseJSON = function (data) {
        return JSON.parse(data + '');
    };
    jQuery.parseXML = function (data) {
        var xml, tmp;
        if (!data || typeof data !== 'string') {
            return null;
        }
        try {
            tmp = new DOMParser();
            xml = tmp.parseFromString(data, 'text/xml');
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
        }
        return xml;
    };
    var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), ajaxLocation = window.location.href, ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === '*') {
                    current = prev;
                } else if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s['throws']) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: 'GET',
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': true,
                'text json': jQuery.parseJSON,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            } else {
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === 'HEAD') {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        }
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function (url) {
        return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            async: false,
            global: false,
            'throws': true
        });
    };
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, 'body')) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function (elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    };
    jQuery.expr.filters.visible = function (elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
                value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
            };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&').replace(r20, '+');
    };
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, '\r\n')
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
            0: 200,
            1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
    if (window.attachEvent) {
        window.attachEvent('onunload', function () {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key]();
            }
        });
    }
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                        headers['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                delete xhrCallbacks[id];
                                callback = xhr.onload = xhr.onerror = null;
                                if (type === 'abort') {
                                    xhr.abort();
                                } else if (type === 'error') {
                                    complete(xhr.status, xhr.statusText);
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    xhr.onerror = callback('error');
                    callback = xhrCallbacks[id] = callback('abort');
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery('<script>').prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on('load error', callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === 'error' ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (!data || typeof data !== 'string') {
            return null;
        }
        if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
            return [context.createElement(parsed[1])];
        }
        parsed = jQuery.buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== 'string' && _load) {
            return _load.apply(this, arguments);
        }
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type,
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function (jqXHR, status) {
                self.each(callback, response || [
                    jqXHR.responseText,
                    status,
                    jqXHR
                ]);
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, elem = this[0], box = {
                    top: 0,
                    left: 0
                }, doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, elem = this[0], parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], 'html')) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
                parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([
        'top',
        'left'
    ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
        });
    });
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function () {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
}));
/*lib/underscore/underscore*/
(function () {
    var root = this;
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind, nativeCreate = Object.create;
    var Ctor = function () {
    };
    var _ = function (obj) {
        if (obj instanceof _)
            return obj;
        if (!(this instanceof _))
            return new _(obj);
        this._wrapped = obj;
    };
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root._ = _;
    }
    _.VERSION = '1.8.3';
    var optimizeCb = function (func, context, argCount) {
        if (context === void 0)
            return func;
        switch (argCount == null ? 3 : argCount) {
        case 1:
            return function (value) {
                return func.call(context, value);
            };
        case 2:
            return function (value, other) {
                return func.call(context, value, other);
            };
        case 3:
            return function (value, index, collection) {
                return func.call(context, value, index, collection);
            };
        case 4:
            return function (accumulator, value, index, collection) {
                return func.call(context, accumulator, value, index, collection);
            };
        }
        return function () {
            return func.apply(context, arguments);
        };
    };
    var cb = function (value, context, argCount) {
        if (value == null)
            return _.identity;
        if (_.isFunction(value))
            return optimizeCb(value, context, argCount);
        if (_.isObject(value))
            return _.matcher(value);
        return _.property(value);
    };
    _.iteratee = function (value, context) {
        return cb(value, context, Infinity);
    };
    var createAssigner = function (keysFunc, undefinedOnly) {
        return function (obj) {
            var length = arguments.length;
            if (length < 2 || obj == null)
                return obj;
            for (var index = 1; index < length; index++) {
                var source = arguments[index], keys = keysFunc(source), l = keys.length;
                for (var i = 0; i < l; i++) {
                    var key = keys[i];
                    if (!undefinedOnly || obj[key] === void 0)
                        obj[key] = source[key];
                }
            }
            return obj;
        };
    };
    var baseCreate = function (prototype) {
        if (!_.isObject(prototype))
            return {};
        if (nativeCreate)
            return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor();
        Ctor.prototype = null;
        return result;
    };
    var property = function (key) {
        return function (obj) {
            return obj == null ? void 0 : obj[key];
        };
    };
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property('length');
    var isArrayLike = function (collection) {
        var length = getLength(collection);
        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };
    _.each = _.forEach = function (obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; i++) {
                iteratee(obj[i], i, obj);
            }
        } else {
            var keys = _.keys(obj);
            for (i = 0, length = keys.length; i < length; i++) {
                iteratee(obj[keys[i]], keys[i], obj);
            }
        }
        return obj;
    };
    _.map = _.collect = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    function createReduce(dir) {
        function iterator(obj, iteratee, memo, keys, index, length) {
            for (; index >= 0 && index < length; index += dir) {
                var currentKey = keys ? keys[index] : index;
                memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
        }
        return function (obj, iteratee, memo, context) {
            iteratee = optimizeCb(iteratee, context, 4);
            var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
            if (arguments.length < 3) {
                memo = obj[keys ? keys[index] : index];
                index += dir;
            }
            return iterator(obj, iteratee, memo, keys, index, length);
        };
    }
    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);
    _.find = _.detect = function (obj, predicate, context) {
        var key;
        if (isArrayLike(obj)) {
            key = _.findIndex(obj, predicate, context);
        } else {
            key = _.findKey(obj, predicate, context);
        }
        if (key !== void 0 && key !== -1)
            return obj[key];
    };
    _.filter = _.select = function (obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function (value, index, list) {
            if (predicate(value, index, list))
                results.push(value);
        });
        return results;
    };
    _.reject = function (obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
    };
    _.every = _.all = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (!predicate(obj[currentKey], currentKey, obj))
                return false;
        }
        return true;
    };
    _.some = _.any = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (predicate(obj[currentKey], currentKey, obj))
                return true;
        }
        return false;
    };
    _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
        if (!isArrayLike(obj))
            obj = _.values(obj);
        if (typeof fromIndex != 'number' || guard)
            fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
    };
    _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
            var func = isFunc ? method : value[method];
            return func == null ? func : func.apply(value, args);
        });
    };
    _.pluck = function (obj, key) {
        return _.map(obj, _.property(key));
    };
    _.where = function (obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
    };
    _.findWhere = function (obj, attrs) {
        return _.find(obj, _.matcher(attrs));
    };
    _.max = function (obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value > result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index, list) {
                computed = iteratee(value, index, list);
                if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.min = function (obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value < result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index, list) {
                computed = iteratee(value, index, list);
                if (computed < lastComputed || computed === Infinity && result === Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.shuffle = function (obj) {
        var set = isArrayLike(obj) ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
            rand = _.random(0, index);
            if (rand !== index)
                shuffled[index] = shuffled[rand];
            shuffled[rand] = set[index];
        }
        return shuffled;
    };
    _.sample = function (obj, n, guard) {
        if (n == null || guard) {
            if (!isArrayLike(obj))
                obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
    };
    _.sortBy = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function (value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iteratee(value, index, list)
            };
        }).sort(function (left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0)
                    return 1;
                if (a < b || b === void 0)
                    return -1;
            }
            return left.index - right.index;
        }), 'value');
    };
    var group = function (behavior) {
        return function (obj, iteratee, context) {
            var result = {};
            iteratee = cb(iteratee, context);
            _.each(obj, function (value, index) {
                var key = iteratee(value, index, obj);
                behavior(result, value, key);
            });
            return result;
        };
    };
    _.groupBy = group(function (result, value, key) {
        if (_.has(result, key))
            result[key].push(value);
        else
            result[key] = [value];
    });
    _.indexBy = group(function (result, value, key) {
        result[key] = value;
    });
    _.countBy = group(function (result, value, key) {
        if (_.has(result, key))
            result[key]++;
        else
            result[key] = 1;
    });
    _.toArray = function (obj) {
        if (!obj)
            return [];
        if (_.isArray(obj))
            return slice.call(obj);
        if (isArrayLike(obj))
            return _.map(obj, _.identity);
        return _.values(obj);
    };
    _.size = function (obj) {
        if (obj == null)
            return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };
    _.partition = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var pass = [], fail = [];
        _.each(obj, function (value, key, obj) {
            (predicate(value, key, obj) ? pass : fail).push(value);
        });
        return [
            pass,
            fail
        ];
    };
    _.first = _.head = _.take = function (array, n, guard) {
        if (array == null)
            return void 0;
        if (n == null || guard)
            return array[0];
        return _.initial(array, array.length - n);
    };
    _.initial = function (array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };
    _.last = function (array, n, guard) {
        if (array == null)
            return void 0;
        if (n == null || guard)
            return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
    };
    _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
    };
    _.compact = function (array) {
        return _.filter(array, _.identity);
    };
    var flatten = function (input, shallow, strict, startIndex) {
        var output = [], idx = 0;
        for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
            var value = input[i];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                if (!shallow)
                    value = flatten(value, shallow, strict);
                var j = 0, len = value.length;
                output.length += len;
                while (j < len) {
                    output[idx++] = value[j++];
                }
            } else if (!strict) {
                output[idx++] = value;
            }
        }
        return output;
    };
    _.flatten = function (array, shallow) {
        return flatten(array, shallow, false);
    };
    _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.uniq = _.unique = function (array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
            context = iteratee;
            iteratee = isSorted;
            isSorted = false;
        }
        if (iteratee != null)
            iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
            var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
            if (isSorted) {
                if (!i || seen !== computed)
                    result.push(value);
                seen = computed;
            } else if (iteratee) {
                if (!_.contains(seen, computed)) {
                    seen.push(computed);
                    result.push(value);
                }
            } else if (!_.contains(result, value)) {
                result.push(value);
            }
        }
        return result;
    };
    _.union = function () {
        return _.uniq(flatten(arguments, true, true));
    };
    _.intersection = function (array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
            var item = array[i];
            if (_.contains(result, item))
                continue;
            for (var j = 1; j < argsLength; j++) {
                if (!_.contains(arguments[j], item))
                    break;
            }
            if (j === argsLength)
                result.push(item);
        }
        return result;
    };
    _.difference = function (array) {
        var rest = flatten(arguments, true, true, 1);
        return _.filter(array, function (value) {
            return !_.contains(rest, value);
        });
    };
    _.zip = function () {
        return _.unzip(arguments);
    };
    _.unzip = function (array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
        for (var index = 0; index < length; index++) {
            result[index] = _.pluck(array, index);
        }
        return result;
    };
    _.object = function (list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
            if (values) {
                result[list[i]] = values[i];
            } else {
                result[list[i][0]] = list[i][1];
            }
        }
        return result;
    };
    function createPredicateIndexFinder(dir) {
        return function (array, predicate, context) {
            predicate = cb(predicate, context);
            var length = getLength(array);
            var index = dir > 0 ? 0 : length - 1;
            for (; index >= 0 && index < length; index += dir) {
                if (predicate(array[index], index, array))
                    return index;
            }
            return -1;
        };
    }
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);
    _.sortedIndex = function (array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (iteratee(array[mid]) < value)
                low = mid + 1;
            else
                high = mid;
        }
        return low;
    };
    function createIndexFinder(dir, predicateFind, sortedIndex) {
        return function (array, item, idx) {
            var i = 0, length = getLength(array);
            if (typeof idx == 'number') {
                if (dir > 0) {
                    i = idx >= 0 ? idx : Math.max(idx + length, i);
                } else {
                    length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                }
            } else if (sortedIndex && idx && length) {
                idx = sortedIndex(array, item);
                return array[idx] === item ? idx : -1;
            }
            if (item !== item) {
                idx = predicateFind(slice.call(array, i, length), _.isNaN);
                return idx >= 0 ? idx + i : -1;
            }
            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                if (array[idx] === item)
                    return idx;
            }
            return -1;
        };
    }
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
    _.range = function (start, stop, step) {
        if (stop == null) {
            stop = start || 0;
            start = 0;
        }
        step = step || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
            range[idx] = start;
        }
        return range;
    };
    var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc))
            return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result))
            return result;
        return self;
    };
    _.bind = function (func, context) {
        if (nativeBind && func.bind === nativeBind)
            return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
            throw new TypeError('Bind must be called on a function');
        var args = slice.call(arguments, 2);
        var bound = function () {
            return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
        };
        return bound;
    };
    _.partial = function (func) {
        var boundArgs = slice.call(arguments, 1);
        var bound = function () {
            var position = 0, length = boundArgs.length;
            var args = Array(length);
            for (var i = 0; i < length; i++) {
                args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
            }
            while (position < arguments.length)
                args.push(arguments[position++]);
            return executeBound(func, bound, this, this, args);
        };
        return bound;
    };
    _.bindAll = function (obj) {
        var i, length = arguments.length, key;
        if (length <= 1)
            throw new Error('bindAll must be passed function names');
        for (i = 1; i < length; i++) {
            key = arguments[i];
            obj[key] = _.bind(obj[key], obj);
        }
        return obj;
    };
    _.memoize = function (func, hasher) {
        var memoize = function (key) {
            var cache = memoize.cache;
            var address = '' + (hasher ? hasher.apply(this, arguments) : key);
            if (!_.has(cache, address))
                cache[address] = func.apply(this, arguments);
            return cache[address];
        };
        memoize.cache = {};
        return memoize;
    };
    _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
            return func.apply(null, args);
        }, wait);
    };
    _.defer = _.partial(_.delay, _, 1);
    _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options)
            options = {};
        var later = function () {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout)
                context = args = null;
        };
        return function () {
            var now = _.now();
            if (!previous && options.leading === false)
                previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
                previous = now;
                result = func.apply(context, args);
                if (!timeout)
                    context = args = null;
            } else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    };
    _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function () {
            var last = _.now() - timestamp;
            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout)
                        context = args = null;
                }
            }
        };
        return function () {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout)
                timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }
            return result;
        };
    };
    _.wrap = function (func, wrapper) {
        return _.partial(wrapper, func);
    };
    _.negate = function (predicate) {
        return function () {
            return !predicate.apply(this, arguments);
        };
    };
    _.compose = function () {
        var args = arguments;
        var start = args.length - 1;
        return function () {
            var i = start;
            var result = args[start].apply(this, arguments);
            while (i--)
                result = args[i].call(this, result);
            return result;
        };
    };
    _.after = function (times, func) {
        return function () {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };
    _.before = function (times, func) {
        var memo;
        return function () {
            if (--times > 0) {
                memo = func.apply(this, arguments);
            }
            if (times <= 1)
                func = null;
            return memo;
        };
    };
    _.once = _.partial(_.before, 2);
    var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
    var nonEnumerableProps = [
            'valueOf',
            'isPrototypeOf',
            'toString',
            'propertyIsEnumerable',
            'hasOwnProperty',
            'toLocaleString'
        ];
    function collectNonEnumProps(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
        var prop = 'constructor';
        if (_.has(obj, prop) && !_.contains(keys, prop))
            keys.push(prop);
        while (nonEnumIdx--) {
            prop = nonEnumerableProps[nonEnumIdx];
            if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                keys.push(prop);
            }
        }
    }
    _.keys = function (obj) {
        if (!_.isObject(obj))
            return [];
        if (nativeKeys)
            return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
            if (_.has(obj, key))
                keys.push(key);
        if (hasEnumBug)
            collectNonEnumProps(obj, keys);
        return keys;
    };
    _.allKeys = function (obj) {
        if (!_.isObject(obj))
            return [];
        var keys = [];
        for (var key in obj)
            keys.push(key);
        if (hasEnumBug)
            collectNonEnumProps(obj, keys);
        return keys;
    };
    _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    };
    _.mapObject = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj), length = keys.length, results = {}, currentKey;
        for (var index = 0; index < length; index++) {
            currentKey = keys[index];
            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
            pairs[i] = [
                keys[i],
                obj[keys[i]]
            ];
        }
        return pairs;
    };
    _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
        }
        return result;
    };
    _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key]))
                names.push(key);
        }
        return names.sort();
    };
    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);
    _.findKey = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (predicate(obj[key], key, obj))
                return key;
        }
    };
    _.pick = function (object, oiteratee, context) {
        var result = {}, obj = object, iteratee, keys;
        if (obj == null)
            return result;
        if (_.isFunction(oiteratee)) {
            keys = _.allKeys(obj);
            iteratee = optimizeCb(oiteratee, context);
        } else {
            keys = flatten(arguments, false, false, 1);
            iteratee = function (value, key, obj) {
                return key in obj;
            };
            obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            if (iteratee(value, key, obj))
                result[key] = value;
        }
        return result;
    };
    _.omit = function (obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
        } else {
            var keys = _.map(flatten(arguments, false, false, 1), String);
            iteratee = function (value, key) {
                return !_.contains(keys, key);
            };
        }
        return _.pick(obj, iteratee, context);
    };
    _.defaults = createAssigner(_.allKeys, true);
    _.create = function (prototype, props) {
        var result = baseCreate(prototype);
        if (props)
            _.extendOwn(result, props);
        return result;
    };
    _.clone = function (obj) {
        if (!_.isObject(obj))
            return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    _.isMatch = function (object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null)
            return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            if (attrs[key] !== obj[key] || !(key in obj))
                return false;
        }
        return true;
    };
    var eq = function (a, b, aStack, bStack) {
        if (a === b)
            return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null)
            return a === b;
        if (a instanceof _)
            a = a._wrapped;
        if (b instanceof _)
            b = b._wrapped;
        var className = toString.call(a);
        if (className !== toString.call(b))
            return false;
        switch (className) {
        case '[object RegExp]':
        case '[object String]':
            return '' + a === '' + b;
        case '[object Number]':
            if (+a !== +a)
                return +b !== +b;
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
            return +a === +b;
        }
        var areArrays = className === '[object Array]';
        if (!areArrays) {
            if (typeof a != 'object' || typeof b != 'object')
                return false;
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {
                return false;
            }
        }
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            if (aStack[length] === a)
                return bStack[length] === b;
        }
        aStack.push(a);
        bStack.push(b);
        if (areArrays) {
            length = a.length;
            if (length !== b.length)
                return false;
            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack))
                    return false;
            }
        } else {
            var keys = _.keys(a), key;
            length = keys.length;
            if (_.keys(b).length !== length)
                return false;
            while (length--) {
                key = keys[length];
                if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                    return false;
            }
        }
        aStack.pop();
        bStack.pop();
        return true;
    };
    _.isEqual = function (a, b) {
        return eq(a, b);
    };
    _.isEmpty = function (obj) {
        if (obj == null)
            return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)))
            return obj.length === 0;
        return _.keys(obj).length === 0;
    };
    _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
    };
    _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) === '[object Array]';
    };
    _.isObject = function (obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };
    _.each([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp',
        'Error'
    ], function (name) {
        _['is' + name] = function (obj) {
            return toString.call(obj) === '[object ' + name + ']';
        };
    });
    if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
            return _.has(obj, 'callee');
        };
    }
    if (typeof /./ != 'function' && typeof Int8Array != 'object') {
        _.isFunction = function (obj) {
            return typeof obj == 'function' || false;
        };
    }
    _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    _.isNaN = function (obj) {
        return _.isNumber(obj) && obj !== +obj;
    };
    _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };
    _.isNull = function (obj) {
        return obj === null;
    };
    _.isUndefined = function (obj) {
        return obj === void 0;
    };
    _.has = function (obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
    };
    _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function (value) {
        return value;
    };
    _.constant = function (value) {
        return function () {
            return value;
        };
    };
    _.noop = function () {
    };
    _.property = property;
    _.propertyOf = function (obj) {
        return obj == null ? function () {
        } : function (key) {
            return obj[key];
        };
    };
    _.matcher = _.matches = function (attrs) {
        attrs = _.extendOwn({}, attrs);
        return function (obj) {
            return _.isMatch(obj, attrs);
        };
    };
    _.times = function (n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++)
            accum[i] = iteratee(i);
        return accum;
    };
    _.random = function (min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };
    _.now = Date.now || function () {
        return new Date().getTime();
    };
    var escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#x27;',
            '`': '&#x60;'
        };
    var unescapeMap = _.invert(escapeMap);
    var createEscaper = function (map) {
        var escaper = function (match) {
            return map[match];
        };
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function (string) {
            string = string == null ? '' : '' + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);
    _.result = function (object, property, fallback) {
        var value = object == null ? void 0 : object[property];
        if (value === void 0) {
            value = fallback;
        }
        return _.isFunction(value) ? value.call(object) : value;
    };
    var idCounter = 0;
    _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
            '\'': '\'',
            '\\': '\\',
            '\r': 'r',
            '\n': 'n',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        };
    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
    var escapeChar = function (match) {
        return '\\' + escapes[match];
    };
    _.template = function (text, settings, oldSettings) {
        if (!settings && oldSettings)
            settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = RegExp([
                (settings.escape || noMatch).source,
                (settings.interpolate || noMatch).source,
                (settings.evaluate || noMatch).source
            ].join('|') + '|$', 'g');
        var index = 0;
        var source = '__p+=\'';
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, escapeChar);
            index = offset + match.length;
            if (escape) {
                source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
            } else if (interpolate) {
                source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
            } else if (evaluate) {
                source += '\';\n' + evaluate + '\n__p+=\'';
            }
            return match;
        });
        source += '\';\n';
        if (!settings.variable)
            source = 'with(obj||{}){\n' + source + '}\n';
        source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
        try {
            var render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
            e.source = source;
            throw e;
        }
        var template = function (data) {
            return render.call(this, data, _);
        };
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';
        return template;
    };
    _.chain = function (obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
    };
    var result = function (instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
    };
    _.mixin = function (obj) {
        _.each(_.functions(obj), function (name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function () {
                var args = [this._wrapped];
                push.apply(args, arguments);
                return result(this, func.apply(_, args));
            };
        });
    };
    _.mixin(_);
    _.each([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
    ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name === 'shift' || name === 'splice') && obj.length === 0)
                delete obj[0];
            return result(this, obj);
        };
    });
    _.each([
        'concat',
        'join',
        'slice'
    ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
            return result(this, method.apply(this._wrapped, arguments));
        };
    });
    _.prototype.value = function () {
        return this._wrapped;
    };
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    _.prototype.toString = function () {
        return '' + this._wrapped;
    };
    if (typeof define === 'function' && define.amd) {
        define('lib/underscore/underscore', [], function () {
            return _;
        });
    }
}.call(this));
/*lib/can/util/can*/
define('lib/can/util/can', [], function () {
    var glbl = typeof window !== 'undefined' ? window : global;
    var can = {};
    if (typeof GLOBALCAN === 'undefined' || GLOBALCAN !== false) {
        glbl.can = can;
    }
    can.global = glbl;
    can.k = function () {
    };
    can.isDeferred = can.isPromise = function (obj) {
        return obj && typeof obj.then === 'function' && typeof obj.pipe === 'function';
    };
    can.isMapLike = function (obj) {
        return can.Map && (obj instanceof can.Map || obj && obj.__get);
    };
    var cid = 0;
    can.cid = function (object, name) {
        if (!object._cid) {
            cid++;
            object._cid = (name || '') + cid;
        }
        return object._cid;
    };
    can.VERSION = '@EDGE';
    can.simpleExtend = function (d, s) {
        for (var prop in s) {
            d[prop] = s[prop];
        }
        return d;
    };
    can.last = function (arr) {
        return arr && arr[arr.length - 1];
    };
    var protoBind = Function.prototype.bind;
    if (protoBind) {
        can.proxy = function (fn, context) {
            return protoBind.call(fn, context);
        };
    } else {
        can.proxy = function (fn, context) {
            return function () {
                return fn.apply(context, arguments);
            };
        };
    }
    can.frag = function (item) {
        var frag;
        if (!item || typeof item === 'string') {
            frag = can.buildFragment(item == null ? '' : '' + item, document.body);
            if (!frag.childNodes.length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        } else if (item.nodeType === 11) {
            return item;
        } else if (typeof item.nodeType === 'number') {
            frag = document.createDocumentFragment();
            frag.appendChild(item);
            return frag;
        } else if (typeof item.length === 'number') {
            frag = document.createDocumentFragment();
            can.each(item, function (item) {
                frag.appendChild(can.frag(item));
            });
            return frag;
        } else {
            frag = can.buildFragment('' + item, document.body);
            if (!frag.childNodes.length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        }
    };
    can.scope = can.viewModel = function (el, attr, val) {
        el = can.$(el);
        var scope = can.data(el, 'scope') || can.data(el, 'viewModel');
        if (!scope) {
            scope = new can.Map();
            can.data(el, 'scope', scope);
            can.data(el, 'viewModel', scope);
        }
        switch (arguments.length) {
        case 0:
        case 1:
            return scope;
        case 2:
            return scope.attr(attr);
        default:
            scope.attr(attr, val);
            return el;
        }
    };
    can['import'] = function (moduleName) {
        var deferred = new can.Deferred();
        if (typeof window.System === 'object' && can.isFunction(window.System['import'])) {
            window.System['import'](moduleName).then(can.proxy(deferred.resolve, deferred), can.proxy(deferred.reject, deferred));
        } else if (window.define && window.define.amd) {
            window.require([moduleName], function (value) {
                deferred.resolve(value);
            });
        } else if (window.steal) {
            steal.steal(moduleName, function (value) {
                deferred.resolve(value);
            });
        } else if (window.require) {
            deferred.resolve(window.require(moduleName));
        } else {
            deferred.resolve();
        }
        return deferred.promise();
    };
    can.__observe = function () {
    };
    return can;
});
/*lib/can/util/attr/attr*/
define('lib/can/util/attr/attr', ['can/util/can'], function (can) {
    var setImmediate = can.global.setImmediate || function (cb) {
            return setTimeout(cb, 0);
        }, attr = {
            MutationObserver: can.global.MutationObserver || can.global.WebKitMutationObserver || can.global.MozMutationObserver,
            map: {
                'class': 'className',
                'value': 'value',
                'innertext': 'innerText',
                'textcontent': 'textContent',
                'checked': true,
                'disabled': true,
                'readonly': true,
                'required': true,
                src: function (el, val) {
                    if (val == null || val === '') {
                        el.removeAttribute('src');
                        return null;
                    } else {
                        el.setAttribute('src', val);
                        return val;
                    }
                },
                style: function (el, val) {
                    return el.style.cssText = val || '';
                }
            },
            defaultValue: [
                'input',
                'textarea'
            ],
            set: function (el, attrName, val) {
                attrName = attrName.toLowerCase();
                var oldValue;
                if (!attr.MutationObserver) {
                    oldValue = attr.get(el, attrName);
                }
                var tagName = el.nodeName.toString().toLowerCase(), prop = attr.map[attrName], newValue;
                if (typeof prop === 'function') {
                    newValue = prop(el, val);
                } else if (prop === true) {
                    newValue = el[attrName] = true;
                    if (attrName === 'checked' && el.type === 'radio') {
                        if (can.inArray(tagName, attr.defaultValue) >= 0) {
                            el.defaultChecked = true;
                        }
                    }
                } else if (prop) {
                    newValue = val;
                    if (el[prop] !== val) {
                        el[prop] = val;
                    }
                    if (prop === 'value' && can.inArray(tagName, attr.defaultValue) >= 0) {
                        el.defaultValue = val;
                    }
                } else {
                    el.setAttribute(attrName, val);
                    newValue = val;
                }
                if (!attr.MutationObserver && newValue !== oldValue) {
                    attr.trigger(el, attrName, oldValue);
                }
            },
            trigger: function (el, attrName, oldValue) {
                if (can.data(can.$(el), 'canHasAttributesBindings')) {
                    attrName = attrName.toLowerCase();
                    return setImmediate(function () {
                        can.trigger(el, {
                            type: 'attributes',
                            attributeName: attrName,
                            target: el,
                            oldValue: oldValue,
                            bubbles: false
                        }, []);
                    });
                }
            },
            get: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var prop = attr.map[attrName];
                if (typeof prop === 'string' && el[prop]) {
                    return el[prop];
                }
                return el.getAttribute(attrName);
            },
            remove: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var oldValue;
                if (!attr.MutationObserver) {
                    oldValue = attr.get(el, attrName);
                }
                var setter = attr.map[attrName];
                if (typeof setter === 'function') {
                    setter(el, undefined);
                }
                if (setter === true) {
                    el[attrName] = false;
                } else if (typeof setter === 'string') {
                    el[setter] = '';
                } else {
                    el.removeAttribute(attrName);
                }
                if (!attr.MutationObserver && oldValue != null) {
                    attr.trigger(el, attrName, oldValue);
                }
            },
            has: function () {
                var el = can.global.document && document.createElement('div');
                if (el && el.hasAttribute) {
                    return function (el, name) {
                        return el.hasAttribute(name);
                    };
                } else {
                    return function (el, name) {
                        return el.getAttribute(name) !== null;
                    };
                }
            }()
        };
    return attr;
});
/*lib/can/event/event*/
define('lib/can/event/event', ['can/util/can'], function (can) {
    can.addEvent = function (event, handler) {
        var allEvents = this.__bindEvents || (this.__bindEvents = {}), eventList = allEvents[event] || (allEvents[event] = []);
        eventList.push({
            handler: handler,
            name: event
        });
        return this;
    };
    can.listenTo = function (other, event, handler) {
        var idedEvents = this.__listenToEvents;
        if (!idedEvents) {
            idedEvents = this.__listenToEvents = {};
        }
        var otherId = can.cid(other);
        var othersEvents = idedEvents[otherId];
        if (!othersEvents) {
            othersEvents = idedEvents[otherId] = {
                obj: other,
                events: {}
            };
        }
        var eventsEvents = othersEvents.events[event];
        if (!eventsEvents) {
            eventsEvents = othersEvents.events[event] = [];
        }
        eventsEvents.push(handler);
        can.bind.call(other, event, handler);
    };
    can.stopListening = function (other, event, handler) {
        var idedEvents = this.__listenToEvents, iterIdedEvents = idedEvents, i = 0;
        if (!idedEvents) {
            return this;
        }
        if (other) {
            var othercid = can.cid(other);
            (iterIdedEvents = {})[othercid] = idedEvents[othercid];
            if (!idedEvents[othercid]) {
                return this;
            }
        }
        for (var cid in iterIdedEvents) {
            var othersEvents = iterIdedEvents[cid], eventsEvents;
            other = idedEvents[cid].obj;
            if (!event) {
                eventsEvents = othersEvents.events;
            } else {
                (eventsEvents = {})[event] = othersEvents.events[event];
            }
            for (var eventName in eventsEvents) {
                var handlers = eventsEvents[eventName] || [];
                i = 0;
                while (i < handlers.length) {
                    if (handler && handler === handlers[i] || !handler) {
                        can.unbind.call(other, eventName, handlers[i]);
                        handlers.splice(i, 1);
                    } else {
                        i++;
                    }
                }
                if (!handlers.length) {
                    delete othersEvents.events[eventName];
                }
            }
            if (can.isEmptyObject(othersEvents.events)) {
                delete idedEvents[cid];
            }
        }
        return this;
    };
    can.removeEvent = function (event, fn, __validate) {
        if (!this.__bindEvents) {
            return this;
        }
        var events = this.__bindEvents[event] || [], i = 0, ev, isFunction = typeof fn === 'function';
        while (i < events.length) {
            ev = events[i];
            if (__validate ? __validate(ev, event, fn) : isFunction && ev.handler === fn || !isFunction && (ev.cid === fn || !fn)) {
                events.splice(i, 1);
            } else {
                i++;
            }
        }
        return this;
    };
    can.dispatch = function (event, args) {
        var events = this.__bindEvents;
        if (!events) {
            return;
        }
        if (typeof event === 'string') {
            event = { type: event };
        }
        var eventName = event.type, handlers = (events[eventName] || []).slice(0), passed = [event];
        if (args) {
            passed.push.apply(passed, args);
        }
        for (var i = 0, len = handlers.length; i < len; i++) {
            handlers[i].handler.apply(this, passed);
        }
        return event;
    };
    can.one = function (event, handler) {
        var one = function () {
            can.unbind.call(this, event, one);
            return handler.apply(this, arguments);
        };
        can.bind.call(this, event, one);
        return this;
    };
    can.event = {
        on: function () {
            if (arguments.length === 0 && can.Control && this instanceof can.Control) {
                return can.Control.prototype.on.call(this);
            } else {
                return can.addEvent.apply(this, arguments);
            }
        },
        off: function () {
            if (arguments.length === 0 && can.Control && this instanceof can.Control) {
                return can.Control.prototype.off.call(this);
            } else {
                return can.removeEvent.apply(this, arguments);
            }
        },
        bind: can.addEvent,
        unbind: can.removeEvent,
        delegate: function (selector, event, handler) {
            return can.addEvent.call(this, event, handler);
        },
        undelegate: function (selector, event, handler) {
            return can.removeEvent.call(this, event, handler);
        },
        trigger: can.dispatch,
        one: can.one,
        addEvent: can.addEvent,
        removeEvent: can.removeEvent,
        listenTo: can.listenTo,
        stopListening: can.stopListening,
        dispatch: can.dispatch
    };
    return can.event;
});
/*lib/can/util/array/each*/
define('lib/can/util/array/each', ['can/util/can'], function (can) {
    var isArrayLike = function (obj) {
        var length = 'length' in obj && obj.length;
        return typeof arr !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    };
    can.each = function (elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (isArrayLike(elements)) {
                if (can.List && elements instanceof can.List) {
                    for (len = elements.attr('length'); i < len; i++) {
                        item = elements.attr(i);
                        if (callback.call(context || item, item, i, elements) === false) {
                            break;
                        }
                    }
                } else {
                    for (len = elements.length; i < len; i++) {
                        item = elements[i];
                        if (callback.call(context || item, item, i, elements) === false) {
                            break;
                        }
                    }
                }
            } else if (typeof elements === 'object') {
                if (can.Map && elements instanceof can.Map || elements === can.route) {
                    var keys = can.Map.keys(elements);
                    for (i = 0, len = keys.length; i < len; i++) {
                        key = keys[i];
                        item = elements.attr(key);
                        if (callback.call(context || item, item, key, elements) === false) {
                            break;
                        }
                    }
                } else {
                    for (key in elements) {
                        if (elements.hasOwnProperty(key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                            break;
                        }
                    }
                }
            }
        }
        return elements;
    };
    return can;
});
/*lib/can/util/inserted/inserted*/
define('lib/can/util/inserted/inserted', ['can/util/can'], function (can) {
    can.inserted = function (elems) {
        elems = can.makeArray(elems);
        var inDocument = false, doc = can.$(document.contains ? document : document.body), children;
        for (var i = 0, elem; (elem = elems[i]) !== undefined; i++) {
            if (!inDocument) {
                if (elem.getElementsByTagName) {
                    if (can.has(doc, elem).length) {
                        inDocument = true;
                    } else {
                        return;
                    }
                } else {
                    continue;
                }
            }
            if (inDocument && elem.getElementsByTagName) {
                children = can.makeArray(elem.getElementsByTagName('*'));
                can.trigger(elem, 'inserted', [], false);
                for (var j = 0, child; (child = children[j]) !== undefined; j++) {
                    can.trigger(child, 'inserted', [], false);
                }
            }
        }
    };
    can.appendChild = function (el, child) {
        var children;
        if (child.nodeType === 11) {
            children = can.makeArray(child.childNodes);
        } else {
            children = [child];
        }
        el.appendChild(child);
        can.inserted(children);
    };
    can.insertBefore = function (el, child, ref) {
        var children;
        if (child.nodeType === 11) {
            children = can.makeArray(child.childNodes);
        } else {
            children = [child];
        }
        el.insertBefore(child, ref);
        can.inserted(children);
    };
});
/*lib/can/util/jquery/jquery*/
define('lib/can/util/jquery/jquery', [
    'jquery/jquery',
    'can/util/can',
    'can/util/attr/attr',
    'can/event/event',
    'can/util/array/each',
    'can/util/inserted/inserted'
], function ($, can, attr, event) {
    var isBindableElement = function (node) {
        return node.nodeName && (node.nodeType === 1 || node.nodeType === 9) || node == window;
    };
    $ = $ || window.jQuery;
    $.extend(can, $, {
        trigger: function (obj, event, args, bubbles) {
            if (isBindableElement(obj)) {
                $.event.trigger(event, args, obj, !bubbles);
            } else if (obj.trigger) {
                obj.trigger(event, args);
            } else {
                if (typeof event === 'string') {
                    event = { type: event };
                }
                event.target = event.target || obj;
                if (args) {
                    if (args.length && typeof args === 'string') {
                        args = [args];
                    } else if (!args.length) {
                        args = [args];
                    }
                }
                if (!args) {
                    args = [];
                }
                can.dispatch.call(obj, event, args);
            }
        },
        event: can.event,
        addEvent: can.addEvent,
        removeEvent: can.removeEvent,
        buildFragment: function (elems, context) {
            var ret;
            elems = [elems];
            context = context || document;
            context = !context.nodeType && context[0] || context;
            context = context.ownerDocument || context;
            ret = $.buildFragment(elems, context);
            return ret.cacheable ? $.clone(ret.fragment) : ret.fragment || ret;
        },
        $: $,
        each: can.each,
        bind: function (ev, cb) {
            if (this.bind && this.bind !== can.bind) {
                this.bind(ev, cb);
            } else if (isBindableElement(this)) {
                $.event.add(this, ev, cb);
            } else {
                can.addEvent.call(this, ev, cb);
            }
            return this;
        },
        unbind: function (ev, cb) {
            if (this.unbind && this.unbind !== can.unbind) {
                this.unbind(ev, cb);
            } else if (isBindableElement(this)) {
                $.event.remove(this, ev, cb);
            } else {
                can.removeEvent.call(this, ev, cb);
            }
            return this;
        },
        delegate: function (selector, ev, cb) {
            if (this.delegate) {
                this.delegate(selector, ev, cb);
            } else if (isBindableElement(this)) {
                $(this).delegate(selector, ev, cb);
            } else {
                can.bind.call(this, ev, cb);
            }
            return this;
        },
        undelegate: function (selector, ev, cb) {
            if (this.undelegate) {
                this.undelegate(selector, ev, cb);
            } else if (isBindableElement(this)) {
                $(this).undelegate(selector, ev, cb);
            } else {
                can.unbind.call(this, ev, cb);
            }
            return this;
        },
        proxy: can.proxy,
        attr: attr
    });
    can.on = can.bind;
    can.off = can.unbind;
    $.each([
        'append',
        'filter',
        'addClass',
        'remove',
        'data',
        'get',
        'has'
    ], function (i, name) {
        can[name] = function (wrapped) {
            return wrapped[name].apply(wrapped, can.makeArray(arguments).slice(1));
        };
    });
    var oldClean = $.cleanData;
    $.cleanData = function (elems) {
        $.each(elems, function (i, elem) {
            if (elem) {
                can.trigger(elem, 'removed', [], false);
            }
        });
        oldClean(elems);
    };
    var oldDomManip = $.fn.domManip, cbIndex;
    $.fn.domManip = function (args, cb1, cb2) {
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'function') {
                cbIndex = i;
                break;
            }
        }
        return oldDomManip.apply(this, arguments);
    };
    $(document.createElement('div')).append(document.createElement('div'));
    $.fn.domManip = cbIndex === 2 ? function (args, table, callback) {
        return oldDomManip.call(this, args, table, function (elem) {
            var elems;
            if (elem.nodeType === 11) {
                elems = can.makeArray(elem.childNodes);
            }
            var ret = callback.apply(this, arguments);
            can.inserted(elems ? elems : [elem]);
            return ret;
        });
    } : function (args, callback) {
        return oldDomManip.call(this, args, function (elem) {
            var elems;
            if (elem.nodeType === 11) {
                elems = can.makeArray(elem.childNodes);
            }
            var ret = callback.apply(this, arguments);
            can.inserted(elems ? elems : [elem]);
            return ret;
        });
    };
    if (!can.attr.MutationObserver) {
        var oldAttr = $.attr;
        $.attr = function (el, attrName) {
            var oldValue, newValue;
            if (arguments.length >= 3) {
                oldValue = oldAttr.call(this, el, attrName);
            }
            var res = oldAttr.apply(this, arguments);
            if (arguments.length >= 3) {
                newValue = oldAttr.call(this, el, attrName);
            }
            if (newValue !== oldValue) {
                can.attr.trigger(el, attrName, oldValue);
            }
            return res;
        };
        var oldRemove = $.removeAttr;
        $.removeAttr = function (el, attrName) {
            var oldValue = oldAttr.call(this, el, attrName), res = oldRemove.apply(this, arguments);
            if (oldValue != null) {
                can.attr.trigger(el, attrName, oldValue);
            }
            return res;
        };
        $.event.special.attributes = {
            setup: function () {
                can.data(can.$(this), 'canHasAttributesBindings', true);
            },
            teardown: function () {
                $.removeData(this, 'canHasAttributesBindings');
            }
        };
    } else {
        $.event.special.attributes = {
            setup: function () {
                var self = this;
                var observer = new can.attr.MutationObserver(function (mutations) {
                        mutations.forEach(function (mutation) {
                            var copy = can.simpleExtend({}, mutation);
                            can.trigger(self, copy, []);
                        });
                    });
                observer.observe(this, {
                    attributes: true,
                    attributeOldValue: true
                });
                can.data(can.$(this), 'canAttributesObserver', observer);
            },
            teardown: function () {
                can.data(can.$(this), 'canAttributesObserver').disconnect();
                $.removeData(this, 'canAttributesObserver');
            }
        };
    }
    (function () {
        var text = '<-\n>', frag = can.buildFragment(text, document);
        if (text !== frag.childNodes[0].nodeValue) {
            var oldBuildFragment = can.buildFragment;
            can.buildFragment = function (content, context) {
                var res = oldBuildFragment(content, context);
                if (res.childNodes.length === 1 && res.childNodes[0].nodeType === 3) {
                    res.childNodes[0].nodeValue = content;
                }
                return res;
            };
        }
    }());
    $.event.special.inserted = {};
    $.event.special.removed = {};
    return can;
});
/*lib/can/util/util*/
define('lib/can/util/util', ['can/util/jquery/jquery'], function (can) {
    return can;
});
/*lib/can/util/bind/bind*/
define('lib/can/util/bind/bind', ['can/util/util'], function (can) {
    can.bindAndSetup = function () {
        can.addEvent.apply(this, arguments);
        if (!this._init) {
            if (!this._bindings) {
                this._bindings = 1;
                if (this._bindsetup) {
                    this._bindsetup();
                }
            } else {
                this._bindings++;
            }
        }
        return this;
    };
    can.unbindAndTeardown = function (event, handler) {
        if (!this.__bindEvents) {
            return this;
        }
        var handlers = this.__bindEvents[event] || [];
        var handlerCount = handlers.length;
        can.removeEvent.apply(this, arguments);
        if (this._bindings === null) {
            this._bindings = 0;
        } else {
            this._bindings = this._bindings - (handlerCount - handlers.length);
        }
        if (!this._bindings && this._bindteardown) {
            this._bindteardown();
        }
        return this;
    };
    return can;
});
/*lib/can/map/bubble*/
define('lib/can/map/bubble', ['can/util/util'], function (can) {
    var bubble = can.bubble = {
            event: function (map, boundEventName) {
                return map.constructor._bubbleRule(boundEventName, map);
            },
            childrenOf: function (parentMap, eventName) {
                parentMap._each(function (child, prop) {
                    if (child && child.bind) {
                        bubble.toParent(child, parentMap, prop, eventName);
                    }
                });
            },
            teardownChildrenFrom: function (parentMap, eventName) {
                parentMap._each(function (child) {
                    bubble.teardownFromParent(parentMap, child, eventName);
                });
            },
            toParent: function (child, parent, prop, eventName) {
                can.listenTo.call(parent, child, eventName, function () {
                    var args = can.makeArray(arguments), ev = args.shift();
                    args[0] = (can.List && parent instanceof can.List ? parent.indexOf(child) : prop) + (args[0] ? '.' + args[0] : '');
                    ev.triggeredNS = ev.triggeredNS || {};
                    if (ev.triggeredNS[parent._cid]) {
                        return;
                    }
                    ev.triggeredNS[parent._cid] = true;
                    can.trigger(parent, ev, args);
                });
            },
            teardownFromParent: function (parent, child, eventName) {
                if (child && child.unbind) {
                    can.stopListening.call(parent, child, eventName);
                }
            },
            isBubbling: function (parent, eventName) {
                return parent._bubbleBindings && parent._bubbleBindings[eventName];
            },
            bind: function (parent, eventName) {
                if (!parent._init) {
                    var bubbleEvents = bubble.event(parent, eventName), len = bubbleEvents.length, bubbleEvent;
                    if (!parent._bubbleBindings) {
                        parent._bubbleBindings = {};
                    }
                    for (var i = 0; i < len; i++) {
                        bubbleEvent = bubbleEvents[i];
                        if (!parent._bubbleBindings[bubbleEvent]) {
                            parent._bubbleBindings[bubbleEvent] = 1;
                            bubble.childrenOf(parent, bubbleEvent);
                        } else {
                            parent._bubbleBindings[bubbleEvent]++;
                        }
                    }
                }
            },
            unbind: function (parent, eventName) {
                var bubbleEvents = bubble.event(parent, eventName), len = bubbleEvents.length, bubbleEvent;
                for (var i = 0; i < len; i++) {
                    bubbleEvent = bubbleEvents[i];
                    if (parent._bubbleBindings) {
                        parent._bubbleBindings[bubbleEvent]--;
                    }
                    if (parent._bubbleBindings && !parent._bubbleBindings[bubbleEvent]) {
                        delete parent._bubbleBindings[bubbleEvent];
                        bubble.teardownChildrenFrom(parent, bubbleEvent);
                        if (can.isEmptyObject(parent._bubbleBindings)) {
                            delete parent._bubbleBindings;
                        }
                    }
                }
            },
            add: function (parent, child, prop) {
                if (child instanceof can.Map && parent._bubbleBindings) {
                    for (var eventName in parent._bubbleBindings) {
                        if (parent._bubbleBindings[eventName]) {
                            bubble.teardownFromParent(parent, child, eventName);
                            bubble.toParent(child, parent, prop, eventName);
                        }
                    }
                }
            },
            removeMany: function (parent, children) {
                for (var i = 0, len = children.length; i < len; i++) {
                    bubble.remove(parent, children[i]);
                }
            },
            remove: function (parent, child) {
                if (child instanceof can.Map && parent._bubbleBindings) {
                    for (var eventName in parent._bubbleBindings) {
                        if (parent._bubbleBindings[eventName]) {
                            bubble.teardownFromParent(parent, child, eventName);
                        }
                    }
                }
            },
            set: function (parent, prop, value, current) {
                if (can.Map.helpers.isObservable(value)) {
                    bubble.add(parent, value, prop);
                }
                if (can.Map.helpers.isObservable(current)) {
                    bubble.remove(parent, current);
                }
                return value;
            }
        };
    return bubble;
});
/*lib/can/util/string/string*/
define('lib/can/util/string/string', ['can/util/util'], function (can) {
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strReplacer = /\{([^\}]+)\}/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, getNext = function (obj, prop, add) {
            var result = obj[prop];
            if (result === undefined && add === true) {
                result = obj[prop] = {};
            }
            return result;
        }, isContainer = function (current) {
            return /^f|^o/.test(typeof current);
        }, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    can.extend(can, {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        getObject: function (name, roots, add, value) {
            var parts = name ? name.split('.') : [], length = parts.length, current, r = 0, i, container, rootsLength;
            roots = can.isArray(roots) ? roots : [roots || window];
            rootsLength = roots.length;
            if (!length) {
                return roots[0];
            }
            for (r; r < rootsLength; r++) {
                current = roots[r];
                container = undefined;
                for (i = 0; i < length && isContainer(current); i++) {
                    container = current;
                    current = getNext(container, parts[i]);
                }
                if (container !== undefined && current !== undefined) {
                    break;
                }
            }
            if (add === false && current !== undefined) {
                delete container[parts[i - 1]];
            }
            if (add === true && current === undefined) {
                current = roots[0];
                for (i = 0; i < length && isContainer(current); i++) {
                    current = getNext(current, parts[i], true);
                }
            }
            if (add === true && typeof value != 'undefined') {
                current = roots[0];
                container = undefined;
                for (i = 0; i < length && isContainer(current); i++) {
                    container = current;
                    current = getNext(current, parts[i], true);
                }
                container[parts[i - 1]] = value;
            }
            return current;
        },
        capitalize: function (s, cache) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str, offset) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        sub: function (str, data, remove) {
            var obs = [];
            str = str || '';
            obs.push(str.replace(strReplacer, function (whole, inside) {
                var ob = can.getObject(inside, data, remove === true ? false : undefined);
                if (ob === undefined || ob === null) {
                    obs = null;
                    return '';
                }
                if (isContainer(ob) && obs) {
                    obs.push(ob);
                    return '';
                }
                return '' + ob;
            }));
            return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
        },
        replacer: strReplacer,
        undHash: strUndHash
    });
    return can;
});
/*lib/can/construct/construct*/
define('lib/can/construct/construct', ['can/util/string/string'], function (can) {
    var initializing = 0;
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    can.Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                can.Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        };
    can.Construct = function () {
        if (arguments.length) {
            return can.Construct.extend.apply(can.Construct, arguments);
        }
    };
    can.extend(can.Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                args = inst.setup.apply(inst, arguments);
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            what[propName] = val;
        },
        setup: function (base, fullName) {
            this.defaults = can.extend(true, {}, base.defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var fullName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof fullName !== 'string') {
                proto = klass;
                klass = fullName;
                fullName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, parts, current, _fullName, _shortName, propName, shortName, namespace, prototype;
            prototype = this.instance();
            can.Construct._inherit(proto, _super, prototype);
            if (fullName) {
                parts = fullName.split('.');
                shortName = parts.pop();
            }
            if (typeof constructorName === 'undefined') {
                Constructor = function () {
                    return init.apply(this, arguments);
                };
            }
            function init() {
                if (!initializing) {
                    return this.constructor !== Constructor && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            for (propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            can.Construct._inherit(klass, _super_class, Constructor);
            if (fullName) {
                current = can.getObject(parts.join('.'), window, true);
                namespace = current;
                _fullName = can.underscore(fullName.replace(/\./g, '_'));
                _shortName = can.underscore(shortName);
                current[shortName] = Constructor;
            }
            can.extend(Constructor, {
                constructor: Constructor,
                prototype: prototype,
                namespace: namespace,
                _shortName: _shortName,
                fullName: fullName,
                _fullName: _fullName
            });
            if (shortName !== undefined) {
                Constructor.shortName = shortName;
            }
            Constructor.prototype.constructor = Constructor;
            var t = [_super_class].concat(can.makeArray(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        }
    });
    can.Construct.prototype.setup = function () {
    };
    can.Construct.prototype.init = function () {
    };
    return can.Construct;
});
/*lib/can/util/batch/batch*/
define('lib/can/util/batch/batch', ['can/util/can'], function (can) {
    var batchNum = 1, transactions = 0, batchEvents = [], stopCallbacks = [], currentBatchEvents = null;
    can.batch = {
        start: function (batchStopHandler) {
            transactions++;
            if (batchStopHandler) {
                stopCallbacks.push(batchStopHandler);
            }
        },
        stop: function (force, callStart) {
            if (force) {
                transactions = 0;
            } else {
                transactions--;
            }
            if (transactions === 0) {
                if (currentBatchEvents !== null) {
                    return;
                }
                currentBatchEvents = batchEvents.slice(0);
                var callbacks = stopCallbacks.slice(0), i, len;
                batchEvents = [];
                stopCallbacks = [];
                can.batch.batchNum = batchNum;
                batchNum++;
                if (callStart) {
                    can.batch.start();
                }
                for (i = 0; i < currentBatchEvents.length; i++) {
                    can.dispatch.apply(currentBatchEvents[i][0], currentBatchEvents[i][1]);
                }
                currentBatchEvents = null;
                for (i = 0, len = callbacks.length; i < callbacks.length; i++) {
                    callbacks[i]();
                }
                can.batch.batchNum = undefined;
            }
        },
        trigger: function (item, event, args) {
            if (!item._init) {
                event = typeof event === 'string' ? {
                    type: event,
                    batchNum: can.batch.batchNum
                } : event;
                if (currentBatchEvents) {
                    currentBatchEvents.push([
                        item,
                        [
                            event,
                            args
                        ]
                    ]);
                } else if (transactions === 0) {
                    return can.dispatch.call(item, event, args);
                } else {
                    event.batchNum = batchNum;
                    batchEvents.push([
                        item,
                        [
                            event,
                            args
                        ]
                    ]);
                }
            }
        },
        afterPreviousEvents: function (handler) {
            if (currentBatchEvents) {
                var obj = {};
                can.bind.call(obj, 'ready', handler);
                currentBatchEvents.push([
                    obj,
                    [
                        { type: 'ready' },
                        []
                    ]
                ]);
            } else {
                handler();
            }
        }
    };
});
/*lib/can/map/map*/
define('lib/can/map/map', [
    'can/util/util',
    'can/util/bind/bind',
    './bubble',
    'can/construct/construct',
    'can/util/batch/batch'
], function (can, bind, bubble) {
    var madeMap = null;
    var teardownMap = function () {
        for (var cid in madeMap) {
            if (madeMap[cid].added) {
                delete madeMap[cid].obj._cid;
            }
        }
        madeMap = null;
    };
    var getMapFromObject = function (obj) {
        return madeMap && madeMap[obj._cid] && madeMap[obj._cid].instance;
    };
    var serializeMap = null;
    var Map = can.Map = can.Construct.extend({
            setup: function () {
                can.Construct.setup.apply(this, arguments);
                if (can.Map) {
                    if (!this.defaults) {
                        this.defaults = {};
                    }
                    this._computes = [];
                    for (var prop in this.prototype) {
                        if (prop !== 'define' && prop !== 'constructor' && (typeof this.prototype[prop] !== 'function' || this.prototype[prop].prototype instanceof can.Construct)) {
                            this.defaults[prop] = this.prototype[prop];
                        } else if (this.prototype[prop].isComputed) {
                            this._computes.push(prop);
                        }
                    }
                    if (this.helpers.define) {
                        this.helpers.define(this);
                    }
                }
                if (can.List && !(this.prototype instanceof can.List)) {
                    this.List = Map.List.extend({ Map: this }, {});
                }
            },
            _bubble: bubble,
            _bubbleRule: function (eventName) {
                return eventName === 'change' || eventName.indexOf('.') >= 0 ? ['change'] : [];
            },
            _computes: [],
            bind: can.bindAndSetup,
            on: can.bindAndSetup,
            unbind: can.unbindAndTeardown,
            off: can.unbindAndTeardown,
            id: 'id',
            helpers: {
                define: null,
                attrParts: function (attr, keepKey) {
                    if (keepKey) {
                        return [attr];
                    }
                    return typeof attr === 'object' ? attr : ('' + attr).split('.');
                },
                addToMap: function (obj, instance) {
                    var teardown;
                    if (!madeMap) {
                        teardown = teardownMap;
                        madeMap = {};
                    }
                    var hasCid = obj._cid;
                    var cid = can.cid(obj);
                    if (!madeMap[cid]) {
                        madeMap[cid] = {
                            obj: obj,
                            instance: instance,
                            added: !hasCid
                        };
                    }
                    return teardown;
                },
                isObservable: function (obj) {
                    return obj instanceof can.Map || obj && obj === can.route;
                },
                canMakeObserve: function (obj) {
                    return obj && !can.isDeferred(obj) && (can.isArray(obj) || can.isPlainObject(obj));
                },
                serialize: function (map, how, where) {
                    var cid = can.cid(map), firstSerialize = false;
                    if (!serializeMap) {
                        firstSerialize = true;
                        serializeMap = {
                            attr: {},
                            serialize: {}
                        };
                    }
                    serializeMap[how][cid] = where;
                    map.each(function (val, name) {
                        var result, isObservable = Map.helpers.isObservable(val), serialized = isObservable && serializeMap[how][can.cid(val)];
                        if (serialized) {
                            result = serialized;
                        } else {
                            if (how === 'serialize') {
                                result = Map.helpers._serialize(map, name, val);
                            } else {
                                result = Map.helpers._getValue(map, name, val, how);
                            }
                        }
                        if (result !== undefined) {
                            where[name] = result;
                        }
                    });
                    can.__observe(map, '__keys');
                    if (firstSerialize) {
                        serializeMap = null;
                    }
                    return where;
                },
                _serialize: function (map, name, val) {
                    return Map.helpers._getValue(map, name, val, 'serialize');
                },
                _getValue: function (map, name, val, how) {
                    if (Map.helpers.isObservable(val)) {
                        return val[how]();
                    } else {
                        return val;
                    }
                }
            },
            keys: function (map) {
                var keys = [];
                can.__observe(map, '__keys');
                for (var keyName in map._data) {
                    keys.push(keyName);
                }
                return keys;
            }
        }, {
            setup: function (obj) {
                if (obj instanceof can.Map) {
                    obj = obj.serialize();
                }
                this._data = {};
                can.cid(this, '.map');
                this._init = 1;
                this._computedBindings = {};
                var defaultValues = this._setupDefaults(obj);
                this._setupComputes(defaultValues);
                var teardownMapping = obj && can.Map.helpers.addToMap(obj, this);
                var data = can.extend(can.extend(true, {}, defaultValues), obj);
                this.attr(data);
                if (teardownMapping) {
                    teardownMapping();
                }
                this.bind('change', can.proxy(this._changes, this));
                delete this._init;
            },
            _setupComputes: function () {
                var computes = this.constructor._computes;
                for (var i = 0, len = computes.length, prop; i < len; i++) {
                    prop = computes[i];
                    this[prop] = this[prop].clone(this);
                    this._computedBindings[prop] = { count: 0 };
                }
            },
            _setupDefaults: function () {
                return this.constructor.defaults || {};
            },
            _bindsetup: function () {
            },
            _bindteardown: function () {
            },
            _changes: function (ev, attr, how, newVal, oldVal) {
                can.batch.trigger(this, {
                    type: attr,
                    batchNum: ev.batchNum,
                    target: ev.target
                }, [
                    newVal,
                    oldVal
                ]);
            },
            _triggerChange: function (attr, how, newVal, oldVal) {
                if (bubble.isBubbling(this, 'change')) {
                    can.batch.trigger(this, {
                        type: 'change',
                        target: this
                    }, [
                        attr,
                        how,
                        newVal,
                        oldVal
                    ]);
                } else {
                    can.batch.trigger(this, attr, [
                        newVal,
                        oldVal
                    ]);
                }
                if (how === 'remove' || how === 'add') {
                    can.batch.trigger(this, {
                        type: '__keys',
                        target: this
                    });
                }
            },
            _each: function (callback) {
                var data = this.__get();
                for (var prop in data) {
                    if (data.hasOwnProperty(prop)) {
                        callback(data[prop], prop);
                    }
                }
            },
            attr: function (attr, val) {
                var type = typeof attr;
                if (type !== 'string' && type !== 'number') {
                    return this._attrs(attr, val);
                } else if (arguments.length === 1) {
                    return this._get(attr);
                } else {
                    this._set(attr, val);
                    return this;
                }
            },
            each: function () {
                return can.each.apply(undefined, [this].concat(can.makeArray(arguments)));
            },
            removeAttr: function (attr) {
                var isList = can.List && this instanceof can.List, parts = can.Map.helpers.attrParts(attr), prop = parts.shift(), current = isList ? this[prop] : this._data[prop];
                if (parts.length && current) {
                    return current.removeAttr(parts);
                } else {
                    if (typeof attr === 'string' && !!~attr.indexOf('.')) {
                        prop = attr;
                    }
                    this._remove(prop, current);
                    return current;
                }
            },
            _remove: function (prop, current) {
                if (prop in this._data) {
                    delete this._data[prop];
                    if (!(prop in this.constructor.prototype)) {
                        delete this[prop];
                    }
                    this._triggerChange(prop, 'remove', undefined, current);
                }
            },
            _get: function (attr) {
                attr = '' + attr;
                var dotIndex = attr.indexOf('.');
                if (dotIndex >= 0) {
                    var value = this.__get(attr);
                    if (value !== undefined) {
                        return value;
                    }
                    var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                    can.__observe(this, first);
                    var current = this.__get(first);
                    return current && current._get ? current._get(second) : undefined;
                } else {
                    can.__observe(this, attr);
                    return this.__get(attr);
                }
            },
            __get: function (attr) {
                if (attr) {
                    if (this._computedBindings[attr]) {
                        return this[attr]();
                    } else {
                        return this._data[attr];
                    }
                } else {
                    return this._data;
                }
            },
            __type: function (value, prop) {
                if (!(value instanceof can.Map) && can.Map.helpers.canMakeObserve(value)) {
                    var cached = getMapFromObject(value);
                    if (cached) {
                        return cached;
                    }
                    if (can.isArray(value)) {
                        var List = can.List;
                        return new List(value);
                    } else {
                        var Map = this.constructor.Map || can.Map;
                        return new Map(value);
                    }
                }
                return value;
            },
            _set: function (attr, value, keepKey) {
                attr = '' + attr;
                var dotIndex = attr.indexOf('.'), current;
                if (!keepKey && dotIndex >= 0) {
                    var first = attr.substr(0, dotIndex), second = attr.substr(dotIndex + 1);
                    current = this._init ? undefined : this.__get(first);
                    if (Map.helpers.isObservable(current)) {
                        current._set(second, value);
                    } else {
                        throw new Error('can.Map: Object does not exist');
                    }
                } else {
                    if (this.__convert) {
                        value = this.__convert(attr, value);
                    }
                    current = this._init ? undefined : this.__get(attr);
                    this.__set(attr, this.__type(value, attr), current);
                }
            },
            __set: function (prop, value, current) {
                if (value !== current) {
                    var changeType = current !== undefined || this.__get().hasOwnProperty(prop) ? 'set' : 'add';
                    this.___set(prop, this.constructor._bubble.set(this, prop, value, current));
                    if (!this._computedBindings[prop]) {
                        this._triggerChange(prop, changeType, value, current);
                    }
                    if (current) {
                        this.constructor._bubble.teardownFromParent(this, current);
                    }
                }
            },
            ___set: function (prop, val) {
                if (this._computedBindings[prop]) {
                    this[prop](val);
                } else {
                    this._data[prop] = val;
                }
                if (typeof this.constructor.prototype[prop] !== 'function' && !this._computedBindings[prop]) {
                    this[prop] = val;
                }
            },
            bind: function (eventName, handler) {
                var computedBinding = this._computedBindings && this._computedBindings[eventName];
                if (computedBinding) {
                    if (!computedBinding.count) {
                        computedBinding.count = 1;
                        var self = this;
                        computedBinding.handler = function (ev, newVal, oldVal) {
                            can.batch.trigger(self, {
                                type: eventName,
                                batchNum: ev.batchNum,
                                target: self
                            }, [
                                newVal,
                                oldVal
                            ]);
                        };
                        this[eventName].bind('change', computedBinding.handler);
                    } else {
                        computedBinding.count++;
                    }
                }
                this.constructor._bubble.bind(this, eventName);
                return can.bindAndSetup.apply(this, arguments);
            },
            unbind: function (eventName, handler) {
                var computedBinding = this._computedBindings && this._computedBindings[eventName];
                if (computedBinding) {
                    if (computedBinding.count === 1) {
                        computedBinding.count = 0;
                        this[eventName].unbind('change', computedBinding.handler);
                        delete computedBinding.handler;
                    } else {
                        computedBinding.count--;
                    }
                }
                this.constructor._bubble.unbind(this, eventName);
                return can.unbindAndTeardown.apply(this, arguments);
            },
            serialize: function () {
                return can.Map.helpers.serialize(this, 'serialize', {});
            },
            _attrs: function (props, remove) {
                if (props === undefined) {
                    return Map.helpers.serialize(this, 'attr', {});
                }
                props = can.simpleExtend({}, props);
                var prop, self = this, newVal;
                can.batch.start();
                this.each(function (curVal, prop) {
                    if (prop === '_cid') {
                        return;
                    }
                    newVal = props[prop];
                    if (newVal === undefined) {
                        if (remove) {
                            self.removeAttr(prop);
                        }
                        return;
                    }
                    if (self.__convert) {
                        newVal = self.__convert(prop, newVal);
                    }
                    if (Map.helpers.isObservable(newVal)) {
                        self.__set(prop, self.__type(newVal, prop), curVal);
                    } else if (Map.helpers.isObservable(curVal) && Map.helpers.canMakeObserve(newVal)) {
                        curVal.attr(newVal, remove);
                    } else if (curVal !== newVal) {
                        self.__set(prop, self.__type(newVal, prop), curVal);
                    }
                    delete props[prop];
                });
                for (prop in props) {
                    if (prop !== '_cid') {
                        newVal = props[prop];
                        this._set(prop, newVal, true);
                    }
                }
                can.batch.stop();
                return this;
            },
            compute: function (prop) {
                if (can.isFunction(this.constructor.prototype[prop])) {
                    return can.compute(this[prop], this);
                } else {
                    var reads = prop.split('.'), last = reads.length - 1, options = { args: [] };
                    return can.compute(function (newVal) {
                        if (arguments.length) {
                            can.compute.read(this, reads.slice(0, last)).value.attr(reads[last], newVal);
                        } else {
                            return can.compute.read(this, reads, options).value;
                        }
                    }, this);
                }
            }
        });
    Map.prototype.on = Map.prototype.bind;
    Map.prototype.off = Map.prototype.unbind;
    return Map;
});
/*lib/can/list/list*/
define('lib/can/list/list', [
    'can/util/util',
    'can/map/map',
    'can/map/bubble'
], function (can, Map, bubble) {
    var splice = [].splice, spliceRemovesProps = function () {
            var obj = {
                    0: 'a',
                    length: 1
                };
            splice.call(obj, 0, 1);
            return !obj[0];
        }();
    var list = Map.extend({ Map: Map }, {
            setup: function (instances, options) {
                this.length = 0;
                can.cid(this, '.map');
                this._init = 1;
                this._computedBindings = {};
                this._setupComputes();
                instances = instances || [];
                var teardownMapping;
                if (can.isDeferred(instances)) {
                    this.replace(instances);
                } else {
                    teardownMapping = instances.length && can.Map.helpers.addToMap(instances, this);
                    this.push.apply(this, can.makeArray(instances || []));
                }
                if (teardownMapping) {
                    teardownMapping();
                }
                this.bind('change', can.proxy(this._changes, this));
                can.simpleExtend(this, options);
                delete this._init;
            },
            _triggerChange: function (attr, how, newVal, oldVal) {
                Map.prototype._triggerChange.apply(this, arguments);
                var index = +attr;
                if (!~('' + attr).indexOf('.') && !isNaN(index)) {
                    if (how === 'add') {
                        can.batch.trigger(this, how, [
                            newVal,
                            index
                        ]);
                        can.batch.trigger(this, 'length', [this.length]);
                    } else if (how === 'remove') {
                        can.batch.trigger(this, how, [
                            oldVal,
                            index
                        ]);
                        can.batch.trigger(this, 'length', [this.length]);
                    } else {
                        can.batch.trigger(this, how, [
                            newVal,
                            index
                        ]);
                    }
                }
            },
            __get: function (attr) {
                if (attr) {
                    if (this[attr] && this[attr].isComputed && can.isFunction(this.constructor.prototype[attr])) {
                        return this[attr]();
                    } else {
                        return this[attr];
                    }
                } else {
                    return this;
                }
            },
            __set: function (prop, value, current) {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number' && prop > this.length - 1) {
                    var newArr = new Array(prop + 1 - this.length);
                    newArr[newArr.length - 1] = value;
                    this.push.apply(this, newArr);
                    return newArr;
                }
                return can.Map.prototype.__set.call(this, '' + prop, value, current);
            },
            ___set: function (attr, val) {
                this[attr] = val;
                if (+attr >= this.length) {
                    this.length = +attr + 1;
                }
            },
            _remove: function (prop, current) {
                if (isNaN(+prop)) {
                    delete this[prop];
                    this._triggerChange(prop, 'remove', undefined, current);
                } else {
                    this.splice(prop, 1);
                }
            },
            _each: function (callback) {
                var data = this.__get();
                for (var i = 0; i < data.length; i++) {
                    callback(data[i], i);
                }
            },
            serialize: function () {
                return Map.helpers.serialize(this, 'serialize', []);
            },
            splice: function (index, howMany) {
                var args = can.makeArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2;
                index = index || 0;
                for (i = 0, len = args.length - 2; i < len; i++) {
                    listIndex = i + 2;
                    args[listIndex] = this.__type(args[listIndex], listIndex);
                    added.push(args[listIndex]);
                    if (this[i + index] !== args[listIndex]) {
                        allSame = false;
                    }
                }
                if (allSame && this.length <= added.length) {
                    return added;
                }
                if (howMany === undefined) {
                    howMany = args[1] = this.length - index;
                }
                var removed = splice.apply(this, args);
                if (!spliceRemovesProps) {
                    for (i = this.length; i < removed.length + this.length; i++) {
                        delete this[i];
                    }
                }
                can.batch.start();
                if (howMany > 0) {
                    bubble.removeMany(this, removed);
                    this._triggerChange('' + index, 'remove', undefined, removed);
                }
                if (args.length > 2) {
                    for (i = 0, len = added.length; i < len; i++) {
                        bubble.set(this, i, added[i]);
                    }
                    this._triggerChange('' + index, 'add', added, removed);
                }
                can.batch.stop();
                return removed;
            },
            _attrs: function (items, remove) {
                if (items === undefined) {
                    return Map.helpers.serialize(this, 'attr', []);
                }
                items = can.makeArray(items);
                can.batch.start();
                this._updateAttrs(items, remove);
                can.batch.stop();
            },
            _updateAttrs: function (items, remove) {
                var len = Math.min(items.length, this.length);
                for (var prop = 0; prop < len; prop++) {
                    var curVal = this[prop], newVal = items[prop];
                    if (Map.helpers.isObservable(curVal) && Map.helpers.canMakeObserve(newVal)) {
                        curVal.attr(newVal, remove);
                    } else if (curVal !== newVal) {
                        this._set(prop, newVal);
                    } else {
                    }
                }
                if (items.length > this.length) {
                    this.push.apply(this, items.slice(this.length));
                } else if (items.length < this.length && remove) {
                    this.splice(items.length);
                }
            }
        }), getArgs = function (args) {
            return args[0] && can.isArray(args[0]) ? args[0] : can.makeArray(args);
        };
    can.each({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        list.prototype[name] = function () {
            var args = [], len = where ? this.length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = bubble.set(this, i, this.__type(val, i));
            }
            res = orig.apply(this, args);
            if (!this.comparator || args.length) {
                this._triggerChange('' + len, 'add', args, undefined);
            }
            return res;
        };
    });
    can.each({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        list.prototype[name] = function () {
            if (!this.length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this.length ? this.length - 1 : 0;
            var res = [][name].apply(this, args);
            this._triggerChange('' + len, 'remove', undefined, [res]);
            if (res && res.unbind) {
                bubble.remove(this, res);
            }
            return res;
        };
    });
    can.extend(list.prototype, {
        indexOf: function (item, fromIndex) {
            this.attr('length');
            return can.inArray(item, this, fromIndex);
        },
        join: function () {
            return [].join.apply(this.attr(), arguments);
        },
        reverse: function () {
            var list = [].reverse.call(can.makeArray(this));
            this.replace(list);
        },
        slice: function () {
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [];
            can.each(can.makeArray(arguments), function (arg, i) {
                args[i] = arg instanceof can.List ? arg.serialize() : arg;
            });
            return new this.constructor(Array.prototype.concat.apply(this.serialize(), args));
        },
        forEach: function (cb, thisarg) {
            return can.each(this, cb, thisarg || this);
        },
        replace: function (newList) {
            if (can.isDeferred(newList)) {
                newList.then(can.proxy(this.replace, this));
            } else {
                this.splice.apply(this, [
                    0,
                    this.length
                ].concat(can.makeArray(newList || [])));
            }
            return this;
        },
        filter: function (callback, thisArg) {
            var filteredList = new can.List(), self = this, filtered;
            this.each(function (item, index, list) {
                filtered = callback.call(thisArg | self, item, index, self);
                if (filtered) {
                    filteredList.push(item);
                }
            });
            return filteredList;
        }
    });
    can.List = Map.List = list;
    return can.List;
});
/*lib/can/util/string/deparam/deparam*/
define('lib/can/util/string/deparam/deparam', [
    'can/util/util',
    'can/util/string/string'
], function (can) {
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, prep = function (str) {
            return decodeURIComponent(str.replace(/\+/g, ' '));
        };
    can.extend(can, {
        deparam: function (params) {
            var data = {}, pairs, lastPart;
            if (params && paramTest.test(params)) {
                pairs = params.split('&');
                can.each(pairs, function (pair) {
                    var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                    if (key) {
                        parts = key.match(keyBreaker);
                        for (var j = 0, l = parts.length - 1; j < l; j++) {
                            if (!current[parts[j]]) {
                                current[parts[j]] = digitTest.test(parts[j + 1]) || parts[j + 1] === '[]' ? [] : {};
                            }
                            current = current[parts[j]];
                        }
                        lastPart = parts.pop();
                        if (lastPart === '[]') {
                            current.push(value);
                        } else {
                            current[lastPart] = value;
                        }
                    }
                });
            }
            return data;
        }
    });
    return can;
});
/*lib/can/route/route*/
define('lib/can/route/route', [
    'can/util/util',
    'can/map/map',
    'can/list/list',
    'can/util/string/deparam/deparam'
], function (can) {
    var matcher = /\:([\w\.]+)/g, paramsMatcher = /^(?:&[^=]+=[^&]*)+/, makeProps = function (props) {
            var tags = [];
            can.each(props, function (val, name) {
                tags.push((name === 'className' ? 'class' : name) + '="' + (name === 'href' ? val : can.esc(val)) + '"');
            });
            return tags.join(' ');
        }, matchesData = function (route, data) {
            var count = 0, i = 0, defaults = {};
            for (var name in route.defaults) {
                if (route.defaults[name] === data[name]) {
                    defaults[name] = 1;
                    count++;
                }
            }
            for (; i < route.names.length; i++) {
                if (!data.hasOwnProperty(route.names[i])) {
                    return -1;
                }
                if (!defaults[route.names[i]]) {
                    count++;
                }
            }
            return count;
        }, location = window.location, wrapQuote = function (str) {
            return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
        }, each = can.each, extend = can.extend, stringify = function (obj) {
            if (obj && typeof obj === 'object') {
                if (obj instanceof can.Map) {
                    obj = obj.attr();
                } else {
                    obj = can.isFunction(obj.slice) ? obj.slice() : can.extend({}, obj);
                }
                can.each(obj, function (val, prop) {
                    obj[prop] = stringify(val);
                });
            } else if (obj !== undefined && obj !== null && can.isFunction(obj.toString)) {
                obj = obj.toString();
            }
            return obj;
        }, removeBackslash = function (str) {
            return str.replace(/\\/g, '');
        }, timer, curParams, lastHash, changingData, changedAttrs = [], onRouteDataChange = function (ev, attr, how, newval) {
            changingData = 1;
            changedAttrs.push(attr);
            clearTimeout(timer);
            timer = setTimeout(function () {
                changingData = 0;
                var serialized = can.route.data.serialize(), path = can.route.param(serialized, true);
                can.route._call('setURL', path, changedAttrs);
                can.batch.trigger(eventsObject, '__url', [
                    path,
                    lastHash
                ]);
                lastHash = path;
                changedAttrs = [];
            }, 10);
        }, eventsObject = can.extend({}, can.event);
    can.route = function (url, defaults) {
        var root = can.route._call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        defaults = defaults || {};
        var names = [], res, test = '', lastIndex = matcher.lastIndex = 0, next, querySeparator = can.route._call('querySeparator'), matchSlashes = can.route._call('matchSlashes');
        while (res = matcher.exec(url)) {
            names.push(res[1]);
            test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
            next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
            test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
            lastIndex = matcher.lastIndex;
        }
        test += url.substr(lastIndex).replace('\\', '');
        can.route.routes[url] = {
            test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
            route: url,
            names: names,
            defaults: defaults,
            length: url.split('/').length
        };
        return can.route;
    };
    extend(can.route, {
        param: function (data, _setRoute) {
            var route, matches = 0, matchCount, routeName = data.route, propCount = 0;
            delete data.route;
            each(data, function () {
                propCount++;
            });
            each(can.route.routes, function (temp, name) {
                matchCount = matchesData(temp, data);
                if (matchCount > matches) {
                    route = temp;
                    matches = matchCount;
                }
                if (matchCount >= propCount) {
                    return false;
                }
            });
            if (can.route.routes[routeName] && matchesData(can.route.routes[routeName], data) === matches) {
                route = can.route.routes[routeName];
            }
            if (route) {
                var cpy = extend({}, data), res = route.route.replace(matcher, function (whole, name) {
                        delete cpy[name];
                        return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
                    }).replace('\\', ''), after;
                each(route.defaults, function (val, name) {
                    if (cpy[name] === val) {
                        delete cpy[name];
                    }
                });
                after = can.param(cpy);
                if (_setRoute) {
                    can.route.attr('route', route.route);
                }
                return res + (after ? can.route._call('querySeparator') + after : '');
            }
            return can.isEmptyObject(data) ? '' : can.route._call('querySeparator') + can.param(data);
        },
        deparam: function (url) {
            var root = can.route._call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            var route = { length: -1 }, querySeparator = can.route._call('querySeparator'), paramsMatcher = can.route._call('paramsMatcher');
            each(can.route.routes, function (temp, name) {
                if (temp.test.test(url) && temp.length > route.length) {
                    route = temp;
                }
            });
            if (route.length > -1) {
                var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? can.deparam(remainder.slice(1)) : {};
                obj = extend(true, {}, route.defaults, obj);
                each(parts, function (part, i) {
                    if (part && part !== querySeparator) {
                        obj[route.names[i]] = decodeURIComponent(part);
                    }
                });
                obj.route = route.route;
                return obj;
            }
            if (url.charAt(0) !== querySeparator) {
                url = querySeparator + url;
            }
            return paramsMatcher.test(url) ? can.deparam(url.slice(1)) : {};
        },
        data: new can.Map({}),
        map: function (data) {
            var appState;
            if (data.prototype instanceof can.Map) {
                appState = new data();
            } else {
                appState = data;
            }
            can.route.data = appState;
        },
        routes: {},
        ready: function (val) {
            if (val !== true) {
                can.route._setup();
                can.route.setState();
            }
            return can.route;
        },
        url: function (options, merge) {
            if (merge) {
                options = can.extend({}, can.route.deparam(can.route._call('matchingPartOfURL')), options);
            }
            return can.route._call('root') + can.route.param(options);
        },
        link: function (name, options, props, merge) {
            return '<a ' + makeProps(extend({ href: can.route.url(options, merge) }, props)) + '>' + name + '</a>';
        },
        current: function (options) {
            can.__observe(eventsObject, '__url');
            return this._call('matchingPartOfURL') === can.route.param(options);
        },
        bindings: {
            hashchange: {
                paramsMatcher: paramsMatcher,
                querySeparator: '&',
                matchSlashes: false,
                bind: function () {
                    can.bind.call(window, 'hashchange', setState);
                },
                unbind: function () {
                    can.unbind.call(window, 'hashchange', setState);
                },
                matchingPartOfURL: function () {
                    return location.href.split(/#!?/)[1] || '';
                },
                setURL: function (path) {
                    if (location.hash !== '#' + path) {
                        location.hash = '!' + path;
                    }
                    return path;
                },
                root: '#!'
            }
        },
        defaultBinding: 'hashchange',
        currentBinding: null,
        _setup: function () {
            if (!can.route.currentBinding) {
                can.route._call('bind');
                can.route.bind('change', onRouteDataChange);
                can.route.currentBinding = can.route.defaultBinding;
            }
        },
        _teardown: function () {
            if (can.route.currentBinding) {
                can.route._call('unbind');
                can.route.unbind('change', onRouteDataChange);
                can.route.currentBinding = null;
            }
            clearTimeout(timer);
            changingData = 0;
        },
        _call: function () {
            var args = can.makeArray(arguments), prop = args.shift(), binding = can.route.bindings[can.route.currentBinding || can.route.defaultBinding], method = binding[prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        }
    });
    each([
        'bind',
        'unbind',
        'on',
        'off',
        'delegate',
        'undelegate',
        'removeAttr',
        'compute',
        '_get',
        '__get',
        'each'
    ], function (name) {
        can.route[name] = function () {
            if (!can.route.data[name]) {
                return;
            }
            return can.route.data[name].apply(can.route.data, arguments);
        };
    });
    can.route.attr = function (attr, val) {
        var type = typeof attr, newArguments;
        if (val === undefined) {
            newArguments = arguments;
        } else if (type !== 'string' && type !== 'number') {
            newArguments = [
                stringify(attr),
                val
            ];
        } else {
            newArguments = [
                attr,
                stringify(val)
            ];
        }
        return can.route.data.attr.apply(can.route.data, newArguments);
    };
    var setState = can.route.setState = function () {
            var hash = can.route._call('matchingPartOfURL');
            var oldParams = curParams;
            curParams = can.route.deparam(hash);
            if (!changingData || hash !== lastHash) {
                can.batch.start();
                recursiveClean(oldParams, curParams, can.route.data);
                can.route.attr(curParams);
                can.batch.trigger(eventsObject, '__url', [
                    hash,
                    lastHash
                ]);
                can.batch.stop();
            }
        };
    var recursiveClean = function (old, cur, data) {
        for (var attr in old) {
            if (cur[attr] === undefined) {
                data.removeAttr(attr);
            } else if (Object.prototype.toString.call(old[attr]) === '[object Object]') {
                recursiveClean(old[attr], cur[attr], data.attr(attr));
            }
        }
    };
    return can.route;
});
/*lib/can/control/control*/
define('lib/can/control/control', [
    'can/util/util',
    'can/construct/construct'
], function (can) {
    var bind = function (el, ev, callback) {
            can.bind.call(el, ev, callback);
            return function () {
                can.unbind.call(el, ev, callback);
            };
        }, isFunction = can.isFunction, extend = can.extend, each = can.each, slice = [].slice, paramReplacer = /\{([^\}]+)\}/g, special = can.getObject('$.event.special', [can]) || {}, delegate = function (el, selector, ev, callback) {
            can.delegate.call(el, selector, ev, callback);
            return function () {
                can.undelegate.call(el, selector, ev, callback);
            };
        }, binder = function (el, ev, callback, selector) {
            return selector ? delegate(el, can.trim(selector), ev, callback) : bind(el, ev, callback);
        }, basicProcessor;
    var Control = can.Control = can.Construct({
            setup: function () {
                can.Construct.setup.apply(this, arguments);
                if (can.Control) {
                    var control = this, funcName;
                    control.actions = {};
                    for (funcName in control.prototype) {
                        if (control._isAction(funcName)) {
                            control.actions[funcName] = control._action(funcName);
                        }
                    }
                }
            },
            _shifter: function (context, name) {
                var method = typeof name === 'string' ? context[name] : name;
                if (!isFunction(method)) {
                    method = context[method];
                }
                return function () {
                    context.called = name;
                    return method.apply(context, [this.nodeName ? can.$(this) : this].concat(slice.call(arguments, 0)));
                };
            },
            _isAction: function (methodName) {
                var val = this.prototype[methodName], type = typeof val;
                return methodName !== 'constructor' && (type === 'function' || type === 'string' && isFunction(this.prototype[val])) && !!(special[methodName] || processors[methodName] || /[^\w]/.test(methodName));
            },
            _action: function (methodName, options) {
                paramReplacer.lastIndex = 0;
                if (options || !paramReplacer.test(methodName)) {
                    var convertedName = options ? can.sub(methodName, this._lookup(options)) : methodName;
                    if (!convertedName) {
                        return null;
                    }
                    var arr = can.isArray(convertedName), name = arr ? convertedName[1] : convertedName, parts = name.split(/\s+/g), event = parts.pop();
                    return {
                        processor: processors[event] || basicProcessor,
                        parts: [
                            name,
                            parts.join(' '),
                            event
                        ],
                        delegate: arr ? convertedName[0] : undefined
                    };
                }
            },
            _lookup: function (options) {
                return [
                    options,
                    window
                ];
            },
            processors: {},
            defaults: {}
        }, {
            setup: function (element, options) {
                var cls = this.constructor, pluginname = cls.pluginName || cls._fullName, arr;
                this.element = can.$(element);
                if (pluginname && pluginname !== 'can_control') {
                    this.element.addClass(pluginname);
                }
                arr = can.data(this.element, 'controls');
                if (!arr) {
                    arr = [];
                    can.data(this.element, 'controls', arr);
                }
                arr.push(this);
                this.options = extend({}, cls.defaults, options);
                this.on();
                return [
                    this.element,
                    this.options
                ];
            },
            on: function (el, selector, eventName, func) {
                if (!el) {
                    this.off();
                    var cls = this.constructor, bindings = this._bindings, actions = cls.actions, element = this.element, destroyCB = can.Control._shifter(this, 'destroy'), funcName, ready;
                    for (funcName in actions) {
                        if (actions.hasOwnProperty(funcName)) {
                            ready = actions[funcName] || cls._action(funcName, this.options, this);
                            if (ready) {
                                bindings.control[funcName] = ready.processor(ready.delegate || element, ready.parts[2], ready.parts[1], funcName, this);
                            }
                        }
                    }
                    can.bind.call(element, 'removed', destroyCB);
                    bindings.user.push(function (el) {
                        can.unbind.call(el, 'removed', destroyCB);
                    });
                    return bindings.user.length;
                }
                if (typeof el === 'string') {
                    func = eventName;
                    eventName = selector;
                    selector = el;
                    el = this.element;
                }
                if (func === undefined) {
                    func = eventName;
                    eventName = selector;
                    selector = null;
                }
                if (typeof func === 'string') {
                    func = can.Control._shifter(this, func);
                }
                this._bindings.user.push(binder(el, eventName, func, selector));
                return this._bindings.user.length;
            },
            off: function () {
                var el = this.element[0], bindings = this._bindings;
                if (bindings) {
                    each(bindings.user || [], function (value) {
                        value(el);
                    });
                    each(bindings.control || {}, function (value) {
                        value(el);
                    });
                }
                this._bindings = {
                    user: [],
                    control: {}
                };
            },
            destroy: function () {
                if (this.element === null) {
                    return;
                }
                var Class = this.constructor, pluginName = Class.pluginName || Class._fullName, controls;
                this.off();
                if (pluginName && pluginName !== 'can_control') {
                    this.element.removeClass(pluginName);
                }
                controls = can.data(this.element, 'controls');
                controls.splice(can.inArray(this, controls), 1);
                can.trigger(this, 'destroyed');
                this.element = null;
            }
        });
    var processors = can.Control.processors;
    basicProcessor = function (el, event, selector, methodName, control) {
        return binder(el, event, can.Control._shifter(control, methodName), selector);
    };
    each([
        'change',
        'click',
        'contextmenu',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'reset',
        'resize',
        'scroll',
        'select',
        'submit',
        'focusin',
        'focusout',
        'mouseenter',
        'mouseleave',
        'touchstart',
        'touchmove',
        'touchcancel',
        'touchend',
        'touchleave',
        'inserted',
        'removed'
    ], function (v) {
        processors[v] = basicProcessor;
    });
    return Control;
});
/*lib/can/control/route/route*/
define('lib/can/control/route/route', [
    'can/util/util',
    'can/route/route',
    'can/control/control'
], function (can) {
    can.Control.processors.route = function (el, event, selector, funcName, controller) {
        selector = selector || '';
        if (!can.route.routes[selector]) {
            if (selector[0] === '/') {
                selector = selector.substring(1);
            }
            can.route(selector);
        }
        var batchNum, check = function (ev, attr, how) {
                if (can.route.attr('route') === selector && (ev.batchNum === undefined || ev.batchNum !== batchNum)) {
                    batchNum = ev.batchNum;
                    var d = can.route.attr();
                    delete d.route;
                    if (can.isFunction(controller[funcName])) {
                        controller[funcName](d);
                    } else {
                        controller[controller[funcName]](d);
                    }
                }
            };
        can.route.bind('change', check);
        return function () {
            can.route.unbind('change', check);
        };
    };
    return can;
});
/*lib/can/model/model*/
define('lib/can/model/model', [
    'can/util/util',
    'can/map/map',
    'can/list/list'
], function (can) {
    var pipe = function (def, thisArg, func) {
            var d = new can.Deferred();
            def.then(function () {
                var args = can.makeArray(arguments), success = true;
                try {
                    args[0] = func.apply(thisArg, args);
                } catch (e) {
                    success = false;
                    d.rejectWith(d, [e].concat(args));
                }
                if (success) {
                    d.resolveWith(d, args);
                }
            }, function () {
                d.rejectWith(this, arguments);
            });
            if (typeof def.abort === 'function') {
                d.abort = function () {
                    return def.abort();
                };
            }
            return d;
        }, modelNum = 0, getId = function (inst) {
            can.__observe(inst, inst.constructor.id);
            return inst.__get(inst.constructor.id);
        }, ajax = function (ajaxOb, data, type, dataType, success, error) {
            var params = {};
            if (typeof ajaxOb === 'string') {
                var parts = ajaxOb.split(/\s+/);
                params.url = parts.pop();
                if (parts.length) {
                    params.type = parts.pop();
                }
            } else {
                can.extend(params, ajaxOb);
            }
            params.data = typeof data === 'object' && !can.isArray(data) ? can.extend(params.data || {}, data) : data;
            params.url = can.sub(params.url, params.data, true);
            return can.ajax(can.extend({
                type: type || 'post',
                dataType: dataType || 'json',
                success: success,
                error: error
            }, params));
        }, makeRequest = function (modelObj, type, success, error, method) {
            var args;
            if (can.isArray(modelObj)) {
                args = modelObj[1];
                modelObj = modelObj[0];
            } else {
                args = modelObj.serialize();
            }
            args = [args];
            var deferred, model = modelObj.constructor, jqXHR;
            if (type === 'update' || type === 'destroy') {
                args.unshift(getId(modelObj));
            }
            jqXHR = model[type].apply(model, args);
            deferred = pipe(jqXHR, modelObj, function (data) {
                modelObj[method || type + 'd'](data, jqXHR);
                return modelObj;
            });
            if (jqXHR.abort) {
                deferred.abort = function () {
                    jqXHR.abort();
                };
            }
            deferred.then(success, error);
            return deferred;
        }, converters = {
            models: function (instancesRawData, oldList, xhr) {
                can.Model._reqs++;
                if (!instancesRawData) {
                    return;
                }
                if (instancesRawData instanceof this.List) {
                    return instancesRawData;
                }
                var self = this, tmp = [], ListClass = self.List || ML, modelList = oldList instanceof can.List ? oldList : new ListClass(), rawDataIsList = instancesRawData instanceof ML, raw = rawDataIsList ? instancesRawData.serialize() : instancesRawData;
                raw = self.parseModels(raw, xhr);
                if (raw.data) {
                    instancesRawData = raw;
                    raw = raw.data;
                }
                if (typeof raw === 'undefined' || !can.isArray(raw)) {
                    throw new Error('Could not get any raw data while converting using .models');
                }
                if (modelList.length) {
                    modelList.splice(0);
                }
                can.each(raw, function (rawPart) {
                    tmp.push(self.model(rawPart, xhr));
                });
                modelList.push.apply(modelList, tmp);
                if (!can.isArray(instancesRawData)) {
                    can.each(instancesRawData, function (val, prop) {
                        if (prop !== 'data') {
                            modelList.attr(prop, val);
                        }
                    });
                }
                setTimeout(can.proxy(this._clean, this), 1);
                return modelList;
            },
            model: function (attributes, oldModel, xhr) {
                if (!attributes) {
                    return;
                }
                if (typeof attributes.serialize === 'function') {
                    attributes = attributes.serialize();
                } else {
                    attributes = this.parseModel(attributes, xhr);
                }
                var id = attributes[this.id];
                if ((id || id === 0) && this.store[id]) {
                    oldModel = this.store[id];
                }
                var model = oldModel && can.isFunction(oldModel.attr) ? oldModel.attr(attributes, this.removeAttr || false) : new this(attributes);
                return model;
            }
        }, makeParser = {
            parseModel: function (prop) {
                return function (attributes) {
                    return prop ? can.getObject(prop, attributes) : attributes;
                };
            },
            parseModels: function (prop) {
                return function (attributes) {
                    if (can.isArray(attributes)) {
                        return attributes;
                    }
                    prop = prop || 'data';
                    var result = can.getObject(prop, attributes);
                    if (!can.isArray(result)) {
                        throw new Error('Could not get any raw data while converting using .models');
                    }
                    return result;
                };
            }
        }, ajaxMethods = {
            create: {
                url: '_shortName',
                type: 'post'
            },
            update: {
                data: function (id, attrs) {
                    attrs = attrs || {};
                    var identity = this.id;
                    if (attrs[identity] && attrs[identity] !== id) {
                        attrs['new' + can.capitalize(id)] = attrs[identity];
                        delete attrs[identity];
                    }
                    attrs[identity] = id;
                    return attrs;
                },
                type: 'put'
            },
            destroy: {
                type: 'delete',
                data: function (id, attrs) {
                    attrs = attrs || {};
                    attrs.id = attrs[this.id] = id;
                    return attrs;
                }
            },
            findAll: { url: '_shortName' },
            findOne: {}
        }, ajaxMaker = function (ajaxMethod, str) {
            return function (data) {
                data = ajaxMethod.data ? ajaxMethod.data.apply(this, arguments) : data;
                return ajax(str || this[ajaxMethod.url || '_url'], data, ajaxMethod.type || 'get');
            };
        }, createURLFromResource = function (model, name) {
            if (!model.resource) {
                return;
            }
            var resource = model.resource.replace(/\/+$/, '');
            if (name === 'findAll' || name === 'create') {
                return resource;
            } else {
                return resource + '/{' + model.id + '}';
            }
        };
    can.Model = can.Map.extend({
        fullName: 'can.Model',
        _reqs: 0,
        setup: function (base, fullName, staticProps, protoProps) {
            if (typeof fullName !== 'string') {
                protoProps = staticProps;
                staticProps = fullName;
            }
            if (!protoProps) {
                protoProps = staticProps;
            }
            this.store = {};
            can.Map.setup.apply(this, arguments);
            if (!can.Model) {
                return;
            }
            if (staticProps && staticProps.List) {
                this.List = staticProps.List;
                this.List.Map = this;
            } else {
                this.List = base.List.extend({ Map: this }, {});
            }
            var self = this, clean = can.proxy(this._clean, self);
            can.each(ajaxMethods, function (method, name) {
                if (staticProps && staticProps[name] && (typeof staticProps[name] === 'string' || typeof staticProps[name] === 'object')) {
                    self[name] = ajaxMaker(method, staticProps[name]);
                } else if (staticProps && staticProps.resource && !can.isFunction(staticProps[name])) {
                    self[name] = ajaxMaker(method, createURLFromResource(self, name));
                }
                if (self['make' + can.capitalize(name)]) {
                    var newMethod = self['make' + can.capitalize(name)](self[name]);
                    can.Construct._overwrite(self, base, name, function () {
                        can.Model._reqs++;
                        var def = newMethod.apply(this, arguments);
                        var then = def.then(clean, clean);
                        then.abort = def.abort;
                        return then;
                    });
                }
            });
            var hasCustomConverter = {};
            can.each(converters, function (converter, name) {
                var parseName = 'parse' + can.capitalize(name), dataProperty = staticProps && staticProps[name] || self[name];
                if (typeof dataProperty === 'string') {
                    self[parseName] = dataProperty;
                    can.Construct._overwrite(self, base, name, converter);
                } else if (staticProps && staticProps[name]) {
                    hasCustomConverter[parseName] = true;
                }
            });
            can.each(makeParser, function (maker, parseName) {
                var prop = staticProps && staticProps[parseName] || self[parseName];
                if (typeof prop === 'string') {
                    can.Construct._overwrite(self, base, parseName, maker(prop));
                } else if ((!staticProps || !can.isFunction(staticProps[parseName])) && !self[parseName]) {
                    var madeParser = maker();
                    madeParser.useModelConverter = hasCustomConverter[parseName];
                    can.Construct._overwrite(self, base, parseName, madeParser);
                }
            });
            if (self.fullName === 'can.Model' || !self.fullName) {
                self.fullName = 'Model' + ++modelNum;
            }
            can.Model._reqs = 0;
            this._url = this._shortName + '/{' + this.id + '}';
        },
        _ajax: ajaxMaker,
        _makeRequest: makeRequest,
        _clean: function () {
            can.Model._reqs--;
            if (!can.Model._reqs) {
                for (var id in this.store) {
                    if (!this.store[id]._bindings) {
                        delete this.store[id];
                    }
                }
            }
            return arguments[0];
        },
        models: converters.models,
        model: converters.model
    }, {
        setup: function (attrs) {
            var id = attrs && attrs[this.constructor.id];
            if (can.Model._reqs && id != null) {
                this.constructor.store[id] = this;
            }
            can.Map.prototype.setup.apply(this, arguments);
        },
        isNew: function () {
            var id = getId(this);
            return !(id || id === 0);
        },
        save: function (success, error) {
            return makeRequest(this, this.isNew() ? 'create' : 'update', success, error);
        },
        destroy: function (success, error) {
            if (this.isNew()) {
                var self = this;
                var def = can.Deferred();
                def.then(success, error);
                return def.done(function (data) {
                    self.destroyed(data);
                }).resolve(self);
            }
            return makeRequest(this, 'destroy', success, error, 'destroyed');
        },
        _bindsetup: function () {
            var modelInstance = this.__get(this.constructor.id);
            if (modelInstance != null) {
                this.constructor.store[modelInstance] = this;
            }
            return can.Map.prototype._bindsetup.apply(this, arguments);
        },
        _bindteardown: function () {
            delete this.constructor.store[getId(this)];
            return can.Map.prototype._bindteardown.apply(this, arguments);
        },
        ___set: function (prop, val) {
            can.Map.prototype.___set.call(this, prop, val);
            if (prop === this.constructor.id && this._bindings) {
                this.constructor.store[getId(this)] = this;
            }
        }
    });
    var makeGetterHandler = function (name) {
            return function (data, readyState, xhr) {
                return this[name](data, null, xhr);
            };
        }, createUpdateDestroyHandler = function (data) {
            if (this.parseModel.useModelConverter) {
                return this.model(data);
            }
            return this.parseModel(data);
        };
    var responseHandlers = {
            makeFindAll: makeGetterHandler('models'),
            makeFindOne: makeGetterHandler('model'),
            makeCreate: createUpdateDestroyHandler,
            makeUpdate: createUpdateDestroyHandler,
            makeDestroy: createUpdateDestroyHandler
        };
    can.each(responseHandlers, function (method, name) {
        can.Model[name] = function (oldMethod) {
            return function () {
                var args = can.makeArray(arguments), oldArgs = can.isFunction(args[1]) ? args.splice(0, 1) : args.splice(0, 2), def = pipe(oldMethod.apply(this, oldArgs), this, method);
                def.then(args[0], args[1]);
                return def;
            };
        };
    });
    can.each([
        'created',
        'updated',
        'destroyed'
    ], function (funcName) {
        can.Model.prototype[funcName] = function (attrs) {
            var self = this, constructor = self.constructor;
            if (attrs && typeof attrs === 'object') {
                this.attr(can.isFunction(attrs.attr) ? attrs.attr() : attrs);
            }
            can.dispatch.call(this, {
                type: 'change',
                target: this
            }, [funcName]);
            can.dispatch.call(constructor, funcName, [this]);
        };
    });
    var ML = can.Model.List = can.List.extend({
            _bubbleRule: function (eventName, list) {
                var bubbleRules = can.List._bubbleRule(eventName, list);
                bubbleRules.push('destroyed');
                return bubbleRules;
            }
        }, {
            setup: function (params) {
                if (can.isPlainObject(params) && !can.isArray(params)) {
                    can.List.prototype.setup.apply(this);
                    this.replace(can.isDeferred(params) ? params : this.constructor.Map.findAll(params));
                } else {
                    can.List.prototype.setup.apply(this, arguments);
                }
                this._init = 1;
                this.bind('destroyed', can.proxy(this._destroyed, this));
                delete this._init;
            },
            _destroyed: function (ev, attr) {
                if (/\w+/.test(attr)) {
                    var index;
                    while ((index = this.indexOf(ev.target)) > -1) {
                        this.splice(index, 1);
                    }
                }
            }
        });
    return can.Model;
});
/*lib/can/compute/read*/
define('lib/can/compute/read', ['can/util/util'], function (can) {
    var read = function (parent, reads, options) {
        options = options || {};
        var state = { foundObservable: false };
        var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0;
        while (i < readLength) {
            prev = cur;
            for (var r = 0, readersLength = read.propertyReaders.length; r < readersLength; r++) {
                var reader = read.propertyReaders[r];
                if (reader.test(cur)) {
                    cur = reader.read(cur, reads[i], i, options, state);
                    break;
                }
            }
            i = i + 1;
            cur = readValue(cur, i, reads, options, state, prev);
            type = typeof cur;
            if (i < reads.length && (cur === null || type !== 'function' && type !== 'object')) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1, cur);
                }
                return {
                    value: undefined,
                    parent: prev
                };
            }
        }
        if (cur === undefined) {
            if (options.earlyExit) {
                options.earlyExit(prev, i - 1);
            }
        }
        return {
            value: cur,
            parent: prev
        };
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = read.valueReaders.length; i < len; i++) {
                if (read.valueReaders[i].test(value, index, reads, options)) {
                    value = read.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    read.valueReaders = [
        {
            name: 'compute',
            test: function (value, i, reads, options) {
                return value && value.isComputed;
            },
            read: function (value, i, reads, options, state) {
                if (options.isArgument && i === reads.length) {
                    return value;
                }
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, i);
                    state.foundObservable = true;
                }
                return value instanceof can.Compute ? value.get() : value();
            }
        },
        {
            name: 'function',
            test: function (value, i, reads, options) {
                var type = typeof value;
                return type === 'function' && !value.isComputed && (options.executeAnonymousFunctions !== false || options.isArgument && i === reads.length) && !(can.Construct && value.prototype instanceof can.Construct) && !(can.route && value === can.route);
            },
            read: function (value, i, reads, options, state, prev) {
                if (options.isArgument && i === reads.length) {
                    return options.proxyMethods !== false ? can.proxy(value, prev) : value;
                }
                return value.call(prev);
            }
        }
    ];
    read.propertyReaders = [
        {
            name: 'map',
            test: can.isMapLike,
            read: function (value, prop, index, options, state) {
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, index);
                    state.foundObservable = true;
                }
                if (typeof value[prop] === 'function' && value.constructor.prototype[prop] === value[prop]) {
                    if (options.returnObserveMethods) {
                        return value[prop];
                    } else if (prop === 'constructor' && value instanceof can.Construct || value[prop].prototype instanceof can.Construct) {
                        return value[prop];
                    } else {
                        return value[prop].apply(value, options.args || []);
                    }
                } else {
                    return value.attr(prop);
                }
            }
        },
        {
            name: 'promise',
            test: function (value) {
                return can.isPromise(value);
            },
            read: function (value, prop, index, options, state) {
                if (!state.foundObservable && options.foundObservable) {
                    options.foundObservable(value, index);
                    state.foundObservable = true;
                }
                var observeData = value.__observeData;
                if (!value.__observeData) {
                    observeData = value.__observeData = {
                        isPending: true,
                        state: 'pending',
                        isResolved: false,
                        isRejected: false,
                        value: undefined,
                        reason: undefined
                    };
                    can.cid(observeData);
                    can.simpleExtend(observeData, can.event);
                    value.then(function (value) {
                        observeData.isPending = false;
                        observeData.isResolved = true;
                        observeData.value = value;
                        observeData.state = 'resolved';
                        observeData.dispatch('state', [
                            'resolved',
                            'pending'
                        ]);
                    }, function (reason) {
                        observeData.isPending = false;
                        observeData.isRejected = true;
                        observeData.reason = reason;
                        observeData.state = 'rejected';
                        observeData.dispatch('state', [
                            'rejected',
                            'pending'
                        ]);
                    });
                }
                can.__observe(observeData, 'state');
                return prop in observeData ? observeData[prop] : value[prop];
            }
        },
        {
            name: 'object',
            test: function () {
                return true;
            },
            read: function (value, prop) {
                if (value == null) {
                    return undefined;
                } else {
                    return value[prop];
                }
            }
        }
    ];
    read.write = function (parent, key, value, options) {
        options = options || {};
        if (can.isMapLike(parent)) {
            if (!options.isArgument && parent._data && parent._data[key] && parent._data[key].isComputed) {
                return parent._data[key](value);
            } else {
                return parent.attr(key, value);
            }
        }
        if (parent[key] && parent[key].isComputed) {
            return parent[key](value);
        }
        if (typeof parent === 'object') {
            parent[key] = value;
        }
    };
    return read;
});
/*lib/can/compute/get_value_and_bind*/
define('lib/can/compute/get_value_and_bind', ['can/util/util'], function (can) {
    function observe(func, context, oldInfo, onchanged) {
        var info = getValueAndObserved(func, context), newObserveSet = info.observed, oldObserved = oldInfo.observed;
        if (info.names !== oldInfo.names) {
            bindNewSet(oldObserved, newObserveSet, onchanged);
            unbindOldSet(oldObserved, onchanged);
        }
        can.batch.afterPreviousEvents(function () {
            info.ready = true;
        });
        return info;
    }
    var observedStack = [];
    can.__isRecordingObserves = function () {
        return observedStack.length;
    };
    can.__observe = can.__reading = function (obj, event) {
        if (observedStack.length) {
            var name = obj._cid + '|' + event, top = observedStack[observedStack.length - 1];
            top.names += name;
            top.observed[name] = {
                obj: obj,
                event: event + ''
            };
        }
    };
    can.__notObserve = function (fn) {
        return function () {
            var previousReads = can.__clearObserved();
            var res = fn.apply(this, arguments);
            can.__setObserved(previousReads);
            return res;
        };
    };
    can.__clearObserved = can.__clearReading = function () {
        if (observedStack.length) {
            var ret = observedStack[observedStack.length - 1];
            observedStack[observedStack.length - 1] = {
                names: '',
                observed: {}
            };
            return ret;
        }
    };
    can.__setObserved = can.__setReading = function (o) {
        if (observedStack.length) {
            observedStack[observedStack.length - 1] = o;
        }
    };
    can.__addObserved = can.__addReading = function (o) {
        if (observedStack.length) {
            var last = observedStack[observedStack.length - 1];
            can.simpleExtend(last.observed, o.observed);
            last.names += o.names;
        }
    };
    var getValueAndObserved = function (func, self) {
        observedStack.push({
            names: '',
            observed: {}
        });
        var value = func.call(self);
        var stackItem = observedStack.pop();
        stackItem.value = value;
        return stackItem;
    };
    var bindNewSet = function (oldObserved, newObserveSet, onchanged) {
        for (var name in newObserveSet) {
            bindOrPreventUnbinding(oldObserved, newObserveSet, name, onchanged);
        }
    };
    var bindOrPreventUnbinding = function (oldObserved, newObserveSet, name, onchanged) {
        if (oldObserved[name]) {
            delete oldObserved[name];
        } else {
            var obEv = newObserveSet[name];
            obEv.obj.bind(obEv.event, onchanged);
        }
    };
    var unbindOldSet = function (oldObserved, onchanged) {
        for (var name in oldObserved) {
            var obEv = oldObserved[name];
            obEv.obj.unbind(obEv.event, onchanged);
        }
    };
    return observe;
});
/*lib/can/compute/proto_compute*/
define('lib/can/compute/proto_compute', [
    'can/util/util',
    'can/util/bind/bind',
    'can/compute/read',
    'can/compute/get_value_and_bind',
    'can/util/batch/batch'
], function (can, bind, read, getValueAndBind) {
    var updateOnChange = function (compute, newValue, oldValue, batchNum) {
        if (newValue !== oldValue) {
            can.batch.trigger(compute, batchNum ? {
                type: 'change',
                batchNum: batchNum
            } : 'change', [
                newValue,
                oldValue
            ]);
        }
    };
    var setupComputeHandlers = function (compute, func, context, singleBind) {
        var readInfo, onchanged, batchNum;
        singleBind = false;
        return {
            on: function (updater) {
                var self = this;
                if (!onchanged) {
                    onchanged = function (ev) {
                        if (readInfo.ready && compute.bound && (ev.batchNum === undefined || ev.batchNum !== batchNum)) {
                            var oldValue = readInfo.value, newValue;
                            if (singleBind) {
                                newValue = func.call(context);
                                readInfo.value = newValue;
                            } else {
                                readInfo = getValueAndBind(func, context, readInfo, onchanged);
                                newValue = readInfo.value;
                            }
                            self.updater(newValue, oldValue, ev.batchNum);
                            batchNum = batchNum = ev.batchNum;
                        }
                    };
                }
                readInfo = getValueAndBind(func, context, { observed: {} }, onchanged);
                if (singleBind) {
                    func = can.__notObserve(func);
                }
                compute.value = readInfo.value;
                compute.hasDependencies = !can.isEmptyObject(readInfo.observed);
            },
            off: function (updater) {
                for (var name in readInfo.observed) {
                    var ob = readInfo.observed[name];
                    ob.obj.unbind(ob.event, onchanged);
                }
            }
        };
    };
    var k = function () {
    };
    var updater = function (newVal, oldVal, batchNum) {
            this.value = newVal;
            updateOnChange(this, newVal, oldVal, batchNum);
        }, asyncGet = function (fn, context, lastSetValue) {
            return function () {
                return fn.call(context, lastSetValue.get());
            };
        }, asyncUpdater = function (context, oldUpdater) {
            return function (newVal) {
                if (newVal !== undefined) {
                    oldUpdater(newVal, context.value);
                }
            };
        };
    can.Compute = function (getterSetter, context, eventName, bindOnce) {
        var args = [];
        for (var i = 0, arglen = arguments.length; i < arglen; i++) {
            args[i] = arguments[i];
        }
        var contextType = typeof args[1];
        if (typeof args[0] === 'function') {
            this._setupGetterSetterFn(args[0], args[1], args[2], args[3]);
        } else if (args[1]) {
            if (contextType === 'string') {
                this._setupContextString(args[0], args[1], args[2]);
            } else if (contextType === 'function') {
                this._setupContextFunction(args[0], args[1], args[2]);
            } else {
                if (args[1] && args[1].fn) {
                    this._setupAsyncCompute(args[0], args[1]);
                } else {
                    this._setupContextSettings(args[0], args[1]);
                }
            }
        } else {
            this._setupInitialValue(args[0]);
        }
        this._args = args;
        this.isComputed = true;
        can.cid(this, 'compute');
    };
    can.simpleExtend(can.Compute.prototype, {
        _bindsetup: can.__notObserve(function () {
            this.bound = true;
            this._on(this.updater);
        }),
        _bindteardown: function () {
            this._off(this.updater);
            this.bound = false;
        },
        bind: can.bindAndSetup,
        unbind: can.unbindAndTeardown,
        clone: function (context) {
            if (context && typeof this._args[0] === 'function') {
                this._args[1] = context;
            } else if (context) {
                this._args[2] = context;
            }
            return new can.Compute(this._args[0], this._args[1], this._args[2], this._args[3]);
        },
        _on: k,
        _off: k,
        get: function () {
            if (can.__isRecordingObserves() && this._canObserve !== false) {
                can.__observe(this, 'change');
                if (!this.bound) {
                    can.Compute.temporarilyBind(this);
                }
            }
            if (this.bound) {
                return this.value;
            } else {
                return this._get();
            }
        },
        _get: function () {
            return this.value;
        },
        set: function (newVal) {
            var old = this.value;
            var setVal = this._set(newVal, old);
            if (this.hasDependencies) {
                if (this._setUpdates) {
                    return this.value;
                }
                return this._get();
            }
            if (setVal === undefined) {
                this.value = this._get();
            } else {
                this.value = setVal;
            }
            updateOnChange(this, this.value, old);
            return this.value;
        },
        _set: function (newVal) {
            return this.value = newVal;
        },
        updater: updater,
        _computeFn: function (newVal) {
            if (arguments.length) {
                return this.set(newVal);
            }
            return this.get();
        },
        toFunction: function () {
            return can.proxy(this._computeFn, this);
        },
        _setupGetterSetterFn: function (getterSetter, context, eventName, bindOnce) {
            this._set = can.proxy(getterSetter, context);
            this._get = can.proxy(getterSetter, context);
            this._canObserve = eventName === false ? false : true;
            var handlers = setupComputeHandlers(this, getterSetter, context || this, bindOnce);
            this._on = handlers.on;
            this._off = handlers.off;
        },
        _setupContextString: function (target, propertyName, eventName) {
            var isObserve = can.isMapLike(target), self = this, handler = function (ev, newVal, oldVal) {
                    self.updater(newVal, oldVal, ev.batchNum);
                };
            if (isObserve) {
                this.hasDependencies = true;
                this._get = function () {
                    return target.attr(propertyName);
                };
                this._set = function (val) {
                    target.attr(propertyName, val);
                };
                this._on = function (update) {
                    target.bind(eventName || propertyName, handler);
                    this.value = this._get();
                };
                this._off = function () {
                    return target.unbind(eventName || propertyName, handler);
                };
            } else {
                this._get = function () {
                    return can.getObject(propertyName, [target]);
                };
                this._set = function (value) {
                    var properties = propertyName.split('.'), leafPropertyName = properties.pop(), targetProperty = can.getObject(properties.join('.'), [target]);
                    targetProperty[leafPropertyName] = value;
                };
            }
        },
        _setupContextFunction: function (initialValue, setter, eventName) {
            this.value = initialValue;
            this._set = setter;
            can.simpleExtend(this, eventName);
        },
        _setupContextSettings: function (initialValue, settings) {
            this.value = initialValue;
            this._set = settings.set ? can.proxy(settings.set, settings) : this._set;
            this._get = settings.get ? can.proxy(settings.get, settings) : this._get;
            if (!settings.__selfUpdater) {
                var self = this, oldUpdater = this.updater;
                this.updater = function () {
                    oldUpdater.call(self, self._get(), self.value);
                };
            }
            this._on = settings.on ? settings.on : this._on;
            this._off = settings.off ? settings.off : this._off;
        },
        _setupAsyncCompute: function (initialValue, settings) {
            this.value = initialValue;
            var oldUpdater = can.proxy(this.updater, this), self = this, fn = settings.fn, data;
            this.updater = oldUpdater;
            var lastSetValue = new can.Compute(initialValue);
            this.lastSetValue = lastSetValue;
            this._setUpdates = true;
            this._set = function (newVal) {
                if (newVal === lastSetValue.get()) {
                    return this.value;
                }
                return lastSetValue.set(newVal);
            };
            this._get = asyncGet(fn, settings.context, lastSetValue);
            if (fn.length === 0) {
                data = setupComputeHandlers(this, fn, settings.context);
            } else if (fn.length === 1) {
                data = setupComputeHandlers(this, function () {
                    return fn.call(settings.context, lastSetValue.get());
                }, settings);
            } else {
                this.updater = asyncUpdater(this, oldUpdater);
                data = setupComputeHandlers(this, function () {
                    var res = fn.call(settings.context, lastSetValue.get(), function (newVal) {
                            oldUpdater(newVal, self.value);
                        });
                    return res !== undefined ? res : this.value;
                }, settings);
            }
            this._on = data.on;
            this._off = data.off;
        },
        _setupInitialValue: function (initialValue) {
            this.value = initialValue;
        }
    });
    var computes, unbindComputes = function () {
            for (var i = 0, len = computes.length; i < len; i++) {
                computes[i].unbind('change', k);
            }
            computes = null;
        };
    can.Compute.temporarilyBind = function (compute) {
        compute.bind('change', k);
        if (!computes) {
            computes = [];
            setTimeout(unbindComputes, 10);
        }
        computes.push(compute);
    };
    can.Compute.async = function (initialValue, asyncComputer, context) {
        return new can.Compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    can.Compute.read = read;
    can.Compute.set = read.write;
    can.Compute.truthy = function (compute) {
        return new can.Compute(function () {
            var res = compute.get();
            if (typeof res === 'function') {
                res = res.get();
            }
            return !!res;
        });
    };
    return can.Compute;
});
/*lib/can/compute/compute*/
define('lib/can/compute/compute', [
    'can/util/util',
    'can/util/bind/bind',
    'can/util/batch/batch',
    'can/compute/proto_compute'
], function (can, bind) {
    can.compute = function (getterSetter, context, eventName, bindOnce) {
        var internalCompute = new can.Compute(getterSetter, context, eventName, bindOnce);
        var bind = internalCompute.bind;
        var unbind = internalCompute.unbind;
        var compute = function (val) {
            if (arguments.length) {
                return internalCompute.set(val);
            }
            return internalCompute.get();
        };
        var cid = can.cid(compute, 'compute');
        var handlerKey = '__handler' + cid;
        compute.bind = function (ev, handler) {
            var computeHandler = handler && handler[handlerKey];
            if (handler && !computeHandler) {
                computeHandler = handler[handlerKey] = function () {
                    handler.apply(compute, arguments);
                };
            }
            return bind.call(internalCompute, ev, computeHandler);
        };
        compute.unbind = function (ev, handler) {
            var computeHandler = handler && handler[handlerKey];
            if (computeHandler) {
                delete handler[handlerKey];
                return internalCompute.unbind(ev, computeHandler);
            }
            return unbind.apply(internalCompute, arguments);
        };
        compute.isComputed = internalCompute.isComputed;
        compute.clone = function (ctx) {
            if (typeof getterSetter === 'function') {
                context = ctx;
            }
            return can.compute(getterSetter, context, ctx, bindOnce);
        };
        compute.computeInstance = internalCompute;
        return compute;
    };
    var k = function () {
    };
    var computes, unbindComputes = function () {
            for (var i = 0, len = computes.length; i < len; i++) {
                computes[i].unbind('change', k);
            }
            computes = null;
        };
    can.compute.temporarilyBind = function (compute) {
        compute.bind('change', k);
        if (!computes) {
            computes = [];
            setTimeout(unbindComputes, 10);
        }
        computes.push(compute);
    };
    can.compute.truthy = function (compute) {
        return can.compute(function () {
            var res = compute();
            if (typeof res === 'function') {
                res = res();
            }
            return !!res;
        });
    };
    can.compute.async = function (initialValue, asyncComputer, context) {
        return can.compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    can.compute.read = can.Compute.read;
    can.compute.set = can.Compute.set;
    return can.compute;
});
/*lib/can/view/scope/compute_data*/
define('lib/can/view/scope/compute_data', [
    'can/util/util',
    'can/compute/compute',
    'can/compute/get_value_and_bind'
], function (can, compute, getValueAndBind) {
    var isFastPath = function (computeData) {
        return computeData.reads && computeData.reads.length === 1 && computeData.root instanceof can.Map && !can.isFunction(computeData.root[computeData.reads[0]]);
    };
    var getValueAndBindScopeRead = function (scopeRead, scopeReadChanged) {
        return getValueAndBind(scopeRead, null, { observed: {} }, scopeReadChanged);
    };
    var unbindScopeRead = function (readInfo, scopeReadChanged) {
        for (var name in readInfo.observed) {
            var ob = readInfo.observed[name];
            ob.obj.unbind(ob.event, scopeReadChanged);
        }
    };
    var getValueAndBindSinglePropertyRead = function (computeData, singlePropertyReadChanged) {
        var target = computeData.root, prop = computeData.reads[0];
        target.bind(prop, singlePropertyReadChanged);
        return {
            value: computeData.initialValue,
            observed: { something: true }
        };
    };
    var unbindSinglePropertyRead = function (computeData, singlePropertyReadChanged) {
        computeData.root.unbind(computeData.reads[0], singlePropertyReadChanged);
    };
    var scopeReader = function (scope, key, options, computeData, newVal) {
        if (arguments.length > 4) {
            var root = computeData.root || computeData.setRoot;
            if (root.isComputed) {
                root(newVal);
            } else if (computeData.reads.length) {
                var last = computeData.reads.length - 1;
                var obj = computeData.reads.length ? can.compute.read(root, computeData.reads.slice(0, last)).value : root;
                can.compute.set(obj, computeData.reads[last], newVal, options);
            }
        } else {
            if (computeData.root) {
                return can.compute.read(computeData.root, computeData.reads, options).value;
            }
            var data = scope.read(key, options);
            computeData.scope = data.scope;
            computeData.initialValue = data.value;
            computeData.reads = data.reads;
            computeData.root = data.rootObserve;
            computeData.setRoot = data.setRoot;
            return data.value;
        }
    };
    return function (scope, key, options) {
        options = options || { args: [] };
        var computeData = {}, scopeRead = function (newVal) {
                if (arguments.length) {
                    return scopeReader(scope, key, options, computeData, newVal);
                } else {
                    return scopeReader(scope, key, options, computeData);
                }
            }, batchNum, readInfo, scopeReadChanged = function (ev) {
                if (readInfo.ready && compute.computeInstance.bound && (ev.batchNum === undefined || ev.batchNum !== batchNum)) {
                    var oldValue = readInfo.value, newValue;
                    readInfo = getValueAndBind(scopeRead, null, readInfo, scopeReadChanged);
                    newValue = readInfo.value;
                    compute.computeInstance.updater(newValue, oldValue, ev.batchNum);
                    batchNum = batchNum = ev.batchNum;
                }
            }, singlePropertyReadChanged = function (ev, newVal, oldVal) {
                if (typeof newVal !== 'function') {
                    compute.computeInstance.updater(newVal, oldVal, ev.batchNum);
                } else {
                    unbindSinglePropertyRead(computeData, singlePropertyReadChanged);
                    readInfo = getValueAndBindScopeRead(scopeRead, scopeReadChanged);
                    isFastPathBound = false;
                    compute.computeInstance.updater(readInfo.value, oldVal, ev.batchNum);
                }
            }, isFastPathBound = false, compute = can.compute(undefined, {
                on: function () {
                    readInfo = getValueAndBindScopeRead(scopeRead, scopeReadChanged);
                    if (isFastPath(computeData)) {
                        var oldReadInfo = readInfo;
                        readInfo = getValueAndBindSinglePropertyRead(computeData, singlePropertyReadChanged);
                        unbindScopeRead(oldReadInfo, scopeReadChanged);
                        isFastPathBound = true;
                    }
                    compute.computeInstance.value = readInfo.value;
                    compute.computeInstance.hasDependencies = !can.isEmptyObject(readInfo.observed);
                },
                off: function () {
                    if (isFastPathBound) {
                        unbindSinglePropertyRead(computeData, singlePropertyReadChanged);
                    } else {
                        unbindScopeRead(readInfo, scopeReadChanged);
                    }
                },
                set: scopeRead,
                get: scopeRead,
                __selfUpdater: true
            });
        computeData.compute = compute;
        return computeData;
    };
});
/*lib/can/view/view*/
define('lib/can/view/view', ['can/util/util'], function (can) {
    var isFunction = can.isFunction, makeArray = can.makeArray, hookupId = 1;
    var makeRenderer = function (textRenderer) {
        var renderer = function () {
            return $view.frag(textRenderer.apply(this, arguments));
        };
        renderer.render = function () {
            return textRenderer.apply(textRenderer, arguments);
        };
        return renderer;
    };
    var checkText = function (text, url) {
        if (!text.length) {
            throw new Error('can.view: No template or empty template:' + url);
        }
    };
    var getRenderer = function (obj, async) {
        if (isFunction(obj)) {
            var def = can.Deferred();
            return def.resolve(obj);
        }
        var url = typeof obj === 'string' ? obj : obj.url, suffix = obj.engine && '.' + obj.engine || url.match(/\.[\w\d]+$/), type, el, id;
        if (url.match(/^#/)) {
            url = url.substr(1);
        }
        if (el = document.getElementById(url)) {
            suffix = '.' + el.type.match(/\/(x\-)?(.+)/)[2];
        }
        if (!suffix && !$view.cached[url]) {
            url += suffix = $view.ext;
        }
        if (can.isArray(suffix)) {
            suffix = suffix[0];
        }
        id = $view.toId(url);
        if (url.match(/^\/\//)) {
            url = url.substr(2);
            url = !window.steal ? url : steal.config().root.mapJoin('' + steal.id(url));
        }
        if (window.require) {
            if (require.toUrl) {
                url = require.toUrl(url);
            }
        }
        type = $view.types[suffix];
        if ($view.cached[id]) {
            return $view.cached[id];
        } else if (el) {
            return $view.registerView(id, el.innerHTML, type);
        } else {
            var d = new can.Deferred();
            can.ajax({
                async: async,
                url: url,
                dataType: 'text',
                error: function (jqXHR) {
                    checkText('', url);
                    d.reject(jqXHR);
                },
                success: function (text) {
                    checkText(text, url);
                    $view.registerView(id, text, type, d);
                }
            });
            return d;
        }
    };
    var getDeferreds = function (data) {
        var deferreds = [];
        if (can.isDeferred(data)) {
            return [data];
        } else {
            for (var prop in data) {
                if (can.isDeferred(data[prop])) {
                    deferreds.push(data[prop]);
                }
            }
        }
        return deferreds;
    };
    var usefulPart = function (resolved) {
        return can.isArray(resolved) && resolved[1] === 'success' ? resolved[0] : resolved;
    };
    var $view = can.view = can.template = function (view, data, helpers, callback) {
            if (isFunction(helpers)) {
                callback = helpers;
                helpers = undefined;
            }
            return $view.renderAs('fragment', view, data, helpers, callback);
        };
    can.extend($view, {
        frag: function (result, parentNode) {
            return $view.hookup($view.fragment(result), parentNode);
        },
        fragment: function (result) {
            if (typeof result !== 'string' && result.nodeType === 11) {
                return result;
            }
            var frag = can.buildFragment(result, document.body);
            if (!frag.childNodes.length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        },
        toId: function (src) {
            return can.map(src.toString().split(/\/|\./g), function (part) {
                if (part) {
                    return part;
                }
            }).join('_');
        },
        toStr: function (txt) {
            return txt == null ? '' : '' + txt;
        },
        hookup: function (fragment, parentNode) {
            var hookupEls = [], id, func;
            can.each(fragment.childNodes ? can.makeArray(fragment.childNodes) : fragment, function (node) {
                if (node.nodeType === 1) {
                    hookupEls.push(node);
                    hookupEls.push.apply(hookupEls, can.makeArray(node.getElementsByTagName('*')));
                }
            });
            can.each(hookupEls, function (el) {
                if (el.getAttribute && (id = el.getAttribute('data-view-id')) && (func = $view.hookups[id])) {
                    func(el, parentNode, id);
                    delete $view.hookups[id];
                    el.removeAttribute('data-view-id');
                }
            });
            return fragment;
        },
        hookups: {},
        hook: function (cb) {
            $view.hookups[++hookupId] = cb;
            return ' data-view-id=\'' + hookupId + '\'';
        },
        cached: {},
        cachedRenderers: {},
        cache: true,
        register: function (info) {
            this.types['.' + info.suffix] = info;
            can[info.suffix] = $view[info.suffix] = function (id, text) {
                var renderer, renderFunc;
                if (!text) {
                    renderFunc = function () {
                        if (!renderer) {
                            if (info.fragRenderer) {
                                renderer = info.fragRenderer(null, id);
                            } else {
                                renderer = makeRenderer(info.renderer(null, id));
                            }
                        }
                        return renderer.apply(this, arguments);
                    };
                    renderFunc.render = function () {
                        var textRenderer = info.renderer(null, id);
                        return textRenderer.apply(textRenderer, arguments);
                    };
                    return renderFunc;
                }
                var registeredRenderer = function () {
                    if (!renderer) {
                        if (info.fragRenderer) {
                            renderer = info.fragRenderer(id, text);
                        } else {
                            renderer = info.renderer(id, text);
                        }
                    }
                    return renderer.apply(this, arguments);
                };
                if (info.fragRenderer) {
                    return $view.preload(id, registeredRenderer);
                } else {
                    return $view.preloadStringRenderer(id, registeredRenderer);
                }
            };
        },
        types: {},
        ext: '.ejs',
        registerScript: function (type, id, src) {
            return 'can.view.preloadStringRenderer(\'' + id + '\',' + $view.types['.' + type].script(id, src) + ');';
        },
        preload: function (id, renderer) {
            var def = $view.cached[id] = new can.Deferred().resolve(function (data, helpers) {
                    return renderer.call(data, data, helpers);
                });
            def.__view_id = id;
            $view.cachedRenderers[id] = renderer;
            return renderer;
        },
        preloadStringRenderer: function (id, stringRenderer) {
            return this.preload(id, makeRenderer(stringRenderer));
        },
        render: function (view, data, helpers, callback) {
            return can.view.renderAs('string', view, data, helpers, callback);
        },
        renderTo: function (format, renderer, data, helpers) {
            return (format === 'string' && renderer.render ? renderer.render : renderer)(data, helpers);
        },
        renderAs: function (format, view, data, helpers, callback) {
            if (isFunction(helpers)) {
                callback = helpers;
                helpers = undefined;
            }
            var deferreds = getDeferreds(data);
            var reading, deferred, dataCopy, async, response;
            if (deferreds.length) {
                deferred = new can.Deferred();
                dataCopy = can.extend({}, data);
                deferreds.push(getRenderer(view, true));
                can.when.apply(can, deferreds).then(function (resolved) {
                    var objs = makeArray(arguments), renderer = objs.pop(), result;
                    if (can.isDeferred(data)) {
                        dataCopy = usefulPart(resolved);
                    } else {
                        for (var prop in data) {
                            if (can.isDeferred(data[prop])) {
                                dataCopy[prop] = usefulPart(objs.shift());
                            }
                        }
                    }
                    result = can.view.renderTo(format, renderer, dataCopy, helpers);
                    deferred.resolve(result, dataCopy);
                    if (callback) {
                        callback(result, dataCopy);
                    }
                }, function () {
                    deferred.reject.apply(deferred, arguments);
                });
                return deferred;
            } else {
                reading = can.__clearReading();
                async = isFunction(callback);
                deferred = getRenderer(view, async);
                if (reading) {
                    can.__setReading(reading);
                }
                if (async) {
                    response = deferred;
                    deferred.then(function (renderer) {
                        callback(data ? can.view.renderTo(format, renderer, data, helpers) : renderer);
                    });
                } else {
                    if (deferred.state() === 'resolved' && deferred.__view_id) {
                        var currentRenderer = $view.cachedRenderers[deferred.__view_id];
                        return data ? can.view.renderTo(format, currentRenderer, data, helpers) : currentRenderer;
                    } else {
                        deferred.then(function (renderer) {
                            response = data ? can.view.renderTo(format, renderer, data, helpers) : renderer;
                        });
                    }
                }
                return response;
            }
        },
        registerView: function (id, text, type, def) {
            var info = typeof type === 'object' ? type : $view.types[type || $view.ext], renderer;
            if (info.fragRenderer) {
                renderer = info.fragRenderer(id, text);
            } else {
                renderer = makeRenderer(info.renderer(id, text));
            }
            def = def || new can.Deferred();
            if ($view.cache) {
                $view.cached[id] = def;
                def.__view_id = id;
                $view.cachedRenderers[id] = renderer;
            }
            return def.resolve(renderer);
        }
    });
    return can;
});
/*lib/can/view/scope/scope*/
define('lib/can/view/scope/scope', [
    'can/util/util',
    'can/view/scope/compute_data',
    'can/construct/construct',
    'can/map/map',
    'can/list/list',
    'can/view/view',
    'can/compute/compute'
], function (can, makeComputeData) {
    var escapeReg = /(\\)?\./g, escapeDotReg = /\\\./g, getNames = function (attr) {
            var names = [], last = 0;
            attr.replace(escapeReg, function (first, second, index) {
                if (!second) {
                    names.push(attr.slice(last, index).replace(escapeDotReg, '.'));
                    last = index + first.length;
                }
            });
            names.push(attr.slice(last).replace(escapeDotReg, '.'));
            return names;
        };
    var Scope = can.Construct.extend({ read: can.compute.read }, {
            init: function (context, parent) {
                this._context = context;
                this._parent = parent;
                this.__cache = {};
            },
            attr: can.__notObserve(function (key, value) {
                var options = {
                        isArgument: true,
                        returnObserveMethods: true,
                        proxyMethods: false
                    }, res = this.read(key, options);
                if (arguments.length === 2) {
                    var lastIndex = key.lastIndexOf('.'), readKey = lastIndex !== -1 ? key.substring(0, lastIndex) : '.', obj = this.read(readKey, options).value;
                    if (lastIndex !== -1) {
                        key = key.substring(lastIndex + 1, key.length);
                    }
                    can.compute.set(obj, key, value, options);
                }
                return res.value;
            }),
            add: function (context) {
                if (context !== this._context) {
                    return new this.constructor(context, this);
                } else {
                    return this;
                }
            },
            computeData: function (key, options) {
                return makeComputeData(this, key, options);
            },
            compute: function (key, options) {
                return this.computeData(key, options).compute;
            },
            read: function (attr, options) {
                var stopLookup;
                if (attr.substr(0, 2) === './') {
                    stopLookup = true;
                    attr = attr.substr(2);
                } else if (attr.substr(0, 3) === '../') {
                    return this._parent.read(attr.substr(3), options);
                } else if (attr === '..') {
                    return { value: this._parent._context };
                } else if (attr === '.' || attr === 'this') {
                    return { value: this._context };
                }
                var names = attr.indexOf('\\.') === -1 ? attr.split('.') : getNames(attr), context, scope = this, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve;
                while (scope) {
                    context = scope._context;
                    if (context !== null && (typeof context === 'object' || typeof context === 'function')) {
                        var data = can.compute.read(context, names, can.simpleExtend({
                                foundObservable: function (observe, nameIndex) {
                                    currentObserve = observe;
                                    currentReads = names.slice(nameIndex);
                                },
                                earlyExit: function (parentValue, nameIndex) {
                                    if (nameIndex > setObserveDepth) {
                                        currentSetObserve = currentObserve;
                                        currentSetReads = currentReads;
                                        setObserveDepth = nameIndex;
                                    }
                                },
                                executeAnonymousFunctions: true
                            }, options));
                        if (data.value !== undefined) {
                            return {
                                scope: scope,
                                rootObserve: currentObserve,
                                value: data.value,
                                reads: currentReads
                            };
                        } else {
                            undefinedObserves.push(can.__clearObserved());
                        }
                    }
                    if (!stopLookup) {
                        scope = scope._parent;
                    } else {
                        scope = null;
                    }
                }
                var len = undefinedObserves.length;
                if (len) {
                    for (var i = 0; i < len; i++) {
                        can.__addObserved(undefinedObserves[i]);
                    }
                }
                return {
                    setRoot: currentSetObserve,
                    reads: currentSetReads,
                    value: undefined
                };
            }
        });
    can.view.Scope = Scope;
    return Scope;
});
/*lib/can/view/elements*/
define('lib/can/view/elements', [
    'can/util/util',
    'can/view/view'
], function (can) {
    var doc = typeof document !== 'undefined' ? document : null;
    var selectsCommentNodes = doc && function () {
            return can.$(document.createComment('~')).length === 1;
        }();
    var elements = {
            tagToContentPropMap: {
                option: doc && 'textContent' in document.createElement('option') ? 'textContent' : 'innerText',
                textarea: 'value'
            },
            attrMap: can.attr.map,
            attrReg: /([^\s=]+)[\s]*=[\s]*/,
            defaultValue: can.attr.defaultValue,
            tagMap: {
                '': 'span',
                colgroup: 'col',
                table: 'tbody',
                tr: 'td',
                ol: 'li',
                ul: 'li',
                tbody: 'tr',
                thead: 'tr',
                tfoot: 'tr',
                select: 'option',
                optgroup: 'option'
            },
            reverseTagMap: {
                col: 'colgroup',
                tr: 'tbody',
                option: 'select',
                td: 'tr',
                th: 'tr',
                li: 'ul'
            },
            getParentNode: function (el, defaultParentNode) {
                return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
            },
            setAttr: can.attr.set,
            getAttr: can.attr.get,
            removeAttr: can.attr.remove,
            contentText: function (text) {
                if (typeof text === 'string') {
                    return text;
                }
                if (!text && text !== 0) {
                    return '';
                }
                return '' + text;
            },
            after: function (oldElements, newFrag) {
                var last = oldElements[oldElements.length - 1];
                if (last.nextSibling) {
                    can.insertBefore(last.parentNode, newFrag, last.nextSibling);
                } else {
                    can.appendChild(last.parentNode, newFrag);
                }
            },
            replace: function (oldElements, newFrag) {
                elements.after(oldElements, newFrag);
                if (can.remove(can.$(oldElements)).length < oldElements.length && !selectsCommentNodes) {
                    can.each(oldElements, function (el) {
                        if (el.nodeType === 8) {
                            el.parentNode.removeChild(el);
                        }
                    });
                }
            }
        };
    can.view.elements = elements;
    return elements;
});
/*lib/can/view/callbacks/callbacks*/
define('lib/can/view/callbacks/callbacks', [
    'can/util/util',
    'can/view/view'
], function (can) {
    var attr = can.view.attr = function (attributeName, attrHandler) {
            if (attrHandler) {
                if (typeof attributeName === 'string') {
                    attributes[attributeName] = attrHandler;
                } else {
                    regExpAttributes.push({
                        match: attributeName,
                        handler: attrHandler
                    });
                }
            } else {
                var cb = attributes[attributeName];
                if (!cb) {
                    for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                        var attrMatcher = regExpAttributes[i];
                        if (attrMatcher.match.test(attributeName)) {
                            cb = attrMatcher.handler;
                            break;
                        }
                    }
                }
                return cb;
            }
        };
    var attributes = {}, regExpAttributes = [], automaticCustomElementCharacters = /[-\:]/;
    var tag = can.view.tag = function (tagName, tagHandler) {
            if (tagHandler) {
                if (can.global.html5) {
                    can.global.html5.elements += ' ' + tagName;
                    can.global.html5.shivDocument();
                }
                tags[tagName.toLowerCase()] = tagHandler;
            } else {
                var cb = tags[tagName.toLowerCase()];
                if (!cb && automaticCustomElementCharacters.test(tagName)) {
                    cb = function () {
                    };
                }
                return cb;
            }
        };
    var tags = {};
    can.view.callbacks = {
        _tags: tags,
        _attributes: attributes,
        _regExpAttributes: regExpAttributes,
        tag: tag,
        attr: attr,
        tagHandler: function (el, tagName, tagData) {
            var helperTagCallback = tagData.options.attr('tags.' + tagName), tagCallback = helperTagCallback || tags[tagName];
            var scope = tagData.scope, res;
            if (tagCallback) {
                var reads = can.__clearObserved();
                res = tagCallback(el, tagData);
                can.__setObserved(reads);
            } else {
                res = scope;
            }
            if (res && tagData.subtemplate) {
                if (scope !== res) {
                    scope = scope.add(res);
                }
                var result = tagData.subtemplate(scope, tagData.options);
                var frag = typeof result === 'string' ? can.view.frag(result) : result;
                can.appendChild(el, frag);
            }
        }
    };
    return can.view.callbacks;
});
/*lib/can/view/scanner*/
define('lib/can/view/scanner', [
    'can/view/view',
    './elements',
    'can/view/callbacks/callbacks'
], function (can, elements, viewCallbacks) {
    var newLine = /(\r|\n)+/g, notEndTag = /\//, clean = function (content) {
            return content.split('\\').join('\\\\').split('\n').join('\\n').split('"').join('\\"').split('\t').join('\\t');
        }, getTag = function (tagName, tokens, i) {
            if (tagName) {
                return tagName;
            } else {
                while (i < tokens.length) {
                    if (tokens[i] === '<' && !notEndTag.test(tokens[i + 1])) {
                        return elements.reverseTagMap[tokens[i + 1]] || 'span';
                    }
                    i++;
                }
            }
            return '';
        }, bracketNum = function (content) {
            return --content.split('{').length - --content.split('}').length;
        }, myEval = function (script) {
            eval(script);
        }, attrReg = /([^\s]+)[\s]*=[\s]*$/, startTxt = 'var ___v1ew = [];', finishTxt = 'return ___v1ew.join(\'\')', put_cmd = '___v1ew.push(\n', insert_cmd = put_cmd, htmlTag = null, quote = null, beforeQuote = null, rescan = null, getAttrName = function () {
            var matches = beforeQuote.match(attrReg);
            return matches && matches[1];
        }, status = function () {
            return quote ? '\'' + getAttrName() + '\'' : htmlTag ? 1 : 0;
        }, top = function (stack) {
            return stack[stack.length - 1];
        }, Scanner;
    can.view.Scanner = Scanner = function (options) {
        can.extend(this, {
            text: {},
            tokens: []
        }, options);
        this.text.options = this.text.options || '';
        this.tokenReg = [];
        this.tokenSimple = {
            '<': '<',
            '>': '>',
            '"': '"',
            '\'': '\''
        };
        this.tokenComplex = [];
        this.tokenMap = {};
        for (var i = 0, token; token = this.tokens[i]; i++) {
            if (token[2]) {
                this.tokenReg.push(token[2]);
                this.tokenComplex.push({
                    abbr: token[1],
                    re: new RegExp(token[2]),
                    rescan: token[3]
                });
            } else {
                this.tokenReg.push(token[1]);
                this.tokenSimple[token[1]] = token[0];
            }
            this.tokenMap[token[0]] = token[1];
        }
        this.tokenReg = new RegExp('(' + this.tokenReg.slice(0).concat([
            '<',
            '>',
            '"',
            '\''
        ]).join('|') + ')', 'g');
    };
    Scanner.prototype = {
        helpers: [],
        scan: function (source, name) {
            var tokens = [], last = 0, simple = this.tokenSimple, complex = this.tokenComplex;
            source = source.replace(newLine, '\n');
            if (this.transform) {
                source = this.transform(source);
            }
            source.replace(this.tokenReg, function (whole, part) {
                var offset = arguments[arguments.length - 2];
                if (offset > last) {
                    tokens.push(source.substring(last, offset));
                }
                if (simple[whole]) {
                    tokens.push(whole);
                } else {
                    for (var i = 0, token; token = complex[i]; i++) {
                        if (token.re.test(whole)) {
                            tokens.push(token.abbr);
                            if (token.rescan) {
                                tokens.push(token.rescan(part));
                            }
                            break;
                        }
                    }
                }
                last = offset + part.length;
            });
            if (last < source.length) {
                tokens.push(source.substr(last));
            }
            var content = '', buff = [startTxt + (this.text.start || '')], put = function (content, bonus) {
                    buff.push(put_cmd, '"', clean(content), '"' + (bonus || '') + ');');
                }, endStack = [], lastToken, startTag = null, magicInTag = false, specialStates = {
                    attributeHookups: [],
                    tagHookups: [],
                    lastTagHookup: ''
                }, popTagHookup = function () {
                    specialStates.lastTagHookup = specialStates.tagHookups.pop() + specialStates.tagHookups.length;
                }, tagName = '', tagNames = [], popTagName = false, bracketCount, specialAttribute = false, i = 0, token, tmap = this.tokenMap, attrName;
            htmlTag = quote = beforeQuote = null;
            for (; (token = tokens[i++]) !== undefined;) {
                if (startTag === null) {
                    switch (token) {
                    case tmap.left:
                    case tmap.escapeLeft:
                    case tmap.returnLeft:
                        magicInTag = htmlTag && 1;
                    case tmap.commentLeft:
                        startTag = token;
                        if (content.length) {
                            put(content);
                        }
                        content = '';
                        break;
                    case tmap.escapeFull:
                        magicInTag = htmlTag && 1;
                        rescan = 1;
                        startTag = tmap.escapeLeft;
                        if (content.length) {
                            put(content);
                        }
                        rescan = tokens[i++];
                        content = rescan.content || rescan;
                        if (rescan.before) {
                            put(rescan.before);
                        }
                        tokens.splice(i, 0, tmap.right);
                        break;
                    case tmap.commentFull:
                        break;
                    case tmap.templateLeft:
                        content += tmap.left;
                        break;
                    case '<':
                        if (tokens[i].indexOf('!--') !== 0) {
                            htmlTag = 1;
                            magicInTag = 0;
                        }
                        content += token;
                        break;
                    case '>':
                        htmlTag = 0;
                        var emptyElement = content.substr(content.length - 1) === '/' || content.substr(content.length - 2) === '--', attrs = '';
                        if (specialStates.attributeHookups.length) {
                            attrs = 'attrs: [\'' + specialStates.attributeHookups.join('\',\'') + '\'], ';
                            specialStates.attributeHookups = [];
                        }
                        if (tagName + specialStates.tagHookups.length !== specialStates.lastTagHookup && tagName === top(specialStates.tagHookups)) {
                            if (emptyElement) {
                                content = content.substr(0, content.length - 1);
                            }
                            buff.push(put_cmd, '"', clean(content), '"', ',can.view.pending({tagName:\'' + tagName + '\',' + attrs + 'scope: ' + (this.text.scope || 'this') + this.text.options);
                            if (emptyElement) {
                                buff.push('}));');
                                content = '/>';
                                popTagHookup();
                            } else if (tokens[i] === '<' && tokens[i + 1] === '/' + tagName) {
                                buff.push('}));');
                                content = token;
                                popTagHookup();
                            } else {
                                buff.push(',subtemplate: function(' + this.text.argNames + '){\n' + startTxt + (this.text.start || ''));
                                content = '';
                            }
                        } else if (magicInTag || !popTagName && elements.tagToContentPropMap[tagNames[tagNames.length - 1]] || attrs) {
                            var pendingPart = ',can.view.pending({' + attrs + 'scope: ' + (this.text.scope || 'this') + this.text.options + '}),"';
                            if (emptyElement) {
                                put(content.substr(0, content.length - 1), pendingPart + '/>"');
                            } else {
                                put(content, pendingPart + '>"');
                            }
                            content = '';
                            magicInTag = 0;
                        } else {
                            content += token;
                        }
                        if (emptyElement || popTagName) {
                            tagNames.pop();
                            tagName = tagNames[tagNames.length - 1];
                            popTagName = false;
                        }
                        specialStates.attributeHookups = [];
                        break;
                    case '\'':
                    case '"':
                        if (htmlTag) {
                            if (quote && quote === token) {
                                quote = null;
                                var attr = getAttrName();
                                if (viewCallbacks.attr(attr)) {
                                    specialStates.attributeHookups.push(attr);
                                }
                                if (specialAttribute) {
                                    content += token;
                                    put(content);
                                    buff.push(finishTxt, '}));\n');
                                    content = '';
                                    specialAttribute = false;
                                    break;
                                }
                            } else if (quote === null) {
                                quote = token;
                                beforeQuote = lastToken;
                                attrName = getAttrName();
                                if (tagName === 'img' && attrName === 'src' || attrName === 'style') {
                                    put(content.replace(attrReg, ''));
                                    content = '';
                                    specialAttribute = true;
                                    buff.push(insert_cmd, 'can.view.txt(2,\'' + getTag(tagName, tokens, i) + '\',' + status() + ',this,function(){', startTxt);
                                    put(attrName + '=' + token);
                                    break;
                                }
                            }
                        }
                    default:
                        if (lastToken === '<') {
                            tagName = token.substr(0, 3) === '!--' ? '!--' : token.split(/\s/)[0];
                            var isClosingTag = false, cleanedTagName;
                            if (tagName.indexOf('/') === 0) {
                                isClosingTag = true;
                                cleanedTagName = tagName.substr(1);
                            }
                            if (isClosingTag) {
                                if (top(tagNames) === cleanedTagName) {
                                    tagName = cleanedTagName;
                                    popTagName = true;
                                }
                                if (top(specialStates.tagHookups) === cleanedTagName) {
                                    put(content.substr(0, content.length - 1));
                                    buff.push(finishTxt + '}}) );');
                                    content = '><';
                                    popTagHookup();
                                }
                            } else {
                                if (tagName.lastIndexOf('/') === tagName.length - 1) {
                                    tagName = tagName.substr(0, tagName.length - 1);
                                }
                                if (tagName !== '!--' && viewCallbacks.tag(tagName)) {
                                    if (tagName === 'content' && elements.tagMap[top(tagNames)]) {
                                        token = token.replace('content', elements.tagMap[top(tagNames)]);
                                    }
                                    specialStates.tagHookups.push(tagName);
                                }
                                tagNames.push(tagName);
                            }
                        }
                        content += token;
                        break;
                    }
                } else {
                    switch (token) {
                    case tmap.right:
                    case tmap.returnRight:
                        switch (startTag) {
                        case tmap.left:
                            bracketCount = bracketNum(content);
                            if (bracketCount === 1) {
                                buff.push(insert_cmd, 'can.view.txt(0,\'' + getTag(tagName, tokens, i) + '\',' + status() + ',this,function(){', startTxt, content);
                                endStack.push({
                                    before: '',
                                    after: finishTxt + '}));\n'
                                });
                            } else {
                                last = endStack.length && bracketCount === -1 ? endStack.pop() : { after: ';' };
                                if (last.before) {
                                    buff.push(last.before);
                                }
                                buff.push(content, ';', last.after);
                            }
                            break;
                        case tmap.escapeLeft:
                        case tmap.returnLeft:
                            bracketCount = bracketNum(content);
                            if (bracketCount) {
                                endStack.push({
                                    before: finishTxt,
                                    after: '}));\n'
                                });
                            }
                            var escaped = startTag === tmap.escapeLeft ? 1 : 0, commands = {
                                    insert: insert_cmd,
                                    tagName: getTag(tagName, tokens, i),
                                    status: status(),
                                    specialAttribute: specialAttribute
                                };
                            for (var ii = 0; ii < this.helpers.length; ii++) {
                                var helper = this.helpers[ii];
                                if (helper.name.test(content)) {
                                    content = helper.fn(content, commands);
                                    if (helper.name.source === /^>[\s]*\w*/.source) {
                                        escaped = 0;
                                    }
                                    break;
                                }
                            }
                            if (typeof content === 'object') {
                                if (content.startTxt && content.end && specialAttribute) {
                                    buff.push(insert_cmd, 'can.view.toStr( ', content.content, '() ) );');
                                } else {
                                    if (content.startTxt) {
                                        buff.push(insert_cmd, 'can.view.txt(\n' + (typeof status() === 'string' || (content.escaped != null ? content.escaped : escaped)) + ',\n\'' + tagName + '\',\n' + status() + ',\nthis,\n');
                                    } else if (content.startOnlyTxt) {
                                        buff.push(insert_cmd, 'can.view.onlytxt(this,\n');
                                    }
                                    buff.push(content.content);
                                    if (content.end) {
                                        buff.push('));');
                                    }
                                }
                            } else if (specialAttribute) {
                                buff.push(insert_cmd, content, ');');
                            } else {
                                buff.push(insert_cmd, 'can.view.txt(\n' + (typeof status() === 'string' || escaped) + ',\n\'' + tagName + '\',\n' + status() + ',\nthis,\nfunction(){ ' + (this.text.escape || '') + 'return ', content, bracketCount ? startTxt : '}));\n');
                            }
                            if (rescan && rescan.after && rescan.after.length) {
                                put(rescan.after.length);
                                rescan = null;
                            }
                            break;
                        }
                        startTag = null;
                        content = '';
                        break;
                    case tmap.templateLeft:
                        content += tmap.left;
                        break;
                    default:
                        content += token;
                        break;
                    }
                }
                lastToken = token;
            }
            if (content.length) {
                put(content);
            }
            buff.push(';');
            var template = buff.join(''), out = { out: (this.text.outStart || '') + template + ' ' + finishTxt + (this.text.outEnd || '') };
            myEval.call(out, 'this.fn = (function(' + this.text.argNames + '){' + out.out + '});\r\n//# sourceURL=' + name + '.js');
            return out;
        }
    };
    can.view.pending = function (viewData) {
        var hooks = can.view.getHooks();
        return can.view.hook(function (el) {
            can.each(hooks, function (fn) {
                fn(el);
            });
            viewData.templateType = 'legacy';
            if (viewData.tagName) {
                viewCallbacks.tagHandler(el, viewData.tagName, viewData);
            }
            can.each(viewData && viewData.attrs || [], function (attributeName) {
                viewData.attributeName = attributeName;
                var callback = viewCallbacks.attr(attributeName);
                if (callback) {
                    callback(el, viewData);
                }
            });
        });
    };
    can.view.tag('content', function (el, tagData) {
        return tagData.scope;
    });
    can.view.Scanner = Scanner;
    return Scanner;
});
/*lib/can/view/node_lists/node_lists*/
define('lib/can/view/node_lists/node_lists', [
    'can/util/util',
    'can/view/elements'
], function (can) {
    var canExpando = true;
    try {
        document.createTextNode('')._ = 0;
    } catch (ex) {
        canExpando = false;
    }
    var nodeMap = {}, textNodeMap = {}, expando = 'ejs_' + Math.random(), _id = 0, id = function (node, localMap) {
            var _textNodeMap = localMap || textNodeMap;
            var id = readId(node, _textNodeMap);
            if (id) {
                return id;
            } else {
                if (canExpando || node.nodeType !== 3) {
                    ++_id;
                    return node[expando] = (node.nodeName ? 'element_' : 'obj_') + _id;
                } else {
                    ++_id;
                    _textNodeMap['text_' + _id] = node;
                    return 'text_' + _id;
                }
            }
        }, readId = function (node, textNodeMap) {
            if (canExpando || node.nodeType !== 3) {
                return node[expando];
            } else {
                for (var textNodeID in textNodeMap) {
                    if (textNodeMap[textNodeID] === node) {
                        return textNodeID;
                    }
                }
            }
        }, splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements, idMap) {
            var map = {};
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map[id(node, idMap)] = replacements[i];
            }
            return map;
        };
    var nodeLists = {
            id: id,
            update: function (nodeList, newNodes) {
                var oldNodes = nodeLists.unregisterChildren(nodeList);
                newNodes = can.makeArray(newNodes);
                var oldListLength = nodeList.length;
                splice.apply(nodeList, [
                    0,
                    oldListLength
                ].concat(newNodes));
                if (nodeList.replacements) {
                    nodeLists.nestReplacements(nodeList);
                } else {
                    nodeLists.nestList(nodeList);
                }
                return oldNodes;
            },
            nestReplacements: function (list) {
                var index = 0, idMap = {}, rMap = replacementMap(list.replacements, idMap), rCount = list.replacements.length;
                while (index < list.length && rCount) {
                    var node = list[index], replacement = rMap[readId(node, idMap)];
                    if (replacement) {
                        list.splice(index, itemsInChildListTree(replacement), replacement);
                        rCount--;
                    }
                    index++;
                }
                list.replacements = [];
            },
            nestList: function (list) {
                var index = 0;
                while (index < list.length) {
                    var node = list[index], childNodeList = nodeMap[id(node)];
                    if (childNodeList) {
                        if (childNodeList !== list) {
                            list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                        }
                    } else {
                        nodeMap[id(node)] = list;
                    }
                    index++;
                }
            },
            last: function (nodeList) {
                var last = nodeList[nodeList.length - 1];
                if (last.nodeType) {
                    return last;
                } else {
                    return nodeLists.last(last);
                }
            },
            first: function (nodeList) {
                var first = nodeList[0];
                if (first.nodeType) {
                    return first;
                } else {
                    return nodeLists.first(first);
                }
            },
            flatten: function (nodeList) {
                var items = [];
                for (var i = 0; i < nodeList.length; i++) {
                    var item = nodeList[i];
                    if (item.nodeType) {
                        items.push(item);
                    } else {
                        items.push.apply(items, nodeLists.flatten(item));
                    }
                }
                return items;
            },
            register: function (nodeList, unregistered, parent) {
                nodeList.unregistered = unregistered;
                nodeList.parentList = parent;
                if (parent === true) {
                    nodeList.replacements = [];
                } else if (parent) {
                    parent.replacements.push(nodeList);
                    nodeList.replacements = [];
                } else {
                    nodeLists.nestList(nodeList);
                }
                return nodeList;
            },
            unregisterChildren: function (nodeList) {
                var nodes = [];
                can.each(nodeList, function (node) {
                    if (node.nodeType) {
                        if (!nodeList.replacements) {
                            delete nodeMap[id(node)];
                        }
                        nodes.push(node);
                    } else {
                        push.apply(nodes, nodeLists.unregister(node));
                    }
                });
                return nodes;
            },
            unregister: function (nodeList) {
                var nodes = nodeLists.unregisterChildren(nodeList);
                if (nodeList.unregistered) {
                    var unregisteredCallback = nodeList.unregistered;
                    delete nodeList.unregistered;
                    delete nodeList.replacements;
                    unregisteredCallback();
                }
                return nodes;
            },
            nodeMap: nodeMap
        };
    can.view.nodeLists = nodeLists;
    return nodeLists;
});
/*lib/can/view/parser/parser*/
define('lib/can/view/parser/parser', ['can/view/view'], function (can) {
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        for (var i = 0; i < items.length; i++) {
            obj[items[i]] = true;
        }
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    var alphaNumericHU = '-:A-Za-z0-9_', attributeNames = '[a-zA-Z_:][' + alphaNumericHU + ':.]*', spaceEQspace = '\\s*=\\s*', dblQuote2dblQuote = '"((?:\\\\.|[^"])*)"', quote2quote = '\'((?:\\\\.|[^\'])*)\'', attributeEqAndValue = '(?:' + spaceEQspace + '(?:' + '(?:"[^"]*")|(?:\'[^\']*\')|[^>\\s]+))?', matchStash = '\\{\\{[^\\}]*\\}\\}\\}?', stash = '\\{\\{([^\\}]*)\\}\\}\\}?', startTag = new RegExp('^<([' + alphaNumericHU + ']+)' + '(' + '(?:\\s*' + '(?:(?:' + '(?:' + attributeNames + ')?' + attributeEqAndValue + ')|' + '(?:' + matchStash + ')+)' + ')*' + ')\\s*(\\/?)>'), endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), attr = new RegExp('(?:' + '(?:(' + attributeNames + ')|' + stash + ')' + '(?:' + spaceEQspace + '(?:' + '(?:' + dblQuote2dblQuote + ')|(?:' + quote2quote + ')|([^>\\s]+)' + ')' + ')?)', 'g'), mustache = new RegExp(stash, 'g'), txtBreak = /<|\{\{/;
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var block = makeMap('a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video');
    var inline = makeMap('abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');
    var special = makeMap('script,style');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            can.each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        intermediate.push({
                            tokenType: name,
                            args: can.makeArray(arguments)
                        });
                    }
                };
            });
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = tagName.toLowerCase();
            if (block[tagName]) {
                while (stack.last() && inline[stack.last()]) {
                    parseEndTag('', stack.last());
                }
            }
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler);
            handler.end(tagName, unary);
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i]);
                    }
                }
                stack.length = pos;
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside);
            }
        }
        var index, chars, match, stack = [], last = html;
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        if (handler.comment) {
                            handler.comment(html.substring(4, index));
                        }
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(endTag, parseEndTag);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    match = html.match(startTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(startTag, parseStartTag);
                        chars = false;
                    }
                } else if (html.indexOf('{{') === 0) {
                    match = html.match(mustache);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(mustache, parseMustache);
                    }
                }
                if (chars) {
                    index = html.search(txtBreak);
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (handler.chars && text) {
                        handler.chars(text);
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text);
                    }
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        parseEndTag();
        handler.done();
        return intermediate;
    };
    HTMLParser.parseAttrs = function (rest, handler) {
        (rest != null ? rest : '').replace(attr, function (text, name, special, dblQuote, singleQuote, val) {
            if (special) {
                handler.special(special);
            }
            if (name || dblQuote || singleQuote || val) {
                var value = arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : arguments[5] ? arguments[5] : fillAttrs[name.toLowerCase()] ? name : '';
                handler.attrStart(name || '');
                var last = mustache.lastIndex = 0, res = mustache.exec(value), chars;
                while (res) {
                    chars = value.substring(last, mustache.lastIndex - res[0].length);
                    if (chars.length) {
                        handler.attrValue(chars);
                    }
                    handler.special(res[1]);
                    last = mustache.lastIndex;
                    res = mustache.exec(value);
                }
                chars = value.substr(last, value.length);
                if (chars) {
                    handler.attrValue(chars);
                }
                handler.attrEnd(name || '');
            }
        });
    };
    can.view.parser = HTMLParser;
    return HTMLParser;
});
/*lib/can/view/live/live*/
define('lib/can/view/live/live', [
    'can/util/util',
    'can/view/elements',
    'can/view/view',
    'can/view/node_lists/node_lists',
    'can/view/parser/parser'
], function (can, elements, view, nodeLists, parser) {
    elements = elements || can.view.elements;
    nodeLists = nodeLists || can.view.NodeLists;
    parser = parser || can.view.parser;
    var setup = function (el, bind, unbind) {
            var tornDown = false, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        can.unbind.call(el, 'removed', teardown);
                    }
                    return true;
                }, data = {
                    teardownCheck: function (parent) {
                        return parent ? false : teardown();
                    }
                };
            can.bind.call(el, 'removed', teardown);
            bind(data);
            return data;
        }, listen = function (el, compute, change) {
            return setup(el, function () {
                compute.bind('change', change);
            }, function (data) {
                compute.unbind('change', change);
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        }, getAttributeParts = function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        }, splice = [].splice, isNode = function (obj) {
            return obj && obj.nodeType;
        }, addTextNodeIfNoChildren = function (frag) {
            if (!frag.childNodes.length) {
                frag.appendChild(document.createTextNode(''));
            }
        };
    var live = {
            list: function (el, compute, render, context, parentNode, nodeList) {
                var masterNodeList = nodeList || [el], indexMap = [], afterPreviousEvents = false, isTornDown = false, add = function (ev, items, index) {
                        if (!afterPreviousEvents) {
                            return;
                        }
                        var frag = document.createDocumentFragment(), newNodeLists = [], newIndicies = [];
                        can.each(items, function (item, key) {
                            var itemNodeList = [];
                            if (nodeList) {
                                nodeLists.register(itemNodeList, null, true);
                            }
                            var itemIndex = can.compute(key + index), itemHTML = render.call(context, item, itemIndex, itemNodeList), gotText = typeof itemHTML === 'string', itemFrag = can.frag(itemHTML);
                            itemFrag = gotText ? can.view.hookup(itemFrag) : itemFrag;
                            var childNodes = can.makeArray(itemFrag.childNodes);
                            if (nodeList) {
                                nodeLists.update(itemNodeList, childNodes);
                                newNodeLists.push(itemNodeList);
                            } else {
                                newNodeLists.push(nodeLists.register(childNodes));
                            }
                            frag.appendChild(itemFrag);
                            newIndicies.push(itemIndex);
                        });
                        var masterListIndex = index + 1;
                        if (!masterNodeList[masterListIndex]) {
                            elements.after(masterListIndex === 1 ? [text] : [nodeLists.last(masterNodeList[masterListIndex - 1])], frag);
                        } else {
                            var el = nodeLists.first(masterNodeList[masterListIndex]);
                            can.insertBefore(el.parentNode, frag, el);
                        }
                        splice.apply(masterNodeList, [
                            masterListIndex,
                            0
                        ].concat(newNodeLists));
                        splice.apply(indexMap, [
                            index,
                            0
                        ].concat(newIndicies));
                        for (var i = index + newIndicies.length, len = indexMap.length; i < len; i++) {
                            indexMap[i](i);
                        }
                    }, remove = function (ev, items, index, duringTeardown, fullTeardown) {
                        if (!afterPreviousEvents) {
                            return;
                        }
                        if (!duringTeardown && data.teardownCheck(text.parentNode)) {
                            return;
                        }
                        if (index < 0) {
                            index = indexMap.length + index;
                        }
                        var removedMappings = masterNodeList.splice(index + 1, items.length), itemsToRemove = [];
                        can.each(removedMappings, function (nodeList) {
                            var nodesToRemove = nodeLists.unregister(nodeList);
                            [].push.apply(itemsToRemove, nodesToRemove);
                        });
                        indexMap.splice(index, items.length);
                        for (var i = index, len = indexMap.length; i < len; i++) {
                            indexMap[i](i);
                        }
                        if (!fullTeardown) {
                            can.remove(can.$(itemsToRemove));
                        } else {
                            nodeLists.unregister(masterNodeList);
                        }
                    }, move = function (ev, item, newIndex, currentIndex) {
                        if (!afterPreviousEvents) {
                            return;
                        }
                        newIndex = newIndex + 1;
                        currentIndex = currentIndex + 1;
                        var referenceNodeList = masterNodeList[newIndex];
                        var movedElements = can.frag(nodeLists.flatten(masterNodeList[currentIndex]));
                        var referenceElement;
                        if (currentIndex < newIndex) {
                            referenceElement = nodeLists.last(referenceNodeList).nextSibling;
                        } else {
                            referenceElement = nodeLists.first(referenceNodeList);
                        }
                        var parentNode = masterNodeList[0].parentNode;
                        parentNode.insertBefore(movedElements, referenceElement);
                        var temp = masterNodeList[currentIndex];
                        [].splice.apply(masterNodeList, [
                            currentIndex,
                            1
                        ]);
                        [].splice.apply(masterNodeList, [
                            newIndex,
                            0,
                            temp
                        ]);
                    }, text = document.createTextNode(''), list, teardownList = function (fullTeardown) {
                        if (list && list.unbind) {
                            list.unbind('add', add).unbind('remove', remove).unbind('move', move);
                        }
                        remove({}, { length: masterNodeList.length - 1 }, 0, true, fullTeardown);
                    }, updateList = function (ev, newList, oldList) {
                        if (isTornDown) {
                            return;
                        }
                        teardownList();
                        list = newList || [];
                        if (list.bind) {
                            list.bind('add', add).bind('remove', remove).bind('move', move);
                        }
                        afterPreviousEvents = true;
                        add({}, list, 0);
                        afterPreviousEvents = false;
                        can.batch.afterPreviousEvents(function () {
                            afterPreviousEvents = true;
                        });
                    };
                parentNode = elements.getParentNode(el, parentNode);
                var data = setup(parentNode, function () {
                        if (can.isFunction(compute)) {
                            compute.bind('change', updateList);
                        }
                    }, function () {
                        if (can.isFunction(compute)) {
                            compute.unbind('change', updateList);
                        }
                        teardownList(true);
                    });
                if (!nodeList) {
                    live.replace(masterNodeList, text, data.teardownCheck);
                } else {
                    elements.replace(masterNodeList, text);
                    nodeLists.update(masterNodeList, [text]);
                    nodeList.unregistered = function () {
                        data.teardownCheck();
                        isTornDown = true;
                    };
                }
                updateList({}, can.isFunction(compute) ? compute() : compute);
            },
            html: function (el, compute, parentNode, nodeList) {
                var data;
                parentNode = elements.getParentNode(el, parentNode);
                data = listen(parentNode, compute, function (ev, newVal, oldVal) {
                    var attached = nodeLists.first(nodes).parentNode;
                    if (attached) {
                        makeAndPut(newVal);
                    }
                    data.teardownCheck(nodeLists.first(nodes).parentNode);
                });
                var nodes = nodeList || [el], makeAndPut = function (val) {
                        var isFunction = typeof val === 'function', aNode = isNode(val), frag = can.frag(isFunction ? '' : val), oldNodes = can.makeArray(nodes);
                        addTextNodeIfNoChildren(frag);
                        if (!aNode && !isFunction) {
                            frag = can.view.hookup(frag, parentNode);
                        }
                        oldNodes = nodeLists.update(nodes, frag.childNodes);
                        if (isFunction) {
                            val(frag.childNodes[0]);
                        }
                        elements.replace(oldNodes, frag);
                    };
                data.nodeList = nodes;
                if (!nodeList) {
                    nodeLists.register(nodes, data.teardownCheck);
                } else {
                    nodeList.unregistered = data.teardownCheck;
                }
                makeAndPut(compute());
            },
            replace: function (nodes, val, teardown) {
                var oldNodes = nodes.slice(0), frag = can.frag(val);
                nodeLists.register(nodes, teardown);
                if (typeof val === 'string') {
                    frag = can.view.hookup(frag, nodes[0].parentNode);
                }
                nodeLists.update(nodes, frag.childNodes);
                elements.replace(oldNodes, frag);
                return nodes;
            },
            text: function (el, compute, parentNode, nodeList) {
                var parent = elements.getParentNode(el, parentNode);
                var data = listen(parent, compute, function (ev, newVal, oldVal) {
                        if (typeof node.nodeValue !== 'unknown') {
                            node.nodeValue = can.view.toStr(newVal);
                        }
                        data.teardownCheck(node.parentNode);
                    });
                var node = document.createTextNode(can.view.toStr(compute()));
                if (nodeList) {
                    nodeList.unregistered = data.teardownCheck;
                    data.nodeList = nodeList;
                    nodeLists.update(nodeList, [node]);
                    elements.replace([el], node);
                } else {
                    data.nodeList = live.replace([el], node, data.teardownCheck);
                }
            },
            setAttributes: function (el, newVal) {
                var attrs = getAttributeParts(newVal);
                for (var name in attrs) {
                    can.attr.set(el, name, attrs[name]);
                }
            },
            attributes: function (el, compute, currentValue) {
                var oldAttrs = {};
                var setAttrs = function (newVal) {
                    var newAttrs = getAttributeParts(newVal), name;
                    for (name in newAttrs) {
                        var newValue = newAttrs[name], oldValue = oldAttrs[name];
                        if (newValue !== oldValue) {
                            can.attr.set(el, name, newValue);
                        }
                        delete oldAttrs[name];
                    }
                    for (name in oldAttrs) {
                        elements.removeAttr(el, name);
                    }
                    oldAttrs = newAttrs;
                };
                listen(el, compute, function (ev, newVal) {
                    setAttrs(newVal);
                });
                if (arguments.length >= 3) {
                    oldAttrs = getAttributeParts(currentValue);
                } else {
                    setAttrs(compute());
                }
            },
            attributePlaceholder: '__!!__',
            attributeReplace: /__!!__/g,
            attribute: function (el, attributeName, compute) {
                listen(el, compute, function (ev, newVal) {
                    elements.setAttr(el, attributeName, hook.render());
                });
                var wrapped = can.$(el), hooks;
                hooks = can.data(wrapped, 'hooks');
                if (!hooks) {
                    can.data(wrapped, 'hooks', hooks = {});
                }
                var attr = String(elements.getAttr(el, attributeName)), parts = attr.split(live.attributePlaceholder), goodParts = [], hook;
                goodParts.push(parts.shift(), parts.join(live.attributePlaceholder));
                if (hooks[attributeName]) {
                    hooks[attributeName].computes.push(compute);
                } else {
                    hooks[attributeName] = {
                        render: function () {
                            var i = 0, newAttr = attr ? attr.replace(live.attributeReplace, function () {
                                    return elements.contentText(hook.computes[i++]());
                                }) : elements.contentText(hook.computes[i++]());
                            return newAttr;
                        },
                        computes: [compute],
                        batchNum: undefined
                    };
                }
                hook = hooks[attributeName];
                goodParts.splice(1, 0, compute());
                elements.setAttr(el, attributeName, goodParts.join(''));
            },
            specialAttribute: function (el, attributeName, compute) {
                listen(el, compute, function (ev, newVal) {
                    elements.setAttr(el, attributeName, getValue(newVal));
                });
                elements.setAttr(el, attributeName, getValue(compute()));
            },
            simpleAttribute: function (el, attributeName, compute) {
                listen(el, compute, function (ev, newVal) {
                    elements.setAttr(el, attributeName, newVal);
                });
                elements.setAttr(el, attributeName, compute());
            }
        };
    live.attr = live.simpleAttribute;
    live.attrs = live.attributes;
    live.getAttributeParts = getAttributeParts;
    var newLine = /(\r|\n)+/g;
    var getValue = function (val) {
        var regexp = /^["'].*["']$/;
        val = val.replace(elements.attrReg, '').replace(newLine, '');
        return regexp.test(val) ? val.substr(1, val.length - 2) : val;
    };
    can.view.live = live;
    return live;
});
/*lib/can/view/render*/
define('lib/can/view/render', [
    'can/view/view',
    './elements',
    'can/view/live/live',
    'can/util/string/string'
], function (can, elements, live) {
    var pendingHookups = [], tagChildren = function (tagName) {
            var newTag = elements.tagMap[tagName] || 'span';
            if (newTag === 'span') {
                return '@@!!@@';
            }
            return '<' + newTag + '>' + tagChildren(newTag) + '</' + newTag + '>';
        }, contentText = function (input, tag) {
            if (typeof input === 'string') {
                return input;
            }
            if (!input && input !== 0) {
                return '';
            }
            var hook = input.hookup && function (el, id) {
                    input.hookup.call(input, el, id);
                } || typeof input === 'function' && input;
            if (hook) {
                if (tag) {
                    return '<' + tag + ' ' + can.view.hook(hook) + '></' + tag + '>';
                } else {
                    pendingHookups.push(hook);
                }
                return '';
            }
            return '' + input;
        }, contentEscape = function (txt, tag) {
            return typeof txt === 'string' || typeof txt === 'number' ? can.esc(txt) : contentText(txt, tag);
        }, withinTemplatedSectionWithinAnElement = false, emptyHandler = function () {
        };
    var lastHookups;
    can.extend(can.view, {
        live: live,
        setupLists: function () {
            var old = can.view.lists, data;
            can.view.lists = function (list, renderer) {
                data = {
                    list: list,
                    renderer: renderer
                };
                return Math.random();
            };
            return function () {
                can.view.lists = old;
                return data;
            };
        },
        getHooks: function () {
            var hooks = pendingHookups.slice(0);
            lastHookups = hooks;
            pendingHookups = [];
            return hooks;
        },
        onlytxt: function (self, func) {
            return contentEscape(func.call(self));
        },
        txt: function (escape, tagName, status, self, func) {
            var tag = elements.tagMap[tagName] || 'span', setupLiveBinding = false, value, listData, compute, unbind = emptyHandler, attributeName;
            if (withinTemplatedSectionWithinAnElement) {
                value = func.call(self);
            } else {
                if (typeof status === 'string' || status === 1) {
                    withinTemplatedSectionWithinAnElement = true;
                }
                var listTeardown = can.view.setupLists();
                unbind = function () {
                    compute.unbind('change', emptyHandler);
                };
                compute = can.compute(func, self, false);
                compute.bind('change', emptyHandler);
                listData = listTeardown();
                value = compute();
                withinTemplatedSectionWithinAnElement = false;
                setupLiveBinding = compute.computeInstance.hasDependencies;
            }
            if (listData) {
                unbind();
                return '<' + tag + can.view.hook(function (el, parentNode) {
                    live.list(el, listData.list, listData.renderer, self, parentNode);
                }) + '></' + tag + '>';
            }
            if (!setupLiveBinding || typeof value === 'function') {
                unbind();
                return (withinTemplatedSectionWithinAnElement || escape === 2 || !escape ? contentText : contentEscape)(value, status === 0 && tag);
            }
            var contentProp = elements.tagToContentPropMap[tagName];
            if (status === 0 && !contentProp) {
                return '<' + tag + can.view.hook(escape && typeof value !== 'object' ? function (el, parentNode) {
                    live.text(el, compute, parentNode);
                    unbind();
                } : function (el, parentNode) {
                    live.html(el, compute, parentNode);
                    unbind();
                }) + '>' + tagChildren(tag) + '</' + tag + '>';
            } else if (status === 1) {
                pendingHookups.push(function (el) {
                    live.attributes(el, compute, compute());
                    unbind();
                });
                return compute();
            } else if (escape === 2) {
                attributeName = status;
                pendingHookups.push(function (el) {
                    live.specialAttribute(el, attributeName, compute);
                    unbind();
                });
                return compute();
            } else {
                attributeName = status === 0 ? contentProp : status;
                (status === 0 ? lastHookups : pendingHookups).push(function (el) {
                    live.attribute(el, attributeName, compute);
                    unbind();
                });
                return live.attributePlaceholder;
            }
        }
    });
    return can;
});
/*lib/can/view/stache/utils*/
define('lib/can/view/stache/utils', ['can/util/util'], function () {
    return {
        isArrayLike: function (obj) {
            return obj && obj.splice && typeof obj.length === 'number';
        },
        isObserveLike: function (obj) {
            return obj instanceof can.Map || obj && !!obj._get;
        },
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else if (can.global.JSON) {
                return JSON.parse(str);
            } else {
                return eval('(' + str + ')');
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        }
    };
});
/*lib/can/view/stache/mustache_helpers*/
define('lib/can/view/stache/mustache_helpers', [
    'can/util/util',
    './utils',
    'can/view/live/live'
], function (can, utils, live) {
    live = live || can.view.live;
    var resolve = function (value) {
        if (utils.isObserveLike(value) && utils.isArrayLike(value) && value.attr('length')) {
            return value;
        } else if (can.isFunction(value)) {
            return value();
        } else {
            return value;
        }
    };
    var helpers = {
            'each': function (items, options) {
                var resolved = resolve(items), result = [], keys, key, i;
                if (resolved instanceof can.List) {
                    return function (el) {
                        var nodeList = [el];
                        nodeList.expression = 'live.list';
                        can.view.nodeLists.register(nodeList, null, options.nodeList);
                        can.view.nodeLists.update(options.nodeList, [el]);
                        var cb = function (item, index, parentNodeList) {
                            return options.fn(options.scope.add({ '@index': index }).add(item), options.options, parentNodeList);
                        };
                        live.list(el, items, cb, options.context, el.parentNode, nodeList);
                    };
                }
                var expr = resolved;
                if (!!expr && utils.isArrayLike(expr)) {
                    for (i = 0; i < expr.length; i++) {
                        result.push(options.fn(options.scope.add({ '@index': i }).add(expr[i])));
                    }
                } else if (utils.isObserveLike(expr)) {
                    keys = can.Map.keys(expr);
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                    }
                } else if (expr instanceof Object) {
                    for (key in expr) {
                        result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                    }
                }
                return result;
            },
            '@index': function (offset, options) {
                if (!options) {
                    options = offset;
                    offset = 0;
                }
                var index = options.scope.attr('@index');
                return '' + ((can.isFunction(index) ? index() : index) + offset);
            },
            'if': function (expr, options) {
                var value;
                if (can.isFunction(expr)) {
                    value = can.compute.truthy(expr)();
                } else {
                    value = !!resolve(expr);
                }
                if (value) {
                    return options.fn(options.scope || this);
                } else {
                    return options.inverse(options.scope || this);
                }
            },
            'is': function () {
                var lastValue, curValue, options = arguments[arguments.length - 1];
                if (arguments.length - 2 <= 0) {
                    return options.inverse();
                }
                for (var i = 0; i < arguments.length - 1; i++) {
                    curValue = resolve(arguments[i]);
                    curValue = can.isFunction(curValue) ? curValue() : curValue;
                    if (i > 0) {
                        if (curValue !== lastValue) {
                            return options.inverse();
                        }
                    }
                    lastValue = curValue;
                }
                return options.fn();
            },
            'eq': function () {
                return helpers.is.apply(this, arguments);
            },
            'unless': function (expr, options) {
                return helpers['if'].apply(this, [
                    can.isFunction(expr) ? can.compute(function () {
                        return !expr();
                    }) : !expr,
                    options
                ]);
            },
            'with': function (expr, options) {
                var ctx = expr;
                expr = resolve(expr);
                if (!!expr) {
                    return options.fn(ctx);
                }
            },
            'log': function (expr, options) {
                if (typeof console !== 'undefined' && console.log) {
                    if (!options) {
                        console.log(expr.context);
                    } else {
                        console.log(expr, options.context);
                    }
                }
            },
            'data': function (attr) {
                var data = arguments.length === 2 ? this : arguments[1];
                return function (el) {
                    can.data(can.$(el), attr, data || this.context);
                };
            }
        };
    return {
        registerHelper: function (name, callback) {
            helpers[name] = callback;
        },
        getHelper: function (name, options) {
            var helper = options.attr('helpers.' + name);
            if (!helper) {
                helper = helpers[name];
            }
            if (helper) {
                return { fn: helper };
            }
        }
    };
});
/*lib/can/view/stache/mustache_core*/
define('lib/can/view/stache/mustache_core', [
    'can/util/util',
    './utils',
    './mustache_helpers',
    'can/view/live/live',
    'can/view/elements',
    'can/view/scope/scope',
    'can/view/node_lists/node_lists'
], function (can, utils, mustacheHelpers, live, elements, Scope, nodeLists) {
    live = live || can.view.live;
    elements = elements || can.view.elements;
    Scope = Scope || can.view.Scope;
    nodeLists = nodeLists || can.view.nodeLists;
    var argumentsRegExp = /((([^'"\s]+?=)?('.*?'|".*?"))|.*?)\s/g, literalNumberStringBooleanRegExp = /^(?:(?:('.*?'|".*?")|([0-9]+\.?[0-9]*|true|false|null|undefined))|(?:(.+?)=(?:(?:('.*?'|".*?")|([0-9]+\.?[0-9]*|true|false|null|undefined))|(.+))))$/, mustacheLineBreakRegExp = /(?:(?:^|(\r?)\n)(\s*)(\{\{([^\}]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([^\}]*)\}\}\}?)/g, isLookup = function (obj) {
            return obj && typeof obj.get === 'string';
        }, getItemsFragContent = function (items, isObserveList, helperOptions, options) {
            var frag = document.createDocumentFragment();
            for (var i = 0, len = items.length; i < len; i++) {
                append(frag, helperOptions.fn(isObserveList ? items.attr('' + i) : items[i], options));
            }
            return frag;
        }, append = function (frag, content) {
            if (content) {
                frag.appendChild(typeof content === 'string' ? document.createTextNode(content) : content);
            }
        }, getItemsStringContent = function (items, isObserveList, helperOptions, options) {
            var txt = '';
            for (var i = 0, len = items.length; i < len; i++) {
                txt += helperOptions.fn(isObserveList ? items.attr('' + i) : items[i], options);
            }
            return txt;
        }, getKeyComputeData = function (key, scope, isArgument) {
            var data = scope.computeData(key, {
                    isArgument: isArgument,
                    args: [
                        scope.attr('.'),
                        scope
                    ]
                });
            can.compute.temporarilyBind(data.compute);
            return data;
        }, getKeyArgValue = function (key, scope) {
            var data = getKeyComputeData(key, scope, true);
            if (!data.compute.computeInstance.hasDependencies) {
                return data.initialValue;
            } else {
                return data.compute;
            }
        }, convertToScopes = function (helperOptions, scope, options, nodeList, truthyRenderer, falseyRenderer) {
            if (truthyRenderer) {
                helperOptions.fn = makeRendererConvertScopes(truthyRenderer, scope, options, nodeList);
            }
            if (falseyRenderer) {
                helperOptions.inverse = makeRendererConvertScopes(falseyRenderer, scope, options, nodeList);
            }
        }, makeRendererConvertScopes = function (renderer, parentScope, parentOptions, nodeList) {
            var rendererWithScope = function (ctx, opts, parentNodeList) {
                return renderer(ctx || parentScope, opts, parentNodeList);
            };
            return can.__notObserve(function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof can.view.Scope)) {
                    newScope = parentScope.add(newScope);
                }
                if (newOptions !== undefined && !(newOptions instanceof core.Options)) {
                    newOptions = parentOptions.add(newOptions);
                }
                var result = rendererWithScope(newScope, newOptions || parentOptions, parentNodeList || nodeList);
                return result;
            });
        };
    var core = {
            expressionData: function (expression) {
                var args = [], hashes = {}, i = 0;
                (can.trim(expression) + ' ').replace(argumentsRegExp, function (whole, arg) {
                    var m;
                    if (i && (m = arg.match(literalNumberStringBooleanRegExp))) {
                        if (m[1] || m[2]) {
                            args.push(utils.jsonParse(m[1] || m[2]));
                        } else {
                            hashes[m[3]] = m[6] ? { get: m[6] } : utils.jsonParse(m[4] || m[5]);
                        }
                    } else {
                        args.push({ get: arg });
                    }
                    i++;
                });
                return {
                    name: args.shift(),
                    args: args,
                    hash: hashes
                };
            },
            makeEvaluator: function (scope, options, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly) {
                var args = [], hash = {}, helperOptions = {
                        fn: function () {
                        },
                        inverse: function () {
                        }
                    }, context = scope.attr('.'), name = exprData.name, helper, looksLikeAHelper = exprData.args.length || !can.isEmptyObject(exprData.hash), initialValue, helperEvaluator;
                for (var i = 0, len = exprData.args.length; i < len; i++) {
                    var arg = exprData.args[i];
                    if (arg && isLookup(arg)) {
                        args.push(getKeyArgValue(arg.get, scope, true));
                    } else {
                        args.push(arg);
                    }
                }
                for (var prop in exprData.hash) {
                    if (isLookup(exprData.hash[prop])) {
                        hash[prop] = getKeyArgValue(exprData.hash[prop].get, scope);
                    } else {
                        hash[prop] = exprData.hash[prop];
                    }
                }
                if (isLookup(name)) {
                    if (looksLikeAHelper) {
                        helper = mustacheHelpers.getHelper(name.get, options);
                        if (!helper && typeof context[name.get] === 'function') {
                            helper = { fn: context[name.get] };
                        }
                    }
                    if (!helper) {
                        var get = name.get;
                        var computeData = getKeyComputeData(name.get, scope, false), compute = computeData.compute;
                        initialValue = computeData.initialValue;
                        if (computeData.compute.computeInstance.hasDependencies) {
                            name = compute;
                        } else {
                            name = initialValue;
                        }
                        if (!looksLikeAHelper && initialValue === undefined) {
                            helper = mustacheHelpers.getHelper(get, options);
                        } else if (typeof initialValue === 'function') {
                            helper = { fn: initialValue };
                        }
                    }
                }
                if (mode === '^') {
                    var temp = truthyRenderer;
                    truthyRenderer = falseyRenderer;
                    falseyRenderer = temp;
                }
                if (helper) {
                    convertToScopes(helperOptions, scope, options, nodeList, truthyRenderer, falseyRenderer);
                    can.simpleExtend(helperOptions, {
                        context: context,
                        scope: scope,
                        contexts: scope,
                        hash: hash,
                        nodeList: nodeList,
                        exprData: exprData
                    });
                    args.push(helperOptions);
                    helperEvaluator = function () {
                        return helper.fn.apply(context, args) || '';
                    };
                    helperEvaluator.bindOnce = false;
                    return helperEvaluator;
                }
                if (!mode) {
                    if (name && name.isComputed) {
                        return name;
                    } else {
                        return function () {
                            return '' + (name != null ? name : '');
                        };
                    }
                } else if (mode === '#' || mode === '^') {
                    convertToScopes(helperOptions, scope, options, nodeList, truthyRenderer, falseyRenderer);
                    var evaluator = function () {
                        var value;
                        if (can.isFunction(name) && name.isComputed) {
                            value = name();
                        } else {
                            value = name;
                        }
                        if (utils.isArrayLike(value)) {
                            var isObserveList = utils.isObserveLike(value);
                            if (isObserveList ? value.attr('length') : value.length) {
                                return (stringOnly ? getItemsStringContent : getItemsFragContent)(value, isObserveList, helperOptions, options);
                            } else {
                                return helperOptions.inverse(scope, options);
                            }
                        } else {
                            return value ? helperOptions.fn(value || scope, options) : helperOptions.inverse(scope, options);
                        }
                    };
                    evaluator.bindOnce = false;
                    return evaluator;
                } else {
                }
            },
            makeLiveBindingPartialRenderer: function (partialName, state) {
                partialName = can.trim(partialName);
                return function (scope, options, parentSectionNodeList) {
                    var nodeList = [this];
                    nodeList.expression = '>' + partialName;
                    nodeLists.register(nodeList, null, state.directlyNested ? parentSectionNodeList || true : true);
                    var partialFrag = can.compute(function () {
                            var localPartialName = partialName;
                            var partial = options.attr('partials.' + localPartialName), res;
                            if (partial) {
                                res = partial.render ? partial.render(scope, options) : partial(scope, options);
                            } else {
                                var scopePartialName = scope.read(localPartialName, {
                                        isArgument: true,
                                        returnObserveMethods: true,
                                        proxyMethods: false
                                    }).value;
                                if (scopePartialName) {
                                    localPartialName = scopePartialName;
                                }
                                res = can.view.render(localPartialName, scope, options);
                            }
                            return can.frag(res);
                        });
                    live.html(this, partialFrag, this.parentNode, nodeList);
                };
            },
            makeStringBranchRenderer: function (mode, expression) {
                var exprData = expressionData(expression), fullExpression = mode + expression;
                return function branchRenderer(scope, options, truthyRenderer, falseyRenderer) {
                    var evaluator = scope.__cache[fullExpression];
                    if (mode || !evaluator) {
                        evaluator = makeEvaluator(scope, options, null, mode, exprData, truthyRenderer, falseyRenderer, true);
                        if (!mode) {
                            scope.__cache[fullExpression] = evaluator;
                        }
                    }
                    var res = evaluator();
                    return res == null ? '' : '' + res;
                };
            },
            makeLiveBindingBranchRenderer: function (mode, expression, state) {
                var exprData = expressionData(expression);
                return function branchRenderer(scope, options, parentSectionNodeList, truthyRenderer, falseyRenderer) {
                    var nodeList = [this];
                    nodeList.expression = expression;
                    nodeLists.register(nodeList, null, state.directlyNested ? parentSectionNodeList || true : true);
                    var evaluator = makeEvaluator(scope, options, nodeList, mode, exprData, truthyRenderer, falseyRenderer, state.tag);
                    var compute = can.compute(evaluator, null, false, evaluator.bindOnce === false ? false : true);
                    compute.bind('change', can.k);
                    var value = compute();
                    if (typeof value === 'function') {
                        var old = can.__clearObserved();
                        value(this);
                        can.__setObserved(old);
                    } else if (compute.computeInstance.hasDependencies) {
                        if (state.attr) {
                            live.simpleAttribute(this, state.attr, compute);
                        } else if (state.tag) {
                            live.attributes(this, compute);
                        } else if (state.text && typeof value !== 'object') {
                            live.text(this, compute, this.parentNode, nodeList);
                        } else {
                            live.html(this, compute, this.parentNode, nodeList);
                        }
                    } else {
                        if (state.attr) {
                            can.attr.set(this, state.attr, value);
                        } else if (state.tag) {
                            live.setAttributes(this, value);
                        } else if (state.text && typeof value === 'string') {
                            this.nodeValue = value;
                        } else if (value) {
                            elements.replace([this], can.frag(value));
                        }
                    }
                    compute.unbind('change', can.k);
                };
            },
            splitModeFromExpression: function (expression, state) {
                expression = can.trim(expression);
                var mode = expression.charAt(0);
                if ('#/{&^>!'.indexOf(mode) >= 0) {
                    expression = can.trim(expression.substr(1));
                } else {
                    mode = null;
                }
                if (mode === '{' && state.node) {
                    mode = null;
                }
                return {
                    mode: mode,
                    expression: expression
                };
            },
            cleanLineEndings: function (template) {
                return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
                    spaceAfter = spaceAfter || '';
                    returnBefore = returnBefore || '';
                    spaceBefore = spaceBefore || '';
                    var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
                    if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                        return whole;
                    } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                        return special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
                    } else {
                        return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
                    }
                });
            },
            Options: can.view.Scope.extend({
                init: function (data, parent) {
                    if (!data.helpers && !data.partials && !data.tags) {
                        data = { helpers: data };
                    }
                    can.view.Scope.prototype.init.apply(this, arguments);
                }
            })
        };
    var makeEvaluator = core.makeEvaluator, expressionData = core.expressionData, splitModeFromExpression = core.splitModeFromExpression;
    return core;
});
/*lib/can/view/bindings/bindings*/
define('lib/can/view/bindings/bindings', [
    'can/util/util',
    'can/view/stache/mustache_core',
    'can/view/callbacks/callbacks',
    'can/control/control',
    'can/view/scope/scope'
], function (can, mustacheCore) {
    var isContentEditable = function () {
            var values = {
                    '': true,
                    'true': true,
                    'false': false
                };
            var editable = function (el) {
                if (!el || !el.getAttribute) {
                    return;
                }
                var attr = el.getAttribute('contenteditable');
                return values[attr];
            };
            return function (el) {
                var val = editable(el);
                if (typeof val === 'boolean') {
                    return val;
                } else {
                    return !!editable(el.parentNode);
                }
            };
        }(), removeCurly = function (value) {
            if (value[0] === '{' && value[value.length - 1] === '}') {
                return value.substr(1, value.length - 2);
            }
            return value;
        };
    can.view.attr('can-value', function (el, data) {
        var attr = can.trim(removeCurly(el.getAttribute('can-value'))), value = data.scope.computeData(attr, { args: [] }).compute, trueValue, falseValue;
        if (el.nodeName.toLowerCase() === 'input') {
            if (el.type === 'checkbox') {
                if (can.attr.has(el, 'can-true-value')) {
                    trueValue = el.getAttribute('can-true-value');
                } else {
                    trueValue = true;
                }
                if (can.attr.has(el, 'can-false-value')) {
                    falseValue = el.getAttribute('can-false-value');
                } else {
                    falseValue = false;
                }
            }
            if (el.type === 'checkbox' || el.type === 'radio') {
                new Checked(el, {
                    value: value,
                    trueValue: trueValue,
                    falseValue: falseValue
                });
                return;
            }
        }
        if (el.nodeName.toLowerCase() === 'select' && el.multiple) {
            new Multiselect(el, { value: value });
            return;
        }
        if (isContentEditable(el)) {
            new Content(el, { value: value });
            return;
        }
        new Value(el, { value: value });
    });
    var special = {
            enter: function (data, el, original) {
                return {
                    event: 'keyup',
                    handler: function (ev) {
                        if (ev.keyCode === 13) {
                            return original.call(this, ev);
                        }
                    }
                };
            }
        };
    can.view.attr(/can-[\w\.]+/, function (el, data) {
        var attributeName = data.attributeName, event = attributeName.substr('can-'.length), handler = function (ev) {
                var attrVal = el.getAttribute(attributeName);
                if (!attrVal) {
                    return;
                }
                var attrInfo = mustacheCore.expressionData(removeCurly(attrVal));
                var scopeData = data.scope.read(attrInfo.name.get, {
                        returnObserveMethods: true,
                        isArgument: true,
                        executeAnonymousFunctions: true
                    });
                var args = [];
                var $el = can.$(this);
                var viewModel = can.viewModel($el[0]);
                var localScope = data.scope.add({
                        '@element': $el,
                        '@event': ev,
                        '@viewModel': viewModel,
                        '@scope': data.scope,
                        '@context': data.scope._context
                    });
                if (!can.isEmptyObject(attrInfo.hash)) {
                    var hash = {};
                    can.each(attrInfo.hash, function (val, key) {
                        if (val && val.hasOwnProperty('get')) {
                            var s = !val.get.indexOf('@') ? localScope : data.scope;
                            hash[key] = s.read(val.get, {}).value;
                        } else {
                            hash[key] = val;
                        }
                    });
                    args.unshift(hash);
                }
                if (attrInfo.args.length) {
                    var arg;
                    for (var i = attrInfo.args.length - 1; i >= 0; i--) {
                        arg = attrInfo.args[i];
                        if (arg && arg.hasOwnProperty('get')) {
                            var s = !arg.get.indexOf('@') ? localScope : data.scope;
                            args.unshift(s.read(arg.get, {}).value);
                        } else {
                            args.unshift(arg);
                        }
                    }
                }
                if (!args.length) {
                    args = [
                        data.scope._context,
                        $el
                    ].concat(can.makeArray(arguments));
                }
                return scopeData.value.apply(scopeData.parent, args);
            };
        if (special[event]) {
            var specialData = special[event](data, el, handler);
            handler = specialData.handler;
            event = specialData.event;
        }
        can.bind.call(el, event, handler);
        var attributesHandler = function (ev) {
            if (ev.attributeName === attributeName && !this.getAttribute(attributeName)) {
                can.unbind.call(el, event, handler);
                can.unbind.call(el, 'attributes', attributesHandler);
            }
        };
        can.bind.call(el, 'attributes', attributesHandler);
    });
    var Value = can.Control.extend({
            init: function () {
                if (this.element[0].nodeName.toUpperCase() === 'SELECT') {
                    setTimeout(can.proxy(this.set, this), 1);
                } else {
                    this.set();
                }
            },
            '{value} change': 'set',
            set: function () {
                if (!this.element) {
                    return;
                }
                var val = this.options.value();
                if (val == null && this.element[0].nodeName.toUpperCase() !== 'SELECT') {
                    val = '';
                }
                if (val != null) {
                    this.element[0].value = val;
                }
            },
            'change': function () {
                if (!this.element) {
                    return;
                }
                var el = this.element[0];
                this.options.value(el.value);
                var newVal = this.options.value();
                if (el.value !== newVal) {
                    el.value = newVal;
                }
            }
        }), Checked = can.Control.extend({
            init: function () {
                this.isCheckbox = this.element[0].type.toLowerCase() === 'checkbox';
                this.check();
            },
            '{value} change': 'check',
            check: function () {
                if (this.isCheckbox) {
                    var value = this.options.value(), trueValue = this.options.trueValue || true;
                    this.element[0].checked = value == trueValue;
                } else {
                    var setOrRemove = this.options.value() == this.element[0].value ? 'set' : 'remove';
                    can.attr[setOrRemove](this.element[0], 'checked', true);
                }
            },
            'change': function () {
                if (this.isCheckbox) {
                    this.options.value(this.element[0].checked ? this.options.trueValue : this.options.falseValue);
                } else {
                    if (this.element[0].checked) {
                        this.options.value(this.element[0].value);
                    }
                }
            }
        }), Multiselect = Value.extend({
            init: function () {
                this.delimiter = ';';
                setTimeout(can.proxy(this.set, this), 1);
            },
            set: function () {
                var newVal = this.options.value();
                if (typeof newVal === 'string') {
                    newVal = newVal.split(this.delimiter);
                    this.isString = true;
                } else if (newVal) {
                    newVal = can.makeArray(newVal);
                }
                var isSelected = {};
                can.each(newVal, function (val) {
                    isSelected[val] = true;
                });
                can.each(this.element[0].childNodes, function (option) {
                    if (option.value) {
                        option.selected = !!isSelected[option.value];
                    }
                });
            },
            get: function () {
                var values = [], children = this.element[0].childNodes;
                can.each(children, function (child) {
                    if (child.selected && child.value) {
                        values.push(child.value);
                    }
                });
                return values;
            },
            'change': function () {
                var value = this.get(), currentValue = this.options.value();
                if (this.isString || typeof currentValue === 'string') {
                    this.isString = true;
                    this.options.value(value.join(this.delimiter));
                } else if (currentValue instanceof can.List) {
                    currentValue.attr(value, true);
                } else {
                    this.options.value(value);
                }
            }
        }), Content = can.Control.extend({
            init: function () {
                this.set();
                this.on('blur', 'setValue');
            },
            '{value} change': 'set',
            set: function () {
                var val = this.options.value();
                this.element[0].innerHTML = typeof val === 'undefined' ? '' : val;
            },
            setValue: function () {
                this.options.value(this.element[0].innerHTML);
            }
        });
});
/*lib/can/view/mustache/mustache*/
define('lib/can/view/mustache/mustache', [
    'can/util/util',
    'can/view/scope/scope',
    'can/view/view',
    'can/view/scanner',
    'can/compute/compute',
    'can/view/render',
    'can/view/bindings/bindings'
], function (can) {
    can.view.ext = '.mustache';
    var SCOPE = 'scope', HASH = '___h4sh', CONTEXT_OBJ = '{scope:' + SCOPE + ',options:options}', SPECIAL_CONTEXT_OBJ = '{scope:' + SCOPE + ',options:options, special: true}', ARG_NAMES = SCOPE + ',options', argumentsRegExp = /((([^'"\s]+?=)?('.*?'|".*?"))|.*?)\s/g, literalNumberStringBooleanRegExp = /^(('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false|null|undefined)|((.+?)=(('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false)|(.+))))$/, makeLookupLiteral = function (type) {
            return '{get:"' + type.replace(/"/g, '\\"') + '"}';
        }, isLookup = function (obj) {
            return obj && typeof obj.get === 'string';
        }, isObserveLike = function (obj) {
            return obj instanceof can.Map || obj && !!obj._get;
        }, isArrayLike = function (obj) {
            return obj && obj.splice && typeof obj.length === 'number';
        }, makeConvertToScopes = function (original, scope, options) {
            var originalWithScope = function (ctx, opts) {
                return original(ctx || scope, opts);
            };
            return function (updatedScope, updatedOptions) {
                if (updatedScope !== undefined && !(updatedScope instanceof can.view.Scope)) {
                    updatedScope = scope.add(updatedScope);
                }
                if (updatedOptions !== undefined && !(updatedOptions instanceof can.view.Options)) {
                    updatedOptions = options.add(updatedOptions);
                }
                return originalWithScope(updatedScope, updatedOptions || options);
            };
        };
    var Mustache = function (options, helpers) {
        if (this.constructor !== Mustache) {
            var mustache = new Mustache(options);
            return function (data, options) {
                return mustache.render(data, options);
            };
        }
        if (typeof options === 'function') {
            this.template = { fn: options };
            return;
        }
        can.extend(this, options);
        this.template = this.scanner.scan(this.text, this.name);
    };
    can.Mustache = can.global.Mustache = Mustache;
    Mustache.prototype.render = function (data, options) {
        if (!(data instanceof can.view.Scope)) {
            data = new can.view.Scope(data || {});
        }
        if (!(options instanceof can.view.Options)) {
            options = new can.view.Options(options || {});
        }
        options = options || {};
        return this.template.fn.call(data, data, options);
    };
    can.extend(Mustache.prototype, {
        scanner: new can.view.Scanner({
            text: {
                start: '',
                scope: SCOPE,
                options: ',options: options',
                argNames: ARG_NAMES
            },
            tokens: [
                [
                    'returnLeft',
                    '{{{',
                    '{{[{&]'
                ],
                [
                    'commentFull',
                    '{{!}}',
                    '^[\\s\\t]*{{!.+?}}\\n'
                ],
                [
                    'commentLeft',
                    '{{!',
                    '(\\n[\\s\\t]*{{!|{{!)'
                ],
                [
                    'escapeFull',
                    '{{}}',
                    '(^[\\s\\t]*{{[#/^][^}]+?}}\\n|\\n[\\s\\t]*{{[#/^][^}]+?}}\\n|\\n[\\s\\t]*{{[#/^][^}]+?}}$)',
                    function (content) {
                        return {
                            before: /^\n.+?\n$/.test(content) ? '\n' : '',
                            content: content.match(/\{\{(.+?)\}\}/)[1] || ''
                        };
                    }
                ],
                [
                    'escapeLeft',
                    '{{'
                ],
                [
                    'returnRight',
                    '}}}'
                ],
                [
                    'right',
                    '}}'
                ]
            ],
            helpers: [
                {
                    name: /^>[\s]*\w*/,
                    fn: function (content, cmd) {
                        var templateName = can.trim(content.replace(/^>\s?/, '')).replace(/["|']/g, '');
                        return 'can.Mustache.renderPartial(\'' + templateName + '\',' + ARG_NAMES + ')';
                    }
                },
                {
                    name: /^\s*data\s/,
                    fn: function (content, cmd) {
                        var attr = content.match(/["|'](.*)["|']/)[1];
                        return 'can.proxy(function(__){' + 'can.data(can.$(__),\'' + attr + '\', this.attr(\'.\')); }, ' + SCOPE + ')';
                    }
                },
                {
                    name: /\s*\(([\$\w]+)\)\s*->([^\n]*)/,
                    fn: function (content) {
                        var quickFunc = /\s*\(([\$\w]+)\)\s*->([^\n]*)/, parts = content.match(quickFunc);
                        return 'can.proxy(function(__){var ' + parts[1] + '=can.$(__);with(' + SCOPE + '.attr(\'.\')){' + parts[2] + '}}, this);';
                    }
                },
                {
                    name: /^.*$/,
                    fn: function (content, cmd) {
                        var mode = false, result = {
                                content: '',
                                startTxt: false,
                                startOnlyTxt: false,
                                end: false
                            };
                        content = can.trim(content);
                        if (content.length && (mode = content.match(/^([#^/]|else$)/))) {
                            mode = mode[0];
                            switch (mode) {
                            case '#':
                            case '^':
                                if (cmd.specialAttribute) {
                                    result.startOnlyTxt = true;
                                } else {
                                    result.startTxt = true;
                                    result.escaped = 0;
                                }
                                break;
                            case '/':
                                result.end = true;
                                result.content += 'return ___v1ew.join("");}}])';
                                return result;
                            }
                            content = content.substring(1);
                        }
                        if (mode !== 'else') {
                            var args = [], hashes = [], i = 0, m;
                            result.content += 'can.Mustache.txt(\n' + (cmd.specialAttribute ? SPECIAL_CONTEXT_OBJ : CONTEXT_OBJ) + ',\n' + (mode ? '"' + mode + '"' : 'null') + ',';
                            (can.trim(content) + ' ').replace(argumentsRegExp, function (whole, arg) {
                                if (i && (m = arg.match(literalNumberStringBooleanRegExp))) {
                                    if (m[2]) {
                                        args.push(m[0]);
                                    } else {
                                        hashes.push(m[4] + ':' + (m[6] ? m[6] : makeLookupLiteral(m[5])));
                                    }
                                } else {
                                    args.push(makeLookupLiteral(arg));
                                }
                                i++;
                            });
                            result.content += args.join(',');
                            if (hashes.length) {
                                result.content += ',{' + HASH + ':{' + hashes.join(',') + '}}';
                            }
                        }
                        if (mode && mode !== 'else') {
                            result.content += ',[\n\n';
                        }
                        switch (mode) {
                        case '^':
                        case '#':
                            result.content += '{fn:function(' + ARG_NAMES + '){var ___v1ew = [];';
                            break;
                        case 'else':
                            result.content += 'return ___v1ew.join("");}},\n{inverse:function(' + ARG_NAMES + '){\nvar ___v1ew = [];';
                            break;
                        default:
                            result.content += ')';
                            break;
                        }
                        if (!mode) {
                            result.startTxt = true;
                            result.end = true;
                        }
                        return result;
                    }
                }
            ]
        })
    });
    var helpers = can.view.Scanner.prototype.helpers;
    for (var i = 0; i < helpers.length; i++) {
        Mustache.prototype.scanner.helpers.unshift(helpers[i]);
    }
    Mustache.txt = function (scopeAndOptions, mode, name) {
        var scope = scopeAndOptions.scope, options = scopeAndOptions.options, args = [], helperOptions = {
                fn: function () {
                },
                inverse: function () {
                }
            }, hash, context = scope.attr('.'), getHelper = true, helper;
        for (var i = 3; i < arguments.length; i++) {
            var arg = arguments[i];
            if (mode && can.isArray(arg)) {
                helperOptions = can.extend.apply(can, [helperOptions].concat(arg));
            } else if (arg && arg[HASH]) {
                hash = arg[HASH];
                for (var prop in hash) {
                    if (isLookup(hash[prop])) {
                        hash[prop] = Mustache.get(hash[prop].get, scopeAndOptions, false, true);
                    }
                }
            } else if (arg && isLookup(arg)) {
                args.push(Mustache.get(arg.get, scopeAndOptions, false, true, true));
            } else {
                args.push(arg);
            }
        }
        if (isLookup(name)) {
            var get = name.get;
            name = Mustache.get(name.get, scopeAndOptions, args.length, false);
            getHelper = get === name;
        }
        helperOptions.fn = makeConvertToScopes(helperOptions.fn, scope, options);
        helperOptions.inverse = makeConvertToScopes(helperOptions.inverse, scope, options);
        if (mode === '^') {
            var tmp = helperOptions.fn;
            helperOptions.fn = helperOptions.inverse;
            helperOptions.inverse = tmp;
        }
        if (helper = getHelper && (typeof name === 'string' && Mustache.getHelper(name, options)) || can.isFunction(name) && !name.isComputed && { fn: name }) {
            can.extend(helperOptions, {
                context: context,
                scope: scope,
                contexts: scope,
                hash: hash
            });
            args.push(helperOptions);
            return function () {
                return helper.fn.apply(context, args) || '';
            };
        }
        return function () {
            var value;
            if (can.isFunction(name) && name.isComputed) {
                value = name();
            } else {
                value = name;
            }
            var validArgs = args.length ? args : [value], valid = true, result = [], i, argIsObserve, arg;
            if (mode) {
                for (i = 0; i < validArgs.length; i++) {
                    arg = validArgs[i];
                    argIsObserve = typeof arg !== 'undefined' && isObserveLike(arg);
                    if (isArrayLike(arg)) {
                        if (mode === '#') {
                            valid = valid && !!(argIsObserve ? arg.attr('length') : arg.length);
                        } else if (mode === '^') {
                            valid = valid && !(argIsObserve ? arg.attr('length') : arg.length);
                        }
                    } else {
                        valid = mode === '#' ? valid && !!arg : mode === '^' ? valid && !arg : valid;
                    }
                }
            }
            if (valid) {
                if (mode === '#') {
                    if (isArrayLike(value)) {
                        var isObserveList = isObserveLike(value);
                        for (i = 0; i < value.length; i++) {
                            result.push(helperOptions.fn(isObserveList ? value.attr('' + i) : value[i]));
                        }
                        return result.join('');
                    } else {
                        return helperOptions.fn(value || {}) || '';
                    }
                } else if (mode === '^') {
                    return helperOptions.inverse(value || {}) || '';
                } else {
                    return '' + (value != null ? value : '');
                }
            }
            return '';
        };
    };
    Mustache.get = function (key, scopeAndOptions, isHelper, isArgument, isLookup) {
        var context = scopeAndOptions.scope.attr('.'), options = scopeAndOptions.options || {};
        if (isHelper) {
            if (Mustache.getHelper(key, options)) {
                return key;
            }
            if (scopeAndOptions.scope && can.isFunction(context[key])) {
                return context[key];
            }
        }
        var computeData = scopeAndOptions.scope.computeData(key, {
                isArgument: isArgument,
                args: [
                    context,
                    scopeAndOptions.scope
                ]
            }), compute = computeData.compute;
        can.compute.temporarilyBind(compute);
        var initialValue = computeData.initialValue, helperObj = Mustache.getHelper(key, options);
        if (!isLookup && (initialValue === undefined || computeData.scope !== scopeAndOptions.scope) && Mustache.getHelper(key, options)) {
            return key;
        }
        if (!compute.computeInstance.hasDependencies) {
            return initialValue;
        } else {
            return compute;
        }
    };
    Mustache.resolve = function (value) {
        if (isObserveLike(value) && isArrayLike(value) && value.attr('length')) {
            return value;
        } else if (can.isFunction(value)) {
            return value();
        } else {
            return value;
        }
    };
    can.view.Options = can.view.Scope.extend({
        init: function (data, parent) {
            if (!data.helpers && !data.partials && !data.tags) {
                data = { helpers: data };
            }
            can.view.Scope.prototype.init.apply(this, arguments);
        }
    });
    Mustache._helpers = {};
    Mustache.registerHelper = function (name, fn) {
        this._helpers[name] = {
            name: name,
            fn: fn
        };
    };
    Mustache.getHelper = function (name, options) {
        var helper;
        if (options) {
            helper = options.attr('helpers.' + name);
        }
        return helper ? { fn: helper } : this._helpers[name];
    };
    Mustache.render = function (partial, scope, options) {
        if (!can.view.cached[partial]) {
            var reads = can.__clearReading();
            var scopePartialName = scope.attr(partial);
            if (scopePartialName) {
                partial = scopePartialName;
            }
            can.__setReading(reads);
        }
        return can.view.render(partial, scope, options);
    };
    Mustache.safeString = function (str) {
        return {
            toString: function () {
                return str;
            }
        };
    };
    Mustache.renderPartial = function (partialName, scope, options) {
        var partial = options.attr('partials.' + partialName);
        if (partial) {
            return partial.render ? partial.render(scope, options) : partial(scope, options);
        } else {
            return can.Mustache.render(partialName, scope, options);
        }
    };
    can.each({
        'if': function (expr, options) {
            var value;
            if (can.isFunction(expr)) {
                value = can.compute.truthy(expr)();
            } else {
                value = !!Mustache.resolve(expr);
            }
            if (value) {
                return options.fn(options.contexts || this);
            } else {
                return options.inverse(options.contexts || this);
            }
        },
        'is': function () {
            var lastValue, curValue, options = arguments[arguments.length - 1];
            if (arguments.length - 2 <= 0) {
                return options.inverse();
            }
            for (var i = 0; i < arguments.length - 1; i++) {
                curValue = Mustache.resolve(arguments[i]);
                curValue = can.isFunction(curValue) ? curValue() : curValue;
                if (i > 0) {
                    if (curValue !== lastValue) {
                        return options.inverse();
                    }
                }
                lastValue = curValue;
            }
            return options.fn();
        },
        'eq': function () {
            return Mustache._helpers.is.fn.apply(this, arguments);
        },
        'unless': function (expr, options) {
            return Mustache._helpers['if'].fn.apply(this, [
                can.isFunction(expr) ? can.compute(function () {
                    return !expr();
                }) : !expr,
                options
            ]);
        },
        'each': function (expr, options) {
            var resolved = Mustache.resolve(expr), result = [], keys, key, i;
            if (can.view.lists && (resolved instanceof can.List || expr && expr.isComputed && resolved === undefined)) {
                return can.view.lists(expr, function (item, index) {
                    return options.fn(options.scope.add({ '@index': index }).add(item));
                });
            }
            expr = resolved;
            if (!!expr && isArrayLike(expr)) {
                for (i = 0; i < expr.length; i++) {
                    result.push(options.fn(options.scope.add({ '@index': i }).add(expr[i])));
                }
                return result.join('');
            } else if (isObserveLike(expr)) {
                keys = can.Map.keys(expr);
                for (i = 0; i < keys.length; i++) {
                    key = keys[i];
                    result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                }
                return result.join('');
            } else if (expr instanceof Object) {
                for (key in expr) {
                    result.push(options.fn(options.scope.add({ '@key': key }).add(expr[key])));
                }
                return result.join('');
            }
        },
        'with': function (expr, options) {
            var ctx = expr;
            expr = Mustache.resolve(expr);
            if (!!expr) {
                return options.fn(ctx);
            }
        },
        'log': function (expr, options) {
            if (typeof console !== 'undefined' && console.log) {
                if (!options) {
                    console.log(expr.context);
                } else {
                    console.log(expr, options.context);
                }
            }
        },
        '@index': function (offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.attr('@index');
            return '' + ((can.isFunction(index) ? index() : index) + offset);
        }
    }, function (fn, name) {
        Mustache.registerHelper(name, fn);
    });
    can.view.register({
        suffix: 'mustache',
        contentType: 'x-mustache-template',
        script: function (id, src) {
            return 'can.Mustache(function(' + ARG_NAMES + ') { ' + new Mustache({
                text: src,
                name: id
            }).template.out + ' })';
        },
        renderer: function (id, text) {
            return Mustache({
                text: text,
                name: id
            });
        }
    });
    can.mustache.registerHelper = can.proxy(can.Mustache.registerHelper, can.Mustache);
    can.mustache.safeString = can.Mustache.safeString;
    return can;
});
/*lib/can/observe/observe*/
define('lib/can/observe/observe', [
    'can/util/util',
    'can/map/map',
    'can/list/list',
    'can/compute/compute'
], function (can) {
    can.Observe = can.Map;
    can.Observe.startBatch = can.batch.start;
    can.Observe.stopBatch = can.batch.stop;
    can.Observe.triggerBatch = can.batch.trigger;
    return can;
});
/*lib/can/component/component*/
define('lib/can/component/component', [
    'can/util/util',
    'can/view/callbacks/callbacks',
    'can/view/elements',
    'can/control/control',
    'can/observe/observe',
    'can/view/mustache/mustache',
    'can/view/bindings/bindings'
], function (can, viewCallbacks, elements) {
    var ignoreAttributesRegExp = /^(dataViewId|class|id)$/i, paramReplacer = /\{([^\}]+)\}/g;
    var Component = can.Component = can.Construct.extend({
            setup: function () {
                can.Construct.setup.apply(this, arguments);
                if (can.Component) {
                    var self = this, scope = this.prototype.scope || this.prototype.viewModel;
                    this.Control = ComponentControl.extend(this.prototype.events);
                    if (!scope || typeof scope === 'object' && !(scope instanceof can.Map)) {
                        this.Map = can.Map.extend(scope || {});
                    } else if (scope.prototype instanceof can.Map) {
                        this.Map = scope;
                    }
                    this.attributeScopeMappings = {};
                    can.each(this.Map ? this.Map.defaults : {}, function (val, prop) {
                        if (val === '@') {
                            self.attributeScopeMappings[prop] = prop;
                        }
                    });
                    if (this.prototype.template) {
                        if (typeof this.prototype.template === 'function') {
                            var temp = this.prototype.template;
                            this.renderer = function () {
                                return can.view.frag(temp.apply(null, arguments));
                            };
                        } else {
                            this.renderer = can.view.mustache(this.prototype.template);
                        }
                    }
                    can.view.tag(this.prototype.tag, function (el, options) {
                        new self(el, options);
                    });
                }
            }
        }, {
            setup: function (el, hookupOptions) {
                var initialScopeData = {}, component = this, lexicalContent = (typeof this.leakScope === 'undefined' ? false : !this.leakScope) && this.template, twoWayBindings = {}, scope = this.scope || this.viewModel, viewModelPropertyUpdates = {}, componentScope, frag, teardownFunctions = [], callTeardownFunctions = function () {
                        for (var i = 0, len = teardownFunctions.length; i < len; i++) {
                            teardownFunctions[i]();
                        }
                    };
                can.each(this.constructor.attributeScopeMappings, function (val, prop) {
                    initialScopeData[prop] = el.getAttribute(can.hyphenate(val));
                });
                can.each(can.makeArray(el.attributes), function (node, index) {
                    var name = can.camelize(node.nodeName.toLowerCase()), value = node.value;
                    if (component.constructor.attributeScopeMappings[name] || ignoreAttributesRegExp.test(name) || viewCallbacks.attr(node.nodeName)) {
                        return;
                    }
                    if (value[0] === '{' && value[value.length - 1] === '}') {
                        value = value.substr(1, value.length - 2);
                    } else {
                        if (hookupOptions.templateType !== 'legacy') {
                            initialScopeData[name] = value;
                            return;
                        }
                    }
                    var computeData = hookupOptions.scope.computeData(value, { args: [] }), compute = computeData.compute;
                    var handler = function (ev, newVal) {
                        viewModelPropertyUpdates[name] = (viewModelPropertyUpdates[name] || 0) + 1;
                        componentScope.attr(name, newVal);
                        can.batch.afterPreviousEvents(function () {
                            --viewModelPropertyUpdates[name];
                        });
                    };
                    compute.bind('change', handler);
                    initialScopeData[name] = compute();
                    if (!compute.computeInstance.hasDependencies) {
                        compute.unbind('change', handler);
                    } else {
                        teardownFunctions.push(function () {
                            compute.unbind('change', handler);
                        });
                        twoWayBindings[name] = computeData;
                    }
                });
                if (this.constructor.Map) {
                    componentScope = new this.constructor.Map(initialScopeData);
                } else if (scope instanceof can.Map) {
                    componentScope = scope;
                } else if (can.isFunction(scope)) {
                    var scopeResult = scope.call(this, initialScopeData, hookupOptions.scope, el);
                    if (scopeResult instanceof can.Map) {
                        componentScope = scopeResult;
                    } else if (scopeResult.prototype instanceof can.Map) {
                        componentScope = new scopeResult(initialScopeData);
                    } else {
                        componentScope = new (can.Map.extend(scopeResult))(initialScopeData);
                    }
                }
                var handlers = {};
                can.each(twoWayBindings, function (computeData, prop) {
                    handlers[prop] = function (ev, newVal) {
                        if (!viewModelPropertyUpdates[prop]) {
                            computeData.compute(newVal);
                        }
                    };
                    componentScope.bind(prop, handlers[prop]);
                });
                if (!can.isEmptyObject(this.constructor.attributeScopeMappings) || hookupOptions.templateType !== 'legacy') {
                    can.bind.call(el, 'attributes', function (ev) {
                        var camelized = can.camelize(ev.attributeName);
                        if (!twoWayBindings[camelized] && !ignoreAttributesRegExp.test(camelized)) {
                            componentScope.attr(camelized, el.getAttribute(ev.attributeName));
                        }
                    });
                }
                this.scope = this.viewModel = componentScope;
                can.data(can.$(el), 'scope', this.scope);
                can.data(can.$(el), 'viewModel', this.scope);
                var renderedScope = lexicalContent ? this.scope : hookupOptions.scope.add(this.scope), options = { helpers: {} };
                can.each(this.helpers || {}, function (val, prop) {
                    if (can.isFunction(val)) {
                        options.helpers[prop] = function () {
                            return val.apply(componentScope, arguments);
                        };
                    }
                });
                teardownFunctions.push(function () {
                    can.each(handlers, function (handler, prop) {
                        componentScope.unbind(prop, handlers[prop]);
                    });
                });
                this._control = new this.constructor.Control(el, {
                    scope: this.scope,
                    viewModel: this.scope,
                    destroy: callTeardownFunctions
                });
                var nodeList = can.view.nodeLists.register([], undefined, true);
                teardownFunctions.push(function () {
                    can.view.nodeLists.unregister(nodeList);
                });
                if (this.constructor.renderer) {
                    if (!options.tags) {
                        options.tags = {};
                    }
                    options.tags.content = function contentHookup(el, rendererOptions) {
                        var subtemplate = hookupOptions.subtemplate || rendererOptions.subtemplate;
                        if (subtemplate) {
                            delete options.tags.content;
                            var opts = !lexicalContent || subtemplate !== hookupOptions.subtemplate ? rendererOptions : hookupOptions;
                            if (rendererOptions.parentNodeList) {
                                var frag = subtemplate(opts.scope, opts.options, rendererOptions.parentNodeList);
                                elements.replace([el], frag);
                            } else {
                                can.view.live.replace([el], subtemplate(opts.scope, opts.options));
                            }
                            options.tags.content = contentHookup;
                        }
                    };
                    frag = this.constructor.renderer(renderedScope, hookupOptions.options.add(options), nodeList);
                } else {
                    if (hookupOptions.templateType === 'legacy') {
                        frag = can.view.frag(hookupOptions.subtemplate ? hookupOptions.subtemplate(renderedScope, hookupOptions.options.add(options)) : '');
                    } else {
                        frag = hookupOptions.subtemplate ? hookupOptions.subtemplate(renderedScope, hookupOptions.options.add(options), nodeList) : document.createDocumentFragment();
                    }
                }
                can.appendChild(el, frag);
                can.view.nodeLists.update(nodeList, el.childNodes);
            }
        });
    var ComponentControl = can.Control.extend({
            _lookup: function (options) {
                return [
                    options.scope,
                    options,
                    window
                ];
            },
            _action: function (methodName, options, controlInstance) {
                var hasObjectLookup, readyCompute;
                paramReplacer.lastIndex = 0;
                hasObjectLookup = paramReplacer.test(methodName);
                if (!controlInstance && hasObjectLookup) {
                    return;
                } else if (!hasObjectLookup) {
                    return can.Control._action.apply(this, arguments);
                } else {
                    readyCompute = can.compute(function () {
                        var delegate;
                        var name = methodName.replace(paramReplacer, function (matched, key) {
                                var value;
                                if (key === 'scope' || key === 'viewModel') {
                                    delegate = options.scope;
                                    return '';
                                }
                                key = key.replace(/^(scope|^viewModel)\./, '');
                                value = can.compute.read(options.scope, key.split('.'), { isArgument: true }).value;
                                if (value === undefined) {
                                    value = can.getObject(key);
                                }
                                if (typeof value === 'string') {
                                    return value;
                                } else {
                                    delegate = value;
                                    return '';
                                }
                            });
                        var parts = name.split(/\s+/g), event = parts.pop();
                        return {
                            processor: this.processors[event] || this.processors.click,
                            parts: [
                                name,
                                parts.join(' '),
                                event
                            ],
                            delegate: delegate || undefined
                        };
                    }, this);
                    var handler = function (ev, ready) {
                        controlInstance._bindings.control[methodName](controlInstance.element);
                        controlInstance._bindings.control[methodName] = ready.processor(ready.delegate || controlInstance.element, ready.parts[2], ready.parts[1], methodName, controlInstance);
                    };
                    readyCompute.bind('change', handler);
                    controlInstance._bindings.readyComputes[methodName] = {
                        compute: readyCompute,
                        handler: handler
                    };
                    return readyCompute();
                }
            }
        }, {
            setup: function (el, options) {
                this.scope = options.scope;
                this.viewModel = options.viewModel;
                return can.Control.prototype.setup.call(this, el, options);
            },
            off: function () {
                if (this._bindings) {
                    can.each(this._bindings.readyComputes || {}, function (value) {
                        value.compute.unbind('change', value.handler);
                    });
                }
                can.Control.prototype.off.apply(this, arguments);
                this._bindings.readyComputes = {};
            },
            destroy: function () {
                can.Control.prototype.destroy.apply(this, arguments);
                if (typeof this.options.destroy === 'function') {
                    this.options.destroy.apply(this, arguments);
                }
            }
        });
    var $ = can.$;
    if ($.fn) {
        $.fn.scope = $.fn.viewModel = function () {
            return can.viewModel.apply(can, [this].concat(can.makeArray(arguments)));
        };
    }
    return Component;
});
/*lib/can/can*/
define('lib/can/can', [
    'can/util/util',
    'can/control/route/route',
    'can/model/model',
    'can/view/mustache/mustache',
    'can/component/component'
], function (can) {
    return can;
});
/*lib/can/construct/super/super*/
define('lib/can/construct/super/super', [
    'can/util/util',
    'can/construct/construct'
], function (can, Construct) {
    var isFunction = can.isFunction, fnTest = /xyz/.test(function () {
            return this.xyz;
        }) ? /\b_super\b/ : /.*/, getset = [
            'get',
            'set'
        ], getSuper = function (base, name, fn) {
            return function () {
                var tmp = this._super, ret;
                this._super = base[name];
                ret = fn.apply(this, arguments);
                this._super = tmp;
                return ret;
            };
        };
    can.Construct._defineProperty = function (addTo, base, name, descriptor) {
        var _super = Object.getOwnPropertyDescriptor(base, name);
        if (_super) {
            can.each(getset, function (method) {
                if (isFunction(_super[method]) && isFunction(descriptor[method])) {
                    descriptor[method] = getSuper(_super, method, descriptor[method]);
                } else if (!isFunction(descriptor[method])) {
                    descriptor[method] = _super[method];
                }
            });
        }
        Object.defineProperty(addTo, name, descriptor);
    };
    can.Construct._overwrite = function (addTo, base, name, val) {
        addTo[name] = isFunction(val) && isFunction(base[name]) && fnTest.test(val) ? getSuper(base, name, val) : val;
    };
    return can;
});
/*mad/util/string/uuid*/
System.define('mad/util/string/uuid', '/*\nUsage 1: define the default prefix by using an object with the property prefix as a parameter which contains a string value; {prefix: \'id\'}\nUsage 2: call the function uuid() with a string parameter p to be used as a prefix to generate a random uuid;\nUsage 3: call the function uuid() with no parameters to generate a uuid with the default prefix; defaul prefix: \'\' (empty string)\n*/\n\n/* Generate fragment of random numbers */\n_uuidlet = function () {\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n};\n/* Generates random uuid */\nuuid = function () {\n\treturn (_uuidlet() + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + "-" + _uuidlet() + _uuidlet() + _uuidlet());\n};', {
    'address': 'mad/util/string/uuid',
    'metadata': {
        'deps': [],
        'format': 'global'
    }
});
/*mad/util/util*/
define('mad/util/util', [
    'can/can',
    'can/construct/super/super',
    'mad/util/string/uuid'
], function ($__0, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    var can = $__0.default;
    $__2;
    $__3;
    var glbl = typeof window !== 'undefined' ? window : global, mad = {};
    glbl.mad = mad;
    mad.global = mad;
    mad.config = { rootElement: $('body') };
    mad._controls = {};
    mad.getControl = function (id, controlName) {
        if (controlName == undefined) {
            for (controlName in mad._controls[id]) {
                break;
            }
        }
        return mad._controls[id][controlName];
    };
    mad.referenceControl = function (control) {
        var id = control.getId();
        if (mad._controls[id] == undefined) {
            mad._controls[id] = {};
        }
        mad._controls[id][control.constructor.fullName] = control;
    };
    mad.unreferenceControl = function (control) {
        delete mad._controls[control.getId()][control.constructor.fullName];
    };
    mad.setGlobal = function (name, value) {
        glbl[name] = value;
    };
    var $__default = mad;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/error/exception*/
define('mad/error/exception', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.error = mad.error || {};
    mad.error.WRONG_PARAMETER = 'Wrong parameter [%0]';
    mad.error.MISSING_OPTION = 'The option [%0] should be defined';
    mad.error.ELEMENT_NOT_FOUND = 'The element [%0] could not be found';
    mad.error.MISSING_CONFIG = 'The config [%0] has to be defined';
    var MadException = mad.Exception = function () {
        };
    MadException.get = function (exception_message) {
        var reps = Array.prototype.slice.call(arguments, 1);
        var message = exception_message.replace(/%(\d+)/g, function (s, key) {
                return reps[key] || s;
            });
        return new Error(message);
    };
    return {};
});
/*mad/error/error_handler*/
define('mad/error/error_handler', [], function () {
    'use strict';
    var ErrorHandler = mad.error.ErrorHandler = can.Construct.extend('mad.error.ErrorHandler', {
            _log: function (status, title, message, data) {
                var log = status.toUpperCase() + ' ' + title + ' ' + '(' + message + ')';
                if (data) {
                }
            },
            handleException: function (exception) {
                mad.error.ErrorHandler._log('exception', exception.name, exception.message, exception.stack || null);
                throw exception;
            },
            handleError: function (status, title, message, data) {
                mad.error.ErrorHandler._log(status, title, message || '', data || null);
            }
        }, {});
    var $__default = ErrorHandler;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/helper/component*/
define('mad/helper/component', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.helper = mad.helper || {};
    var ComponentHelper = mad.helper.Component = can.Construct.extend('mad.helper.Component', {
            create: function (refElement, position, ComponentClass, options) {
                var $component = null, html = '', options = options || {}, id = options.id || '';
                var classAttributes = {};
                if (typeof ComponentClass.defaults.attributes != 'undefined') {
                    classAttributes = ComponentClass.defaults.attributes;
                }
                var attributes = $.extend({}, classAttributes, options.attributes);
                if (refElement.length == 0) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
                }
                var tag = options.tag || ComponentClass.defaults.tag;
                html = '<' + tag + ' id="' + (options.id || '') + '"';
                for (var attrName in attributes) {
                    html += ' ' + attrName + '="' + attributes[attrName] + '"';
                }
                html += '/>';
                $component = mad.helper.Html.create(refElement, position, html);
                return new ComponentClass($component, options);
            }
        }, {});
    var $__default = ComponentHelper;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/helper/control*/
define('mad/helper/control', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.helper = mad.helper || {};
    var ControlHelper = mad.helper.Control = can.Control.extend('mad.helper.Control', {
            getViewPath: function (Control, options) {
                var path = '', split = Control.fullName.split('.');
                var root = split.shift();
                switch (root) {
                case 'mad':
                    path += 'mad/view/template/';
                    break;
                case mad.Config.read('app.namespace'):
                    path += mad.Config.read('app.namespace') + '/view/template/';
                    break;
                default:
                    path += mad.Config.read('app.namespace') + '/view/template/' + root + '/';
                    break;
                }
                var viewName = can.underscore(split.pop());
                if (split.length) {
                    path += split.join('/') + '/';
                }
                path += viewName + '.ejs';
                return path;
            }
        }, {});
    var $__default = ControlHelper;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/helper/html*/
define('mad/helper/html', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.helper = mad.helper || {};
    var HtmlHelper = mad.helper.Html = can.Construct.extend('mad.helper.Html', {
            position: function (el, options) {
                if (typeof options.coordinates != 'undefined') {
                    el.css({
                        position: 'absolute',
                        left: options.coordinates.x + 'px',
                        top: options.coordinates.y + 'px'
                    });
                } else if (typeof options.reference != 'undefined') {
                    el.position({
                        my: options.reference.my,
                        at: options.reference.at,
                        of: options.reference.of
                    });
                }
            },
            create: function (refElement, position, content) {
                var returnValue = $(content);
                if (!(refElement instanceof jQuery)) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
                }
                if (refElement.length == 0) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
                }
                switch (position) {
                case 'inside_replace':
                    refElement.empty();
                    returnValue = returnValue.prependTo(refElement);
                    break;
                case 'replace_with':
                    refElement.replaceWith(returnValue);
                    break;
                case 'first':
                    returnValue = returnValue.prependTo(refElement);
                    break;
                case 'last':
                    returnValue = returnValue.appendTo(refElement);
                    break;
                case 'before':
                    returnValue = returnValue.insertBefore(refElement);
                    break;
                case 'after':
                    returnValue = returnValue.insertAfter(refElement);
                    break;
                default:
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'position');
                }
                return returnValue;
            }
        }, {});
    return {};
});
/*mad/config/config*/
define('mad/config/config', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.config = mad.config || {};
    var MadConfig = mad.Config = can.Construct.extend('mad.Config', {
            loadFile: function (url) {
                var self = this;
                $.ajax({
                    url: url,
                    async: false,
                    dataType: 'json',
                    success: function (data) {
                        self.load(data);
                    }
                });
            },
            load: function (config) {
                $.extend(true, mad.config, config);
            },
            read: function (name) {
                return can.getObject(name, mad.config);
            },
            write: function (name, value) {
                can.getObject(name, mad.config, true, value);
            },
            flush: function () {
                for (var i in mad.config) {
                    delete mad.config[i];
                }
            }
        }, {});
    var $__default = MadConfig;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/util/array/array*/
define('mad/util/array/array', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.array = mad.array || {};
    mad.array.intersect = function (arr1, arr2) {
        return arr1.filter(function (n) {
            return arr2.indexOf(n) > -1;
        });
    };
    var $__default = mad.array;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/util/map/map*/
define('mad/util/map/map', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Map = mad.Map = can.Construct.extend('mad.Map', {
            mapObject: function (object, map) {
                console.warn('Please call the function mapObject directly on the map object.');
                return map.mapObject(object);
            },
            mapObjects: function (arr, map) {
                console.warn('Please call the function mapObject directly on the map object.');
                return map.mapObjects(arr);
            }
        }, {
            map: {},
            init: function (map) {
                this.map = map;
            },
            _getObjFieldPointer: function (object, key) {
                var returnValue = object, split = key.split('.');
                for (var i = 0; i < split.length; i++) {
                    if (returnValue[split[i]] === undefined) {
                        return null;
                    }
                    returnValue = returnValue[split[i]];
                }
                return returnValue;
            },
            mapObject: function (object) {
                var returnValue = {};
                for (var key in this.map) {
                    var mapKeyElts = key.split('.'), current = returnValue, position = 0;
                    for (var i in mapKeyElts) {
                        var mapKeyElt = mapKeyElts[i];
                        if (position == mapKeyElts.length - 1) {
                            if (typeof this.map[key] == 'object') {
                                var func = this.map[key].func;
                                var keyToMap = this.map[key].key;
                                var objectFieldToMap = this._getObjFieldPointer(object, keyToMap);
                                if (objectFieldToMap != null) {
                                    current[mapKeyElt] = func(objectFieldToMap, this, object, returnValue);
                                }
                            } else {
                                var objectFieldToMap = this._getObjFieldPointer(object, this.map[key]);
                                if (objectFieldToMap != null) {
                                    current[mapKeyElt] = objectFieldToMap;
                                }
                            }
                        } else {
                            if (typeof current[mapKeyElt] == 'undefined')
                                current[mapKeyElt] = [];
                            current = current[mapKeyElt];
                        }
                        position++;
                    }
                }
                return returnValue;
            },
            mapObjects: function (data) {
                var self = this;
                var returnValue = [];
                can.each(data, function (elt, i) {
                    returnValue[i] = self.mapObject(data[i]);
                });
                return returnValue;
            }
        });
    var $__default = Map;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*xregexp*/
;
(function (root, definition) {
    var self;
    if (typeof define === 'function') {
        define('xregexp', definition);
    } else if (typeof exports === 'object') {
        self = definition();
        (typeof module === 'object' ? module.exports = self : exports).XRegExp = self;
    } else {
        root.XRegExp = definition();
    }
}(this, function () {
    var XRegExp = function (undefined) {
            'use strict';
            var self, REGEX_DATA = 'xregexp', features = {
                    astral: false,
                    natives: false
                }, nativ = {
                    exec: RegExp.prototype.exec,
                    test: RegExp.prototype.test,
                    match: String.prototype.match,
                    replace: String.prototype.replace,
                    split: String.prototype.split
                }, fixed = {}, regexCache = {}, patternCache = {}, tokens = [], defaultScope = 'default', classScope = 'class', nativeTokens = {
                    'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?[:=!]|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
                    'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
                }, replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g, correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined, hasNativeU = function () {
                    var isSupported = true;
                    try {
                        new RegExp('', 'u');
                    } catch (exception) {
                        isSupported = false;
                    }
                    return isSupported;
                }(), hasNativeY = function () {
                    var isSupported = true;
                    try {
                        new RegExp('', 'y');
                    } catch (exception) {
                        isSupported = false;
                    }
                    return isSupported;
                }(), hasFlagsProp = /a/.flags !== undefined, registeredFlags = {
                    g: true,
                    i: true,
                    m: true,
                    u: hasNativeU,
                    y: hasNativeY
                }, toString = {}.toString, add;
            function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
                var p;
                regex[REGEX_DATA] = { captureNames: captureNames };
                if (isInternalOnly) {
                    return regex;
                }
                if (regex.__proto__) {
                    regex.__proto__ = self.prototype;
                } else {
                    for (p in self.prototype) {
                        regex[p] = self.prototype[p];
                    }
                }
                regex[REGEX_DATA].source = xSource;
                regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;
                return regex;
            }
            function clipDuplicates(str) {
                return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
            }
            function copyRegex(regex, options) {
                if (!self.isRegExp(regex)) {
                    throw new TypeError('Type RegExp expected');
                }
                var xData = regex[REGEX_DATA] || {}, flags = getNativeFlags(regex), flagsToAdd = '', flagsToRemove = '', xregexpSource = null, xregexpFlags = null;
                options = options || {};
                if (options.removeG) {
                    flagsToRemove += 'g';
                }
                if (options.removeY) {
                    flagsToRemove += 'y';
                }
                if (flagsToRemove) {
                    flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');
                }
                if (options.addG) {
                    flagsToAdd += 'g';
                }
                if (options.addY) {
                    flagsToAdd += 'y';
                }
                if (flagsToAdd) {
                    flags = clipDuplicates(flags + flagsToAdd);
                }
                if (!options.isInternalOnly) {
                    if (xData.source !== undefined) {
                        xregexpSource = xData.source;
                    }
                    if (xData.flags != null) {
                        xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
                    }
                }
                regex = augment(new RegExp(regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
                return regex;
            }
            function dec(hex) {
                return parseInt(hex, 16);
            }
            function getNativeFlags(regex) {
                return hasFlagsProp ? regex.flags : nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
            }
            function hasNamedCapture(regex) {
                return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
            }
            function hex(dec) {
                return parseInt(dec, 10).toString(16);
            }
            function indexOf(array, value) {
                var len = array.length, i;
                for (i = 0; i < len; ++i) {
                    if (array[i] === value) {
                        return i;
                    }
                }
                return -1;
            }
            function isType(value, type) {
                return toString.call(value) === '[object ' + type + ']';
            }
            function isQuantifierNext(pattern, pos, flags) {
                return nativ.test.call(flags.indexOf('x') > -1 ? /^(?:\s+|#.*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/, pattern.slice(pos));
            }
            function pad4(str) {
                while (str.length < 4) {
                    str = '0' + str;
                }
                return str;
            }
            function prepareFlags(pattern, flags) {
                var i;
                if (clipDuplicates(flags) !== flags) {
                    throw new SyntaxError('Invalid duplicate regex flag ' + flags);
                }
                pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
                    if (nativ.test.call(/[gy]/, $1)) {
                        throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
                    }
                    flags = clipDuplicates(flags + $1);
                    return '';
                });
                for (i = 0; i < flags.length; ++i) {
                    if (!registeredFlags[flags.charAt(i)]) {
                        throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));
                    }
                }
                return {
                    pattern: pattern,
                    flags: flags
                };
            }
            function prepareOptions(value) {
                var options = {};
                if (isType(value, 'String')) {
                    self.forEach(value, /[^\s,]+/, function (match) {
                        options[match] = true;
                    });
                    return options;
                }
                return value;
            }
            function registerFlag(flag) {
                if (!/^[\w$]$/.test(flag)) {
                    throw new Error('Flag must be a single character A-Za-z0-9_$');
                }
                registeredFlags[flag] = true;
            }
            function runTokens(pattern, flags, pos, scope, context) {
                var i = tokens.length, leadChar = pattern.charAt(pos), result = null, match, t;
                while (i--) {
                    t = tokens[i];
                    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && flags.indexOf(t.flag) === -1) {
                        continue;
                    }
                    match = self.exec(pattern, t.regex, pos, 'sticky');
                    if (match) {
                        result = {
                            matchLength: match[0].length,
                            output: t.handler.call(context, match, scope, flags),
                            reparse: t.reparse
                        };
                        break;
                    }
                }
                return result;
            }
            function setAstral(on) {
                features.astral = on;
            }
            function setNatives(on) {
                RegExp.prototype.exec = (on ? fixed : nativ).exec;
                RegExp.prototype.test = (on ? fixed : nativ).test;
                String.prototype.match = (on ? fixed : nativ).match;
                String.prototype.replace = (on ? fixed : nativ).replace;
                String.prototype.split = (on ? fixed : nativ).split;
                features.natives = on;
            }
            function toObject(value) {
                if (value == null) {
                    throw new TypeError('Cannot convert null or undefined to object');
                }
                return value;
            }
            self = function (pattern, flags) {
                var context = {
                        hasNamedCapture: false,
                        captureNames: []
                    }, scope = defaultScope, output = '', pos = 0, result, token, generated, appliedPattern, appliedFlags;
                if (self.isRegExp(pattern)) {
                    if (flags !== undefined) {
                        throw new TypeError('Cannot supply flags when copying a RegExp');
                    }
                    return copyRegex(pattern);
                }
                pattern = pattern === undefined ? '' : String(pattern);
                flags = flags === undefined ? '' : String(flags);
                if (self.isInstalled('astral') && flags.indexOf('A') === -1) {
                    flags += 'A';
                }
                if (!patternCache[pattern]) {
                    patternCache[pattern] = {};
                }
                if (!patternCache[pattern][flags]) {
                    result = prepareFlags(pattern, flags);
                    appliedPattern = result.pattern;
                    appliedFlags = result.flags;
                    while (pos < appliedPattern.length) {
                        do {
                            result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
                            if (result && result.reparse) {
                                appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);
                            }
                        } while (result && result.reparse);
                        if (result) {
                            output += result.output;
                            pos += result.matchLength || 1;
                        } else {
                            token = self.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];
                            output += token;
                            pos += token.length;
                            if (token === '[' && scope === defaultScope) {
                                scope = classScope;
                            } else if (token === ']' && scope === classScope) {
                                scope = defaultScope;
                            }
                        }
                    }
                    patternCache[pattern][flags] = {
                        pattern: nativ.replace.call(output, /\(\?:\)(?=\(\?:\))|^\(\?:\)|\(\?:\)$/g, ''),
                        flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
                        captures: context.hasNamedCapture ? context.captureNames : null
                    };
                }
                generated = patternCache[pattern][flags];
                return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);
            };
            self.prototype = new RegExp();
            self.version = '3.0.0';
            self.addToken = function (regex, handler, options) {
                options = options || {};
                var optionalFlags = options.optionalFlags, i;
                if (options.flag) {
                    registerFlag(options.flag);
                }
                if (optionalFlags) {
                    optionalFlags = nativ.split.call(optionalFlags, '');
                    for (i = 0; i < optionalFlags.length; ++i) {
                        registerFlag(optionalFlags[i]);
                    }
                }
                tokens.push({
                    regex: copyRegex(regex, {
                        addG: true,
                        addY: hasNativeY,
                        isInternalOnly: true
                    }),
                    handler: handler,
                    scope: options.scope || defaultScope,
                    flag: options.flag,
                    reparse: options.reparse,
                    leadChar: options.leadChar
                });
                self.cache.flush('patterns');
            };
            self.cache = function (pattern, flags) {
                if (!regexCache[pattern]) {
                    regexCache[pattern] = {};
                }
                return regexCache[pattern][flags] || (regexCache[pattern][flags] = self(pattern, flags));
            };
            self.cache.flush = function (cacheName) {
                if (cacheName === 'patterns') {
                    patternCache = {};
                } else {
                    regexCache = {};
                }
            };
            self.escape = function (str) {
                return nativ.replace.call(toObject(str), /[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
            };
            self.exec = function (str, regex, pos, sticky) {
                var cacheKey = 'g', addY = false, match, r2;
                addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
                if (addY) {
                    cacheKey += 'y';
                }
                regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                    addG: true,
                    addY: addY,
                    removeY: sticky === false,
                    isInternalOnly: true
                }));
                r2.lastIndex = pos = pos || 0;
                match = fixed.exec.call(r2, str);
                if (sticky && match && match.index !== pos) {
                    match = null;
                }
                if (regex.global) {
                    regex.lastIndex = match ? r2.lastIndex : 0;
                }
                return match;
            };
            self.forEach = function (str, regex, callback) {
                var pos = 0, i = -1, match;
                while (match = self.exec(str, regex, pos)) {
                    callback(match, ++i, str, regex);
                    pos = match.index + (match[0].length || 1);
                }
            };
            self.globalize = function (regex) {
                return copyRegex(regex, { addG: true });
            };
            self.install = function (options) {
                options = prepareOptions(options);
                if (!features.astral && options.astral) {
                    setAstral(true);
                }
                if (!features.natives && options.natives) {
                    setNatives(true);
                }
            };
            self.isInstalled = function (feature) {
                return !!features[feature];
            };
            self.isRegExp = function (value) {
                return toString.call(value) === '[object RegExp]';
            };
            self.match = function (str, regex, scope) {
                var global = regex.global && scope !== 'one' || scope === 'all', cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY', result, r2;
                regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                    addG: !!global,
                    addY: !!regex.sticky,
                    removeG: scope === 'one',
                    isInternalOnly: true
                }));
                result = nativ.match.call(toObject(str), r2);
                if (regex.global) {
                    regex.lastIndex = scope === 'one' && result ? result.index + result[0].length : 0;
                }
                return global ? result || [] : result && result[0];
            };
            self.matchChain = function (str, chain) {
                return function recurseChain(values, level) {
                    var item = chain[level].regex ? chain[level] : { regex: chain[level] }, matches = [], addMatch = function (match) {
                            if (item.backref) {
                                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {
                                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);
                                }
                                matches.push(match[item.backref] || '');
                            } else {
                                matches.push(match[0]);
                            }
                        }, i;
                    for (i = 0; i < values.length; ++i) {
                        self.forEach(values[i], item.regex, addMatch);
                    }
                    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
                }([str], 0);
            };
            self.replace = function (str, search, replacement, scope) {
                var isRegex = self.isRegExp(search), global = search.global && scope !== 'one' || scope === 'all', cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY', s2 = search, result;
                if (isRegex) {
                    search[REGEX_DATA] = search[REGEX_DATA] || {};
                    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
                        addG: !!global,
                        addY: !!search.sticky,
                        removeG: scope === 'one',
                        isInternalOnly: true
                    }));
                } else if (global) {
                    s2 = new RegExp(self.escape(String(search)), 'g');
                }
                result = fixed.replace.call(toObject(str), s2, replacement);
                if (isRegex && search.global) {
                    search.lastIndex = 0;
                }
                return result;
            };
            self.replaceEach = function (str, replacements) {
                var i, r;
                for (i = 0; i < replacements.length; ++i) {
                    r = replacements[i];
                    str = self.replace(str, r[0], r[1], r[2]);
                }
                return str;
            };
            self.split = function (str, separator, limit) {
                return fixed.split.call(toObject(str), separator, limit);
            };
            self.test = function (str, regex, pos, sticky) {
                return !!self.exec(str, regex, pos, sticky);
            };
            self.uninstall = function (options) {
                options = prepareOptions(options);
                if (features.astral && options.astral) {
                    setAstral(false);
                }
                if (features.natives && options.natives) {
                    setNatives(false);
                }
            };
            self.union = function (patterns, flags) {
                var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g, output = [], numCaptures = 0, numPriorCaptures, captureNames, pattern, rewrite = function (match, paren, backref) {
                        var name = captureNames[numCaptures - numPriorCaptures];
                        if (paren) {
                            ++numCaptures;
                            if (name) {
                                return '(?<' + name + '>';
                            }
                        } else if (backref) {
                            return '\\' + (+backref + numPriorCaptures);
                        }
                        return match;
                    }, i;
                if (!(isType(patterns, 'Array') && patterns.length)) {
                    throw new TypeError('Must provide a nonempty array of patterns to merge');
                }
                for (i = 0; i < patterns.length; ++i) {
                    pattern = patterns[i];
                    if (self.isRegExp(pattern)) {
                        numPriorCaptures = numCaptures;
                        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
                        output.push(nativ.replace.call(self(pattern.source).source, parts, rewrite));
                    } else {
                        output.push(self.escape(pattern));
                    }
                }
                return self(output.join('|'), flags);
            };
            fixed.exec = function (str) {
                var origLastIndex = this.lastIndex, match = nativ.exec.apply(this, arguments), name, r2, i;
                if (match) {
                    if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {
                        r2 = copyRegex(this, {
                            removeG: true,
                            isInternalOnly: true
                        });
                        nativ.replace.call(String(str).slice(match.index), r2, function () {
                            var len = arguments.length, i;
                            for (i = 1; i < len - 2; ++i) {
                                if (arguments[i] === undefined) {
                                    match[i] = undefined;
                                }
                            }
                        });
                    }
                    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
                        for (i = 1; i < match.length; ++i) {
                            name = this[REGEX_DATA].captureNames[i - 1];
                            if (name) {
                                match[name] = match[i];
                            }
                        }
                    }
                    if (this.global && !match[0].length && this.lastIndex > match.index) {
                        this.lastIndex = match.index;
                    }
                }
                if (!this.global) {
                    this.lastIndex = origLastIndex;
                }
                return match;
            };
            fixed.test = function (str) {
                return !!fixed.exec.call(this, str);
            };
            fixed.match = function (regex) {
                var result;
                if (!self.isRegExp(regex)) {
                    regex = new RegExp(regex);
                } else if (regex.global) {
                    result = nativ.match.apply(this, arguments);
                    regex.lastIndex = 0;
                    return result;
                }
                return fixed.exec.call(regex, toObject(this));
            };
            fixed.replace = function (search, replacement) {
                var isRegex = self.isRegExp(search), origLastIndex, captureNames, result;
                if (isRegex) {
                    if (search[REGEX_DATA]) {
                        captureNames = search[REGEX_DATA].captureNames;
                    }
                    origLastIndex = search.lastIndex;
                } else {
                    search += '';
                }
                if (isType(replacement, 'Function')) {
                    result = nativ.replace.call(String(this), search, function () {
                        var args = arguments, i;
                        if (captureNames) {
                            args[0] = new String(args[0]);
                            for (i = 0; i < captureNames.length; ++i) {
                                if (captureNames[i]) {
                                    args[0][captureNames[i]] = args[i + 1];
                                }
                            }
                        }
                        if (isRegex && search.global) {
                            search.lastIndex = args[args.length - 2] + args[0].length;
                        }
                        return replacement.apply(undefined, args);
                    });
                } else {
                    result = nativ.replace.call(this == null ? this : String(this), search, function () {
                        var args = arguments;
                        return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {
                            var n;
                            if ($1) {
                                n = +$1;
                                if (n <= args.length - 3) {
                                    return args[n] || '';
                                }
                                n = captureNames ? indexOf(captureNames, $1) : -1;
                                if (n < 0) {
                                    throw new SyntaxError('Backreference to undefined group ' + $0);
                                }
                                return args[n + 1] || '';
                            }
                            if ($2 === '$') {
                                return '$';
                            }
                            if ($2 === '&' || +$2 === 0) {
                                return args[0];
                            }
                            if ($2 === '`') {
                                return args[args.length - 1].slice(0, args[args.length - 2]);
                            }
                            if ($2 === '\'') {
                                return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                            }
                            $2 = +$2;
                            if (!isNaN($2)) {
                                if ($2 > args.length - 3) {
                                    throw new SyntaxError('Backreference to undefined group ' + $0);
                                }
                                return args[$2] || '';
                            }
                            throw new SyntaxError('Invalid token ' + $0);
                        });
                    });
                }
                if (isRegex) {
                    if (search.global) {
                        search.lastIndex = 0;
                    } else {
                        search.lastIndex = origLastIndex;
                    }
                }
                return result;
            };
            fixed.split = function (separator, limit) {
                if (!self.isRegExp(separator)) {
                    return nativ.split.apply(this, arguments);
                }
                var str = String(this), output = [], origLastIndex = separator.lastIndex, lastLastIndex = 0, lastLength;
                limit = (limit === undefined ? -1 : limit) >>> 0;
                self.forEach(str, separator, function (match) {
                    if (match.index + match[0].length > lastLastIndex) {
                        output.push(str.slice(lastLastIndex, match.index));
                        if (match.length > 1 && match.index < str.length) {
                            Array.prototype.push.apply(output, match.slice(1));
                        }
                        lastLength = match[0].length;
                        lastLastIndex = match.index + lastLength;
                    }
                });
                if (lastLastIndex === str.length) {
                    if (!nativ.test.call(separator, '') || lastLength) {
                        output.push('');
                    }
                } else {
                    output.push(str.slice(lastLastIndex));
                }
                separator.lastIndex = origLastIndex;
                return output.length > limit ? output.slice(0, limit) : output;
            };
            add = self.addToken;
            add(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
                if (match[1] === 'B' && scope === defaultScope) {
                    return match[0];
                }
                throw new SyntaxError('Invalid escape ' + match[0]);
            }, {
                scope: 'all',
                leadChar: '\\'
            });
            add(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
                var code = dec(match[1]);
                if (code > 1114111) {
                    throw new SyntaxError('Invalid Unicode code point ' + match[0]);
                }
                if (code <= 65535) {
                    return '\\u' + pad4(hex(code));
                }
                if (hasNativeU && flags.indexOf('u') > -1) {
                    return match[0];
                }
                throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
            }, {
                scope: 'all',
                leadChar: '\\'
            });
            add(/\[(\^?)]/, function (match) {
                return match[1] ? '[\\s\\S]' : '\\b\\B';
            }, { leadChar: '[' });
            add(/\(\?#[^)]*\)/, function (match, scope, flags) {
                return isQuantifierNext(match.input, match.index + match[0].length, flags) ? '' : '(?:)';
            }, { leadChar: '(' });
            add(/\s+|#.*/, function (match, scope, flags) {
                return isQuantifierNext(match.input, match.index + match[0].length, flags) ? '' : '(?:)';
            }, { flag: 'x' });
            add(/\./, function () {
                return '[\\s\\S]';
            }, {
                flag: 's',
                leadChar: '.'
            });
            add(/\\k<([\w$]+)>/, function (match) {
                var index = isNaN(match[1]) ? indexOf(this.captureNames, match[1]) + 1 : +match[1], endIndex = match.index + match[0].length;
                if (!index || index > this.captureNames.length) {
                    throw new SyntaxError('Backreference to undefined group ' + match[0]);
                }
                return '\\' + index + (endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? '' : '(?:)');
            }, { leadChar: '\\' });
            add(/\\(\d+)/, function (match, scope) {
                if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
                    throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' + match[0]);
                }
                return match[0];
            }, {
                scope: 'all',
                leadChar: '\\'
            });
            add(/\(\?P?<([\w$]+)>/, function (match) {
                if (!isNaN(match[1])) {
                    throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
                }
                if (match[1] === 'length' || match[1] === '__proto__') {
                    throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
                }
                if (indexOf(this.captureNames, match[1]) > -1) {
                    throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
                }
                this.captureNames.push(match[1]);
                this.hasNamedCapture = true;
                return '(';
            }, { leadChar: '(' });
            add(/\((?!\?)/, function (match, scope, flags) {
                if (flags.indexOf('n') > -1) {
                    return '(?:';
                }
                this.captureNames.push(null);
                return '(';
            }, {
                optionalFlags: 'n',
                leadChar: '('
            });
            return self;
        }();
    (function (XRegExp) {
        'use strict';
        var REGEX_DATA = 'xregexp', subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g, parts = XRegExp.union([
                /\({{([\w$]+)}}\)|{{([\w$]+)}}/,
                subParts
            ], 'g');
        function deanchor(pattern) {
            var leadingAnchor = /^\^/, trailingAnchor = /\$$/;
            if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
                return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
            }
            return pattern;
        }
        function asXRegExp(value) {
            return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? value : XRegExp(value.source) : XRegExp(value);
        }
        XRegExp.build = function (pattern, subs, flags) {
            var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern), data = {}, numCaps = 0, numPriorCaps, numOuterCaps = 0, outerCapsMap = [0], outerCapNames, sub, p;
            if (inlineFlags) {
                flags = flags || '';
                inlineFlags[1].replace(/./g, function (flag) {
                    flags += flags.indexOf(flag) > -1 ? '' : flag;
                });
            }
            for (p in subs) {
                if (subs.hasOwnProperty(p)) {
                    sub = asXRegExp(subs[p]);
                    data[p] = {
                        pattern: deanchor(sub.source),
                        names: sub[REGEX_DATA].captureNames || []
                    };
                }
            }
            pattern = asXRegExp(pattern);
            outerCapNames = pattern[REGEX_DATA].captureNames || [];
            pattern = pattern.source.replace(parts, function ($0, $1, $2, $3, $4) {
                var subName = $1 || $2, capName, intro;
                if (subName) {
                    if (!data.hasOwnProperty(subName)) {
                        throw new ReferenceError('Undefined property ' + $0);
                    }
                    if ($1) {
                        capName = outerCapNames[numOuterCaps];
                        outerCapsMap[++numOuterCaps] = ++numCaps;
                        intro = '(?<' + (capName || subName) + '>';
                    } else {
                        intro = '(?:';
                    }
                    numPriorCaps = numCaps;
                    return intro + data[subName].pattern.replace(subParts, function (match, paren, backref) {
                        if (paren) {
                            capName = data[subName].names[numCaps - numPriorCaps];
                            ++numCaps;
                            if (capName) {
                                return '(?<' + capName + '>';
                            }
                        } else if (backref) {
                            return '\\' + (+backref + numPriorCaps);
                        }
                        return match;
                    }) + ')';
                }
                if ($3) {
                    capName = outerCapNames[numOuterCaps];
                    outerCapsMap[++numOuterCaps] = ++numCaps;
                    if (capName) {
                        return '(?<' + capName + '>';
                    }
                } else if ($4) {
                    return '\\' + outerCapsMap[+$4];
                }
                return $0;
            });
            return XRegExp(pattern, flags);
        };
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        function row(name, value, start, end) {
            return {
                name: name,
                value: value,
                start: start,
                end: end
            };
        }
        XRegExp.matchRecursive = function (str, left, right, flags, options) {
            flags = flags || '';
            options = options || {};
            var global = flags.indexOf('g') > -1, sticky = flags.indexOf('y') > -1, basicFlags = flags.replace(/y/g, ''), escapeChar = options.escapeChar, vN = options.valueNames, output = [], openTokens = 0, delimStart = 0, delimEnd = 0, lastOuterEnd = 0, outerStart, innerStart, leftMatch, rightMatch, esc;
            left = XRegExp(left, basicFlags);
            right = XRegExp(right, basicFlags);
            if (escapeChar) {
                if (escapeChar.length > 1) {
                    throw new Error('Cannot use more than one escape character');
                }
                escapeChar = XRegExp.escape(escapeChar);
                esc = new RegExp('(?:' + escapeChar + '[\\S\\s]|(?:(?!' + XRegExp.union([
                    left,
                    right
                ]).source + ')[^' + escapeChar + '])+)+', flags.replace(/[^imu]+/g, ''));
            }
            while (true) {
                if (escapeChar) {
                    delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
                }
                leftMatch = XRegExp.exec(str, left, delimEnd);
                rightMatch = XRegExp.exec(str, right, delimEnd);
                if (leftMatch && rightMatch) {
                    if (leftMatch.index <= rightMatch.index) {
                        rightMatch = null;
                    } else {
                        leftMatch = null;
                    }
                }
                if (leftMatch || rightMatch) {
                    delimStart = (leftMatch || rightMatch).index;
                    delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
                } else if (!openTokens) {
                    break;
                }
                if (sticky && !openTokens && delimStart > lastOuterEnd) {
                    break;
                }
                if (leftMatch) {
                    if (!openTokens) {
                        outerStart = delimStart;
                        innerStart = delimEnd;
                    }
                    ++openTokens;
                } else if (rightMatch && openTokens) {
                    if (!--openTokens) {
                        if (vN) {
                            if (vN[0] && outerStart > lastOuterEnd) {
                                output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                            }
                            if (vN[1]) {
                                output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
                            }
                            if (vN[2]) {
                                output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
                            }
                            if (vN[3]) {
                                output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
                            }
                        } else {
                            output.push(str.slice(innerStart, delimStart));
                        }
                        lastOuterEnd = delimEnd;
                        if (!global) {
                            break;
                        }
                    }
                } else {
                    throw new Error('Unbalanced delimiter found in string');
                }
                if (delimStart === delimEnd) {
                    ++delimEnd;
                }
            }
            if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
                output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
            }
            return output;
        };
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        var unicode = {};
        function normalize(name) {
            return name.replace(/[- _]+/g, '').toLowerCase();
        }
        function pad4(str) {
            while (str.length < 4) {
                str = '0' + str;
            }
            return str;
        }
        function dec(hex) {
            return parseInt(hex, 16);
        }
        function hex(dec) {
            return parseInt(dec, 10).toString(16);
        }
        function charCode(chr) {
            var esc = /^\\[xu](.+)/.exec(chr);
            return esc ? dec(esc[1]) : chr.charCodeAt(chr.charAt(0) === '\\' ? 1 : 0);
        }
        function invertBmp(range) {
            var output = '', lastEnd = -1, start;
            XRegExp.forEach(range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
                start = charCode(m[1]);
                if (start > lastEnd + 1) {
                    output += '\\u' + pad4(hex(lastEnd + 1));
                    if (start > lastEnd + 2) {
                        output += '-\\u' + pad4(hex(start - 1));
                    }
                }
                lastEnd = charCode(m[2] || m[1]);
            });
            if (lastEnd < 65535) {
                output += '\\u' + pad4(hex(lastEnd + 1));
                if (lastEnd < 65534) {
                    output += '-\\uFFFF';
                }
            }
            return output;
        }
        function cacheInvertedBmp(slug) {
            var prop = 'b!';
            return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
        }
        function buildAstral(slug, isNegated) {
            var item = unicode[slug], combined = '';
            if (item.bmp && !item.isBmpLast) {
                combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');
            }
            if (item.astral) {
                combined += item.astral;
            }
            if (item.isBmpLast && item.bmp) {
                combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';
            }
            return isNegated ? '(?:(?!' + combined + ')(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))' : '(?:' + combined + ')';
        }
        function cacheAstral(slug, isNegated) {
            var prop = isNegated ? 'a!' : 'a=';
            return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
        }
        XRegExp.addToken(/\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
            var ERR_DOUBLE_NEG = 'Invalid double negation ', ERR_UNKNOWN_NAME = 'Unknown Unicode token ', ERR_UNKNOWN_REF = 'Unicode token missing data ', ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ', ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes', isNegated = match[1] === 'P' || !!match[2], isAstralMode = flags.indexOf('A') > -1, slug = normalize(match[4] || match[3]), item = unicode[slug];
            if (match[1] === 'P' && match[2]) {
                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
            }
            if (!unicode.hasOwnProperty(slug)) {
                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
            }
            if (item.inverseOf) {
                slug = normalize(item.inverseOf);
                if (!unicode.hasOwnProperty(slug)) {
                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);
                }
                item = unicode[slug];
                isNegated = !isNegated;
            }
            if (!(item.bmp || isAstralMode)) {
                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
            }
            if (isAstralMode) {
                if (scope === 'class') {
                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
                }
                return cacheAstral(slug, isNegated);
            }
            return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : (isNegated ? '[^' : '[') + item.bmp + ']';
        }, {
            scope: 'all',
            optionalFlags: 'A',
            leadChar: '\\'
        });
        XRegExp.addUnicodeData = function (data) {
            var ERR_NO_NAME = 'Unicode token requires name', ERR_NO_DATA = 'Unicode token has no character data ', item, i;
            for (i = 0; i < data.length; ++i) {
                item = data[i];
                if (!item.name) {
                    throw new Error(ERR_NO_NAME);
                }
                if (!(item.inverseOf || item.bmp || item.astral)) {
                    throw new Error(ERR_NO_DATA + item.name);
                }
                unicode[normalize(item.name)] = item;
                if (item.alias) {
                    unicode[normalize(item.alias)] = item;
                }
            }
            XRegExp.cache.flush('patterns');
        };
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        if (!XRegExp.addUnicodeData) {
            throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
        }
        XRegExp.addUnicodeData([
            {
                name: 'InAegean_Numbers',
                astral: '\uD800[\uDD00-\uDD3F]'
            },
            {
                name: 'InAhom',
                astral: '\uD805[\uDF00-\uDF3F]'
            },
            {
                name: 'InAlchemical_Symbols',
                astral: '\uD83D[\uDF00-\uDF7F]'
            },
            {
                name: 'InAlphabetic_Presentation_Forms',
                bmp: '\uFB00-\uFB4F'
            },
            {
                name: 'InAnatolian_Hieroglyphs',
                astral: '\uD811[\uDC00-\uDE7F]'
            },
            {
                name: 'InAncient_Greek_Musical_Notation',
                astral: '\uD834[\uDE00-\uDE4F]'
            },
            {
                name: 'InAncient_Greek_Numbers',
                astral: '\uD800[\uDD40-\uDD8F]'
            },
            {
                name: 'InAncient_Symbols',
                astral: '\uD800[\uDD90-\uDDCF]'
            },
            {
                name: 'InArabic',
                bmp: '\u0600-\u06FF'
            },
            {
                name: 'InArabic_Extended_A',
                bmp: '\u08A0-\u08FF'
            },
            {
                name: 'InArabic_Mathematical_Alphabetic_Symbols',
                astral: '\uD83B[\uDE00-\uDEFF]'
            },
            {
                name: 'InArabic_Presentation_Forms_A',
                bmp: '\uFB50-\uFDFF'
            },
            {
                name: 'InArabic_Presentation_Forms_B',
                bmp: '\uFE70-\uFEFF'
            },
            {
                name: 'InArabic_Supplement',
                bmp: '\u0750-\u077F'
            },
            {
                name: 'InArmenian',
                bmp: '\u0530-\u058F'
            },
            {
                name: 'InArrows',
                bmp: '\u2190-\u21FF'
            },
            {
                name: 'InAvestan',
                astral: '\uD802[\uDF00-\uDF3F]'
            },
            {
                name: 'InBalinese',
                bmp: '\u1B00-\u1B7F'
            },
            {
                name: 'InBamum',
                bmp: '\uA6A0-\uA6FF'
            },
            {
                name: 'InBamum_Supplement',
                astral: '\uD81A[\uDC00-\uDE3F]'
            },
            {
                name: 'InBasic_Latin',
                bmp: '\0-\x7F'
            },
            {
                name: 'InBassa_Vah',
                astral: '\uD81A[\uDED0-\uDEFF]'
            },
            {
                name: 'InBatak',
                bmp: '\u1BC0-\u1BFF'
            },
            {
                name: 'InBengali',
                bmp: '\u0980-\u09FF'
            },
            {
                name: 'InBlock_Elements',
                bmp: '\u2580-\u259F'
            },
            {
                name: 'InBopomofo',
                bmp: '\u3100-\u312F'
            },
            {
                name: 'InBopomofo_Extended',
                bmp: '\u31A0-\u31BF'
            },
            {
                name: 'InBox_Drawing',
                bmp: '\u2500-\u257F'
            },
            {
                name: 'InBrahmi',
                astral: '\uD804[\uDC00-\uDC7F]'
            },
            {
                name: 'InBraille_Patterns',
                bmp: '\u2800-\u28FF'
            },
            {
                name: 'InBuginese',
                bmp: '\u1A00-\u1A1F'
            },
            {
                name: 'InBuhid',
                bmp: '\u1740-\u175F'
            },
            {
                name: 'InByzantine_Musical_Symbols',
                astral: '\uD834[\uDC00-\uDCFF]'
            },
            {
                name: 'InCJK_Compatibility',
                bmp: '\u3300-\u33FF'
            },
            {
                name: 'InCJK_Compatibility_Forms',
                bmp: '\uFE30-\uFE4F'
            },
            {
                name: 'InCJK_Compatibility_Ideographs',
                bmp: '\uF900-\uFAFF'
            },
            {
                name: 'InCJK_Compatibility_Ideographs_Supplement',
                astral: '\uD87E[\uDC00-\uDE1F]'
            },
            {
                name: 'InCJK_Radicals_Supplement',
                bmp: '\u2E80-\u2EFF'
            },
            {
                name: 'InCJK_Strokes',
                bmp: '\u31C0-\u31EF'
            },
            {
                name: 'InCJK_Symbols_and_Punctuation',
                bmp: '\u3000-\u303F'
            },
            {
                name: 'InCJK_Unified_Ideographs',
                bmp: '\u4E00-\u9FFF'
            },
            {
                name: 'InCJK_Unified_Ideographs_Extension_A',
                bmp: '\u3400-\u4DBF'
            },
            {
                name: 'InCJK_Unified_Ideographs_Extension_B',
                astral: '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
            },
            {
                name: 'InCJK_Unified_Ideographs_Extension_C',
                astral: '\uD86D[\uDC00-\uDF3F]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD869[\uDF00-\uDFFF]'
            },
            {
                name: 'InCJK_Unified_Ideographs_Extension_D',
                astral: '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
            },
            {
                name: 'InCJK_Unified_Ideographs_Extension_E',
                astral: '[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]|\uD86E[\uDC20-\uDFFF]'
            },
            {
                name: 'InCarian',
                astral: '\uD800[\uDEA0-\uDEDF]'
            },
            {
                name: 'InCaucasian_Albanian',
                astral: '\uD801[\uDD30-\uDD6F]'
            },
            {
                name: 'InChakma',
                astral: '\uD804[\uDD00-\uDD4F]'
            },
            {
                name: 'InCham',
                bmp: '\uAA00-\uAA5F'
            },
            {
                name: 'InCherokee',
                bmp: '\u13A0-\u13FF'
            },
            {
                name: 'InCherokee_Supplement',
                bmp: '\uAB70-\uABBF'
            },
            {
                name: 'InCombining_Diacritical_Marks',
                bmp: '\u0300-\u036F'
            },
            {
                name: 'InCombining_Diacritical_Marks_Extended',
                bmp: '\u1AB0-\u1AFF'
            },
            {
                name: 'InCombining_Diacritical_Marks_Supplement',
                bmp: '\u1DC0-\u1DFF'
            },
            {
                name: 'InCombining_Diacritical_Marks_for_Symbols',
                bmp: '\u20D0-\u20FF'
            },
            {
                name: 'InCombining_Half_Marks',
                bmp: '\uFE20-\uFE2F'
            },
            {
                name: 'InCommon_Indic_Number_Forms',
                bmp: '\uA830-\uA83F'
            },
            {
                name: 'InControl_Pictures',
                bmp: '\u2400-\u243F'
            },
            {
                name: 'InCoptic',
                bmp: '\u2C80-\u2CFF'
            },
            {
                name: 'InCoptic_Epact_Numbers',
                astral: '\uD800[\uDEE0-\uDEFF]'
            },
            {
                name: 'InCounting_Rod_Numerals',
                astral: '\uD834[\uDF60-\uDF7F]'
            },
            {
                name: 'InCuneiform',
                astral: '\uD808[\uDC00-\uDFFF]'
            },
            {
                name: 'InCuneiform_Numbers_and_Punctuation',
                astral: '\uD809[\uDC00-\uDC7F]'
            },
            {
                name: 'InCurrency_Symbols',
                bmp: '\u20A0-\u20CF'
            },
            {
                name: 'InCypriot_Syllabary',
                astral: '\uD802[\uDC00-\uDC3F]'
            },
            {
                name: 'InCyrillic',
                bmp: '\u0400-\u04FF'
            },
            {
                name: 'InCyrillic_Extended_A',
                bmp: '\u2DE0-\u2DFF'
            },
            {
                name: 'InCyrillic_Extended_B',
                bmp: '\uA640-\uA69F'
            },
            {
                name: 'InCyrillic_Supplement',
                bmp: '\u0500-\u052F'
            },
            {
                name: 'InDeseret',
                astral: '\uD801[\uDC00-\uDC4F]'
            },
            {
                name: 'InDevanagari',
                bmp: '\u0900-\u097F'
            },
            {
                name: 'InDevanagari_Extended',
                bmp: '\uA8E0-\uA8FF'
            },
            {
                name: 'InDingbats',
                bmp: '\u2700-\u27BF'
            },
            {
                name: 'InDomino_Tiles',
                astral: '\uD83C[\uDC30-\uDC9F]'
            },
            {
                name: 'InDuployan',
                astral: '\uD82F[\uDC00-\uDC9F]'
            },
            {
                name: 'InEarly_Dynastic_Cuneiform',
                astral: '\uD809[\uDC80-\uDD4F]'
            },
            {
                name: 'InEgyptian_Hieroglyphs',
                astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
            },
            {
                name: 'InElbasan',
                astral: '\uD801[\uDD00-\uDD2F]'
            },
            {
                name: 'InEmoticons',
                astral: '\uD83D[\uDE00-\uDE4F]'
            },
            {
                name: 'InEnclosed_Alphanumeric_Supplement',
                astral: '\uD83C[\uDD00-\uDDFF]'
            },
            {
                name: 'InEnclosed_Alphanumerics',
                bmp: '\u2460-\u24FF'
            },
            {
                name: 'InEnclosed_CJK_Letters_and_Months',
                bmp: '\u3200-\u32FF'
            },
            {
                name: 'InEnclosed_Ideographic_Supplement',
                astral: '\uD83C[\uDE00-\uDEFF]'
            },
            {
                name: 'InEthiopic',
                bmp: '\u1200-\u137F'
            },
            {
                name: 'InEthiopic_Extended',
                bmp: '\u2D80-\u2DDF'
            },
            {
                name: 'InEthiopic_Extended_A',
                bmp: '\uAB00-\uAB2F'
            },
            {
                name: 'InEthiopic_Supplement',
                bmp: '\u1380-\u139F'
            },
            {
                name: 'InGeneral_Punctuation',
                bmp: '\u2000-\u206F'
            },
            {
                name: 'InGeometric_Shapes',
                bmp: '\u25A0-\u25FF'
            },
            {
                name: 'InGeometric_Shapes_Extended',
                astral: '\uD83D[\uDF80-\uDFFF]'
            },
            {
                name: 'InGeorgian',
                bmp: '\u10A0-\u10FF'
            },
            {
                name: 'InGeorgian_Supplement',
                bmp: '\u2D00-\u2D2F'
            },
            {
                name: 'InGlagolitic',
                bmp: '\u2C00-\u2C5F'
            },
            {
                name: 'InGothic',
                astral: '\uD800[\uDF30-\uDF4F]'
            },
            {
                name: 'InGrantha',
                astral: '\uD804[\uDF00-\uDF7F]'
            },
            {
                name: 'InGreek_Extended',
                bmp: '\u1F00-\u1FFF'
            },
            {
                name: 'InGreek_and_Coptic',
                bmp: '\u0370-\u03FF'
            },
            {
                name: 'InGujarati',
                bmp: '\u0A80-\u0AFF'
            },
            {
                name: 'InGurmukhi',
                bmp: '\u0A00-\u0A7F'
            },
            {
                name: 'InHalfwidth_and_Fullwidth_Forms',
                bmp: '\uFF00-\uFFEF'
            },
            {
                name: 'InHangul_Compatibility_Jamo',
                bmp: '\u3130-\u318F'
            },
            {
                name: 'InHangul_Jamo',
                bmp: '\u1100-\u11FF'
            },
            {
                name: 'InHangul_Jamo_Extended_A',
                bmp: '\uA960-\uA97F'
            },
            {
                name: 'InHangul_Jamo_Extended_B',
                bmp: '\uD7B0-\uD7FF'
            },
            {
                name: 'InHangul_Syllables',
                bmp: '\uAC00-\uD7AF'
            },
            {
                name: 'InHanunoo',
                bmp: '\u1720-\u173F'
            },
            {
                name: 'InHatran',
                astral: '\uD802[\uDCE0-\uDCFF]'
            },
            {
                name: 'InHebrew',
                bmp: '\u0590-\u05FF'
            },
            {
                name: 'InHigh_Private_Use_Surrogates',
                bmp: '\uDB80-\uDBFF'
            },
            {
                name: 'InHigh_Surrogates',
                bmp: '\uD800-\uDB7F'
            },
            {
                name: 'InHiragana',
                bmp: '\u3040-\u309F'
            },
            {
                name: 'InIPA_Extensions',
                bmp: '\u0250-\u02AF'
            },
            {
                name: 'InIdeographic_Description_Characters',
                bmp: '\u2FF0-\u2FFF'
            },
            {
                name: 'InImperial_Aramaic',
                astral: '\uD802[\uDC40-\uDC5F]'
            },
            {
                name: 'InInscriptional_Pahlavi',
                astral: '\uD802[\uDF60-\uDF7F]'
            },
            {
                name: 'InInscriptional_Parthian',
                astral: '\uD802[\uDF40-\uDF5F]'
            },
            {
                name: 'InJavanese',
                bmp: '\uA980-\uA9DF'
            },
            {
                name: 'InKaithi',
                astral: '\uD804[\uDC80-\uDCCF]'
            },
            {
                name: 'InKana_Supplement',
                astral: '\uD82C[\uDC00-\uDCFF]'
            },
            {
                name: 'InKanbun',
                bmp: '\u3190-\u319F'
            },
            {
                name: 'InKangxi_Radicals',
                bmp: '\u2F00-\u2FDF'
            },
            {
                name: 'InKannada',
                bmp: '\u0C80-\u0CFF'
            },
            {
                name: 'InKatakana',
                bmp: '\u30A0-\u30FF'
            },
            {
                name: 'InKatakana_Phonetic_Extensions',
                bmp: '\u31F0-\u31FF'
            },
            {
                name: 'InKayah_Li',
                bmp: '\uA900-\uA92F'
            },
            {
                name: 'InKharoshthi',
                astral: '\uD802[\uDE00-\uDE5F]'
            },
            {
                name: 'InKhmer',
                bmp: '\u1780-\u17FF'
            },
            {
                name: 'InKhmer_Symbols',
                bmp: '\u19E0-\u19FF'
            },
            {
                name: 'InKhojki',
                astral: '\uD804[\uDE00-\uDE4F]'
            },
            {
                name: 'InKhudawadi',
                astral: '\uD804[\uDEB0-\uDEFF]'
            },
            {
                name: 'InLao',
                bmp: '\u0E80-\u0EFF'
            },
            {
                name: 'InLatin_Extended_Additional',
                bmp: '\u1E00-\u1EFF'
            },
            {
                name: 'InLatin_Extended_A',
                bmp: '\u0100-\u017F'
            },
            {
                name: 'InLatin_Extended_B',
                bmp: '\u0180-\u024F'
            },
            {
                name: 'InLatin_Extended_C',
                bmp: '\u2C60-\u2C7F'
            },
            {
                name: 'InLatin_Extended_D',
                bmp: '\uA720-\uA7FF'
            },
            {
                name: 'InLatin_Extended_E',
                bmp: '\uAB30-\uAB6F'
            },
            {
                name: 'InLatin_1_Supplement',
                bmp: '\x80-\xFF'
            },
            {
                name: 'InLepcha',
                bmp: '\u1C00-\u1C4F'
            },
            {
                name: 'InLetterlike_Symbols',
                bmp: '\u2100-\u214F'
            },
            {
                name: 'InLimbu',
                bmp: '\u1900-\u194F'
            },
            {
                name: 'InLinear_A',
                astral: '\uD801[\uDE00-\uDF7F]'
            },
            {
                name: 'InLinear_B_Ideograms',
                astral: '\uD800[\uDC80-\uDCFF]'
            },
            {
                name: 'InLinear_B_Syllabary',
                astral: '\uD800[\uDC00-\uDC7F]'
            },
            {
                name: 'InLisu',
                bmp: '\uA4D0-\uA4FF'
            },
            {
                name: 'InLow_Surrogates',
                bmp: '\uDC00-\uDFFF'
            },
            {
                name: 'InLycian',
                astral: '\uD800[\uDE80-\uDE9F]'
            },
            {
                name: 'InLydian',
                astral: '\uD802[\uDD20-\uDD3F]'
            },
            {
                name: 'InMahajani',
                astral: '\uD804[\uDD50-\uDD7F]'
            },
            {
                name: 'InMahjong_Tiles',
                astral: '\uD83C[\uDC00-\uDC2F]'
            },
            {
                name: 'InMalayalam',
                bmp: '\u0D00-\u0D7F'
            },
            {
                name: 'InMandaic',
                bmp: '\u0840-\u085F'
            },
            {
                name: 'InManichaean',
                astral: '\uD802[\uDEC0-\uDEFF]'
            },
            {
                name: 'InMathematical_Alphanumeric_Symbols',
                astral: '\uD835[\uDC00-\uDFFF]'
            },
            {
                name: 'InMathematical_Operators',
                bmp: '\u2200-\u22FF'
            },
            {
                name: 'InMeetei_Mayek',
                bmp: '\uABC0-\uABFF'
            },
            {
                name: 'InMeetei_Mayek_Extensions',
                bmp: '\uAAE0-\uAAFF'
            },
            {
                name: 'InMende_Kikakui',
                astral: '\uD83A[\uDC00-\uDCDF]'
            },
            {
                name: 'InMeroitic_Cursive',
                astral: '\uD802[\uDDA0-\uDDFF]'
            },
            {
                name: 'InMeroitic_Hieroglyphs',
                astral: '\uD802[\uDD80-\uDD9F]'
            },
            {
                name: 'InMiao',
                astral: '\uD81B[\uDF00-\uDF9F]'
            },
            {
                name: 'InMiscellaneous_Mathematical_Symbols_A',
                bmp: '\u27C0-\u27EF'
            },
            {
                name: 'InMiscellaneous_Mathematical_Symbols_B',
                bmp: '\u2980-\u29FF'
            },
            {
                name: 'InMiscellaneous_Symbols',
                bmp: '\u2600-\u26FF'
            },
            {
                name: 'InMiscellaneous_Symbols_and_Arrows',
                bmp: '\u2B00-\u2BFF'
            },
            {
                name: 'InMiscellaneous_Symbols_and_Pictographs',
                astral: '\uD83D[\uDC00-\uDDFF]|\uD83C[\uDF00-\uDFFF]'
            },
            {
                name: 'InMiscellaneous_Technical',
                bmp: '\u2300-\u23FF'
            },
            {
                name: 'InModi',
                astral: '\uD805[\uDE00-\uDE5F]'
            },
            {
                name: 'InModifier_Tone_Letters',
                bmp: '\uA700-\uA71F'
            },
            {
                name: 'InMongolian',
                bmp: '\u1800-\u18AF'
            },
            {
                name: 'InMro',
                astral: '\uD81A[\uDE40-\uDE6F]'
            },
            {
                name: 'InMultani',
                astral: '\uD804[\uDE80-\uDEAF]'
            },
            {
                name: 'InMusical_Symbols',
                astral: '\uD834[\uDD00-\uDDFF]'
            },
            {
                name: 'InMyanmar',
                bmp: '\u1000-\u109F'
            },
            {
                name: 'InMyanmar_Extended_A',
                bmp: '\uAA60-\uAA7F'
            },
            {
                name: 'InMyanmar_Extended_B',
                bmp: '\uA9E0-\uA9FF'
            },
            {
                name: 'InNKo',
                bmp: '\u07C0-\u07FF'
            },
            {
                name: 'InNabataean',
                astral: '\uD802[\uDC80-\uDCAF]'
            },
            {
                name: 'InNew_Tai_Lue',
                bmp: '\u1980-\u19DF'
            },
            {
                name: 'InNumber_Forms',
                bmp: '\u2150-\u218F'
            },
            {
                name: 'InOgham',
                bmp: '\u1680-\u169F'
            },
            {
                name: 'InOl_Chiki',
                bmp: '\u1C50-\u1C7F'
            },
            {
                name: 'InOld_Hungarian',
                astral: '\uD803[\uDC80-\uDCFF]'
            },
            {
                name: 'InOld_Italic',
                astral: '\uD800[\uDF00-\uDF2F]'
            },
            {
                name: 'InOld_North_Arabian',
                astral: '\uD802[\uDE80-\uDE9F]'
            },
            {
                name: 'InOld_Permic',
                astral: '\uD800[\uDF50-\uDF7F]'
            },
            {
                name: 'InOld_Persian',
                astral: '\uD800[\uDFA0-\uDFDF]'
            },
            {
                name: 'InOld_South_Arabian',
                astral: '\uD802[\uDE60-\uDE7F]'
            },
            {
                name: 'InOld_Turkic',
                astral: '\uD803[\uDC00-\uDC4F]'
            },
            {
                name: 'InOptical_Character_Recognition',
                bmp: '\u2440-\u245F'
            },
            {
                name: 'InOriya',
                bmp: '\u0B00-\u0B7F'
            },
            {
                name: 'InOrnamental_Dingbats',
                astral: '\uD83D[\uDE50-\uDE7F]'
            },
            {
                name: 'InOsmanya',
                astral: '\uD801[\uDC80-\uDCAF]'
            },
            {
                name: 'InPahawh_Hmong',
                astral: '\uD81A[\uDF00-\uDF8F]'
            },
            {
                name: 'InPalmyrene',
                astral: '\uD802[\uDC60-\uDC7F]'
            },
            {
                name: 'InPau_Cin_Hau',
                astral: '\uD806[\uDEC0-\uDEFF]'
            },
            {
                name: 'InPhags_pa',
                bmp: '\uA840-\uA87F'
            },
            {
                name: 'InPhaistos_Disc',
                astral: '\uD800[\uDDD0-\uDDFF]'
            },
            {
                name: 'InPhoenician',
                astral: '\uD802[\uDD00-\uDD1F]'
            },
            {
                name: 'InPhonetic_Extensions',
                bmp: '\u1D00-\u1D7F'
            },
            {
                name: 'InPhonetic_Extensions_Supplement',
                bmp: '\u1D80-\u1DBF'
            },
            {
                name: 'InPlaying_Cards',
                astral: '\uD83C[\uDCA0-\uDCFF]'
            },
            {
                name: 'InPrivate_Use_Area',
                bmp: '\uE000-\uF8FF'
            },
            {
                name: 'InPsalter_Pahlavi',
                astral: '\uD802[\uDF80-\uDFAF]'
            },
            {
                name: 'InRejang',
                bmp: '\uA930-\uA95F'
            },
            {
                name: 'InRumi_Numeral_Symbols',
                astral: '\uD803[\uDE60-\uDE7F]'
            },
            {
                name: 'InRunic',
                bmp: '\u16A0-\u16FF'
            },
            {
                name: 'InSamaritan',
                bmp: '\u0800-\u083F'
            },
            {
                name: 'InSaurashtra',
                bmp: '\uA880-\uA8DF'
            },
            {
                name: 'InSharada',
                astral: '\uD804[\uDD80-\uDDDF]'
            },
            {
                name: 'InShavian',
                astral: '\uD801[\uDC50-\uDC7F]'
            },
            {
                name: 'InShorthand_Format_Controls',
                astral: '\uD82F[\uDCA0-\uDCAF]'
            },
            {
                name: 'InSiddham',
                astral: '\uD805[\uDD80-\uDDFF]'
            },
            {
                name: 'InSinhala',
                bmp: '\u0D80-\u0DFF'
            },
            {
                name: 'InSinhala_Archaic_Numbers',
                astral: '\uD804[\uDDE0-\uDDFF]'
            },
            {
                name: 'InSmall_Form_Variants',
                bmp: '\uFE50-\uFE6F'
            },
            {
                name: 'InSora_Sompeng',
                astral: '\uD804[\uDCD0-\uDCFF]'
            },
            {
                name: 'InSpacing_Modifier_Letters',
                bmp: '\u02B0-\u02FF'
            },
            {
                name: 'InSpecials',
                bmp: '\uFFF0-\uFFFF'
            },
            {
                name: 'InSundanese',
                bmp: '\u1B80-\u1BBF'
            },
            {
                name: 'InSundanese_Supplement',
                bmp: '\u1CC0-\u1CCF'
            },
            {
                name: 'InSuperscripts_and_Subscripts',
                bmp: '\u2070-\u209F'
            },
            {
                name: 'InSupplemental_Arrows_A',
                bmp: '\u27F0-\u27FF'
            },
            {
                name: 'InSupplemental_Arrows_B',
                bmp: '\u2900-\u297F'
            },
            {
                name: 'InSupplemental_Arrows_C',
                astral: '\uD83E[\uDC00-\uDCFF]'
            },
            {
                name: 'InSupplemental_Mathematical_Operators',
                bmp: '\u2A00-\u2AFF'
            },
            {
                name: 'InSupplemental_Punctuation',
                bmp: '\u2E00-\u2E7F'
            },
            {
                name: 'InSupplemental_Symbols_and_Pictographs',
                astral: '\uD83E[\uDD00-\uDDFF]'
            },
            {
                name: 'InSupplementary_Private_Use_Area_A',
                astral: '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
            },
            {
                name: 'InSupplementary_Private_Use_Area_B',
                astral: '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
            },
            {
                name: 'InSutton_SignWriting',
                astral: '\uD836[\uDC00-\uDEAF]'
            },
            {
                name: 'InSyloti_Nagri',
                bmp: '\uA800-\uA82F'
            },
            {
                name: 'InSyriac',
                bmp: '\u0700-\u074F'
            },
            {
                name: 'InTagalog',
                bmp: '\u1700-\u171F'
            },
            {
                name: 'InTagbanwa',
                bmp: '\u1760-\u177F'
            },
            {
                name: 'InTags',
                astral: '\uDB40[\uDC00-\uDC7F]'
            },
            {
                name: 'InTai_Le',
                bmp: '\u1950-\u197F'
            },
            {
                name: 'InTai_Tham',
                bmp: '\u1A20-\u1AAF'
            },
            {
                name: 'InTai_Viet',
                bmp: '\uAA80-\uAADF'
            },
            {
                name: 'InTai_Xuan_Jing_Symbols',
                astral: '\uD834[\uDF00-\uDF5F]'
            },
            {
                name: 'InTakri',
                astral: '\uD805[\uDE80-\uDECF]'
            },
            {
                name: 'InTamil',
                bmp: '\u0B80-\u0BFF'
            },
            {
                name: 'InTelugu',
                bmp: '\u0C00-\u0C7F'
            },
            {
                name: 'InThaana',
                bmp: '\u0780-\u07BF'
            },
            {
                name: 'InThai',
                bmp: '\u0E00-\u0E7F'
            },
            {
                name: 'InTibetan',
                bmp: '\u0F00-\u0FFF'
            },
            {
                name: 'InTifinagh',
                bmp: '\u2D30-\u2D7F'
            },
            {
                name: 'InTirhuta',
                astral: '\uD805[\uDC80-\uDCDF]'
            },
            {
                name: 'InTransport_and_Map_Symbols',
                astral: '\uD83D[\uDE80-\uDEFF]'
            },
            {
                name: 'InUgaritic',
                astral: '\uD800[\uDF80-\uDF9F]'
            },
            {
                name: 'InUnified_Canadian_Aboriginal_Syllabics',
                bmp: '\u1400-\u167F'
            },
            {
                name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
                bmp: '\u18B0-\u18FF'
            },
            {
                name: 'InVai',
                bmp: '\uA500-\uA63F'
            },
            {
                name: 'InVariation_Selectors',
                bmp: '\uFE00-\uFE0F'
            },
            {
                name: 'InVariation_Selectors_Supplement',
                astral: '\uDB40[\uDD00-\uDDEF]'
            },
            {
                name: 'InVedic_Extensions',
                bmp: '\u1CD0-\u1CFF'
            },
            {
                name: 'InVertical_Forms',
                bmp: '\uFE10-\uFE1F'
            },
            {
                name: 'InWarang_Citi',
                astral: '\uD806[\uDCA0-\uDCFF]'
            },
            {
                name: 'InYi_Radicals',
                bmp: '\uA490-\uA4CF'
            },
            {
                name: 'InYi_Syllables',
                bmp: '\uA000-\uA48F'
            },
            {
                name: 'InYijing_Hexagram_Symbols',
                bmp: '\u4DC0-\u4DFF'
            }
        ]);
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        if (!XRegExp.addUnicodeData) {
            throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
        }
        XRegExp.addUnicodeData([
            {
                name: 'C',
                alias: 'Other',
                isBmpLast: true,
                bmp: '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5-\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C80\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D4F-\u0D56\u0D58-\u0D5E\u0D64\u0D65\u0D76-\u0D78\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C80-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFB\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FB-\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E43-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AE\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C5-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
                astral: '\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDD9B-\uDDE5\uDE03-\uDE0F\uDE3B-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFFF]|\uD86E[\uDC1E\uDC1F]|\uD83D[\uDD7A\uDDA4\uDED1-\uDEDF\uDEED-\uDEEF\uDEF4-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8D-\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3E-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD86D[\uDF35-\uDF3F]|[\uD807\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD81C-\uD82B\uD82D\uD82E\uD830-\uD833\uD837-\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD805[\uDC00-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD19-\uDD7F\uDD85-\uDDBF\uDDC1-\uDFFF]|\uD873[\uDEA2-\uDFFF]'
            },
            {
                name: 'Cc',
                alias: 'Control',
                bmp: '\0-\x1F\x7F-\x9F'
            },
            {
                name: 'Cf',
                alias: 'Format',
                bmp: '\xAD\u0600-\u0605\u061C\u06DD\u070F\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
                astral: '\uDB40[\uDC01\uDC20-\uDC7F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uD804\uDCBD'
            },
            {
                name: 'Cn',
                alias: 'Unassigned',
                bmp: '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5-\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C80\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D4F-\u0D56\u0D58-\u0D5E\u0D64\u0D65\u0D76-\u0D78\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C80-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFB\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FB-\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E43-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AE\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C5-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
                astral: '\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDD9B-\uDDE5\uDE03-\uDE0F\uDE3B-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFFF]|\uD86E[\uDC1E\uDC1F]|\uD83D[\uDD7A\uDDA4\uDED1-\uDEDF\uDEED-\uDEEF\uDEF4-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8D-\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD86D[\uDF35-\uDF3F]|[\uD807\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD81C-\uD82B\uD82D\uD82E\uD830-\uD833\uD837-\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD805[\uDC00-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3E-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD19-\uDD7F\uDD85-\uDDBF\uDDC1-\uDFFF]|\uD873[\uDEA2-\uDFFF]'
            },
            {
                name: 'Co',
                alias: 'Private_Use',
                bmp: '\uE000-\uF8FF',
                astral: '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
            },
            {
                name: 'Cs',
                alias: 'Surrogate',
                bmp: '\uD800-\uDFFF'
            },
            {
                name: 'L',
                alias: 'Letter',
                bmp: 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                astral: '\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD83A[\uDC00-\uDCC4]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD80D[\uDC00-\uDC2E]|\uD87E[\uDC00-\uDE1D]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD809[\uDC80-\uDD43]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD808[\uDC00-\uDF99]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD811[\uDC00-\uDE46]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD82C[\uDC00\uDC01]|\uD873[\uDC00-\uDEA1]'
            },
            {
                name: 'Ll',
                alias: 'Lowercase_Letter',
                bmp: 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
                astral: '\uD803[\uDCC0-\uDCF2]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD801[\uDC28-\uDC4F]|\uD806[\uDCC0-\uDCDF]'
            },
            {
                name: 'Lm',
                alias: 'Modifier_Letter',
                bmp: '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F',
                astral: '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F]'
            },
            {
                name: 'Lo',
                alias: 'Other_Letter',
                bmp: '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                astral: '\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD83A[\uDC00-\uDCC4]|\uD803[\uDC00-\uDC48]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD80D[\uDC00-\uDC2E]|\uD87E[\uDC00-\uDE1D]|\uD81B[\uDF00-\uDF44\uDF50]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD809[\uDC80-\uDD43]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD808[\uDC00-\uDF99]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD811[\uDC00-\uDE46]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD82C[\uDC00\uDC01]|\uD873[\uDC00-\uDEA1]'
            },
            {
                name: 'Lt',
                alias: 'Titlecase_Letter',
                bmp: '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
            },
            {
                name: 'Lu',
                alias: 'Uppercase_Letter',
                bmp: 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
                astral: '\uD806[\uDCA0-\uDCBF]|\uD803[\uDC80-\uDCB2]|\uD801[\uDC00-\uDC27]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]'
            },
            {
                name: 'M',
                alias: 'Mark',
                bmp: '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
                astral: '\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDCA-\uDDCC\uDE2C-\uDE37\uDEDF-\uDEEA\uDF00-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD82F[\uDC9D\uDC9E]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]'
            },
            {
                name: 'Mc',
                alias: 'Spacing_Mark',
                bmp: '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\u1CF3\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
                astral: '\uD834[\uDD65\uDD66\uDD6D-\uDD72]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD81B[\uDF51-\uDF7E]'
            },
            {
                name: 'Me',
                alias: 'Enclosing_Mark',
                bmp: '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
            },
            {
                name: 'Mn',
                alias: 'Nonspacing_Mark',
                bmp: '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
                astral: '\uD805[\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]'
            },
            {
                name: 'N',
                alias: 'Number',
                bmp: '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
                astral: '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD806[\uDCE0-\uDCF2]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD834[\uDF60-\uDF71]|\uD83C[\uDD00-\uDD0C]|\uD809[\uDC00-\uDC6E]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD805[\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]'
            },
            {
                name: 'Nd',
                alias: 'Decimal_Number',
                bmp: '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
                astral: '\uD801[\uDCA0-\uDCA9]|\uD835[\uDFCE-\uDFFF]|\uD805[\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]'
            },
            {
                name: 'Nl',
                alias: 'Letter_Number',
                bmp: '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
                astral: '\uD809[\uDC00-\uDC6E]|\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]'
            },
            {
                name: 'No',
                alias: 'Other_Number',
                bmp: '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D70-\u0D75\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
                astral: '\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD83C[\uDD00-\uDD0C]|\uD806[\uDCEA-\uDCF2]|\uD83A[\uDCC7-\uDCCF]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD805[\uDF3A\uDF3B]|\uD81A[\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]'
            },
            {
                name: 'P',
                alias: 'Punctuation',
                bmp: '!-#%-\\x2A,-/:;\\x3F@\\x5B-\\x5D_\\x7B}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
                astral: '\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD809[\uDC70-\uDC74]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD836[\uDE87-\uDE8B]|\uD801\uDD6F|\uD82F\uDC9F|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]'
            },
            {
                name: 'Pc',
                alias: 'Connector_Punctuation',
                bmp: '_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
            },
            {
                name: 'Pd',
                alias: 'Dash_Punctuation',
                bmp: '\\x2D\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
            },
            {
                name: 'Pe',
                alias: 'Close_Punctuation',
                bmp: '\\x29\\x5D}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
            },
            {
                name: 'Pf',
                alias: 'Final_Punctuation',
                bmp: '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
            },
            {
                name: 'Pi',
                alias: 'Initial_Punctuation',
                bmp: '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
            },
            {
                name: 'Po',
                alias: 'Other_Punctuation',
                bmp: '!-#%-\'\\x2A,\\x2E/:;\\x3F@\\x5C\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
                astral: '\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD809[\uDC70-\uDC74]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD836[\uDE87-\uDE8B]|\uD801\uDD6F|\uD82F\uDC9F|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]'
            },
            {
                name: 'Ps',
                alias: 'Open_Punctuation',
                bmp: '\\x28\\x5B\\x7B\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
            },
            {
                name: 'S',
                alias: 'Symbol',
                bmp: '\\x24\\x2B<->\\x5E`\\x7C~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BE\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u23FA\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
                astral: '\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDD9A\uDDE6-\uDE02\uDE10-\uDE3A\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDD79\uDD7B-\uDDA3\uDDA5-\uDED0\uDEE0-\uDEEC\uDEF0-\uDEF3\uDF00-\uDF73\uDF80-\uDFD4]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD82F\uDC9C|\uD805\uDF3F|\uD802[\uDC77\uDC78\uDEC8]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD83B[\uDEF0\uDEF1]'
            },
            {
                name: 'Sc',
                alias: 'Currency_Symbol',
                bmp: '\\x24\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BE\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6'
            },
            {
                name: 'Sk',
                alias: 'Modifier_Symbol',
                bmp: '\\x5E`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
                astral: '\uD83C[\uDFFB-\uDFFF]'
            },
            {
                name: 'Sm',
                alias: 'Math_Symbol',
                bmp: '\\x2B<->\\x7C~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
                astral: '\uD83B[\uDEF0\uDEF1]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]'
            },
            {
                name: 'So',
                alias: 'Other_Symbol',
                bmp: '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u23FA\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
                astral: '\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD83D[\uDC00-\uDD79\uDD7B-\uDDA3\uDDA5-\uDED0\uDEE0-\uDEEC\uDEF0-\uDEF3\uDF00-\uDF73\uDF80-\uDFD4]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDD9A\uDDE6-\uDE02\uDE10-\uDE3A\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFA]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD82F\uDC9C|\uD805\uDF3F|\uD802[\uDC77\uDC78\uDEC8]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]'
            },
            {
                name: 'Z',
                alias: 'Separator',
                bmp: ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
            },
            {
                name: 'Zl',
                alias: 'Line_Separator',
                bmp: '\u2028'
            },
            {
                name: 'Zp',
                alias: 'Paragraph_Separator',
                bmp: '\u2029'
            },
            {
                name: 'Zs',
                alias: 'Space_Separator',
                bmp: ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
            }
        ]);
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        if (!XRegExp.addUnicodeData) {
            throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
        }
        var unicodeData = [
                {
                    name: 'ASCII',
                    bmp: '\0-\x7F'
                },
                {
                    name: 'Alphabetic',
                    bmp: 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u08A0-\u08B4\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA7E-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                    astral: '\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD83A[\uDC00-\uDCC4]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD80D[\uDC00-\uDC2E]|\uD87E[\uDC00-\uDE1D]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD808[\uDC00-\uDF99]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD805[\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF19\uDF1D-\uDF2A]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD811[\uDC00-\uDE46]|\uD82C[\uDC00\uDC01]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F]|\uD873[\uDC00-\uDEA1]'
                },
                {
                    name: 'Any',
                    isBmpLast: true,
                    bmp: '\0-\uFFFF',
                    astral: '[\uD800-\uDBFF][\uDC00-\uDFFF]'
                },
                {
                    name: 'Default_Ignorable_Code_Point',
                    bmp: '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
                    astral: '[\uDB40-\uDB43][\uDC00-\uDFFF]|\uD834[\uDD73-\uDD7A]|\uD82F[\uDCA0-\uDCA3]'
                },
                {
                    name: 'Lowercase',
                    bmp: 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
                    astral: '\uD803[\uDCC0-\uDCF2]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD801[\uDC28-\uDC4F]|\uD806[\uDCC0-\uDCDF]'
                },
                {
                    name: 'Noncharacter_Code_Point',
                    bmp: '\uFDD0-\uFDEF\uFFFE\uFFFF',
                    astral: '[\uDB3F\uDB7F\uDBBF\uDBFF\uD83F\uD87F\uD8BF\uDAFF\uD97F\uD9BF\uD9FF\uDA3F\uD8FF\uDABF\uDA7F\uD93F][\uDFFE\uDFFF]'
                },
                {
                    name: 'Uppercase',
                    bmp: 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
                    astral: '\uD806[\uDCA0-\uDCBF]|\uD803[\uDC80-\uDCB2]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD801[\uDC00-\uDC27]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
                },
                {
                    name: 'White_Space',
                    bmp: '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                }
            ];
        unicodeData.push({
            name: 'Assigned',
            inverseOf: 'Cn'
        });
        XRegExp.addUnicodeData(unicodeData);
    }(XRegExp));
    (function (XRegExp) {
        'use strict';
        if (!XRegExp.addUnicodeData) {
            throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
        }
        XRegExp.addUnicodeData([
            {
                name: 'Ahom',
                astral: '\uD805[\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF3F]'
            },
            {
                name: 'Anatolian_Hieroglyphs',
                astral: '\uD811[\uDC00-\uDE46]'
            },
            {
                name: 'Arabic',
                bmp: '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
                astral: '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
            },
            {
                name: 'Armenian',
                bmp: '\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17'
            },
            {
                name: 'Avestan',
                astral: '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
            },
            {
                name: 'Balinese',
                bmp: '\u1B00-\u1B4B\u1B50-\u1B7C'
            },
            {
                name: 'Bamum',
                bmp: '\uA6A0-\uA6F7',
                astral: '\uD81A[\uDC00-\uDE38]'
            },
            {
                name: 'Bassa_Vah',
                astral: '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
            },
            {
                name: 'Batak',
                bmp: '\u1BC0-\u1BF3\u1BFC-\u1BFF'
            },
            {
                name: 'Bengali',
                bmp: '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FB'
            },
            {
                name: 'Bopomofo',
                bmp: '\u02EA\u02EB\u3105-\u312D\u31A0-\u31BA'
            },
            {
                name: 'Brahmi',
                astral: '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
            },
            {
                name: 'Braille',
                bmp: '\u2800-\u28FF'
            },
            {
                name: 'Buginese',
                bmp: '\u1A00-\u1A1B\u1A1E\u1A1F'
            },
            {
                name: 'Buhid',
                bmp: '\u1740-\u1753'
            },
            {
                name: 'Canadian_Aboriginal',
                bmp: '\u1400-\u167F\u18B0-\u18F5'
            },
            {
                name: 'Carian',
                astral: '\uD800[\uDEA0-\uDED0]'
            },
            {
                name: 'Caucasian_Albanian',
                astral: '\uD801[\uDD30-\uDD63\uDD6F]'
            },
            {
                name: 'Chakma',
                astral: '\uD804[\uDD00-\uDD34\uDD36-\uDD43]'
            },
            {
                name: 'Cham',
                bmp: '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
            },
            {
                name: 'Cherokee',
                bmp: '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
            },
            {
                name: 'Common',
                bmp: '\0-@\\x5B-`\\x7B-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061C\u061F\u0640\u06DD\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BE\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u23FA\u2400-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2E00-\u2E42\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
                astral: '\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD82F[\uDCA0-\uDCA3]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uDB40[\uDC01\uDC20-\uDC7F]|\uD83D[\uDC00-\uDD79\uDD7B-\uDDA3\uDDA5-\uDED0\uDEE0-\uDEEC\uDEF0-\uDEF3\uDF00-\uDF73\uDF80-\uDFD4]|\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDF00-\uDF56\uDF60-\uDF71]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3A\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]'
            },
            {
                name: 'Coptic',
                bmp: '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
            },
            {
                name: 'Cuneiform',
                astral: '\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]|\uD808[\uDC00-\uDF99]'
            },
            {
                name: 'Cypriot',
                astral: '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
            },
            {
                name: 'Cyrillic',
                bmp: '\u0400-\u0484\u0487-\u052F\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
            },
            {
                name: 'Deseret',
                astral: '\uD801[\uDC00-\uDC4F]'
            },
            {
                name: 'Devanagari',
                bmp: '\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FD'
            },
            {
                name: 'Duployan',
                astral: '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
            },
            {
                name: 'Egyptian_Hieroglyphs',
                astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
            },
            {
                name: 'Elbasan',
                astral: '\uD801[\uDD00-\uDD27]'
            },
            {
                name: 'Ethiopic',
                bmp: '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
            },
            {
                name: 'Georgian',
                bmp: '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D'
            },
            {
                name: 'Glagolitic',
                bmp: '\u2C00-\u2C2E\u2C30-\u2C5E'
            },
            {
                name: 'Gothic',
                astral: '\uD800[\uDF30-\uDF4A]'
            },
            {
                name: 'Grantha',
                astral: '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
            },
            {
                name: 'Greek',
                bmp: '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
                astral: '\uD800[\uDD40-\uDD8C\uDDA0]|\uD834[\uDE00-\uDE45]'
            },
            {
                name: 'Gujarati',
                bmp: '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9'
            },
            {
                name: 'Gurmukhi',
                bmp: '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75'
            },
            {
                name: 'Han',
                bmp: '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FD5\uF900-\uFA6D\uFA70-\uFAD9',
                astral: '\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD87E[\uDC00-\uDE1D]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD873[\uDC00-\uDEA1]'
            },
            {
                name: 'Hangul',
                bmp: '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
            },
            {
                name: 'Hanunoo',
                bmp: '\u1720-\u1734'
            },
            {
                name: 'Hatran',
                astral: '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
            },
            {
                name: 'Hebrew',
                bmp: '\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
            },
            {
                name: 'Hiragana',
                bmp: '\u3041-\u3096\u309D-\u309F',
                astral: '\uD82C\uDC01|\uD83C\uDE00'
            },
            {
                name: 'Imperial_Aramaic',
                astral: '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
            },
            {
                name: 'Inherited',
                bmp: '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951\u0952\u1AB0-\u1ABE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
                astral: '\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uD800[\uDDFD\uDEE0]|\uDB40[\uDD00-\uDDEF]'
            },
            {
                name: 'Inscriptional_Pahlavi',
                astral: '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
            },
            {
                name: 'Inscriptional_Parthian',
                astral: '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
            },
            {
                name: 'Javanese',
                bmp: '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
            },
            {
                name: 'Kaithi',
                astral: '\uD804[\uDC80-\uDCC1]'
            },
            {
                name: 'Kannada',
                bmp: '\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
            },
            {
                name: 'Katakana',
                bmp: '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
                astral: '\uD82C\uDC00'
            },
            {
                name: 'Kayah_Li',
                bmp: '\uA900-\uA92D\uA92F'
            },
            {
                name: 'Kharoshthi',
                astral: '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F-\uDE47\uDE50-\uDE58]'
            },
            {
                name: 'Khmer',
                bmp: '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
            },
            {
                name: 'Khojki',
                astral: '\uD804[\uDE00-\uDE11\uDE13-\uDE3D]'
            },
            {
                name: 'Khudawadi',
                astral: '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
            },
            {
                name: 'Lao',
                bmp: '\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
            },
            {
                name: 'Latin',
                bmp: 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
            },
            {
                name: 'Lepcha',
                bmp: '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
            },
            {
                name: 'Limbu',
                bmp: '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
            },
            {
                name: 'Linear_A',
                astral: '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
            },
            {
                name: 'Linear_B',
                astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
            },
            {
                name: 'Lisu',
                bmp: '\uA4D0-\uA4FF'
            },
            {
                name: 'Lycian',
                astral: '\uD800[\uDE80-\uDE9C]'
            },
            {
                name: 'Lydian',
                astral: '\uD802[\uDD20-\uDD39\uDD3F]'
            },
            {
                name: 'Mahajani',
                astral: '\uD804[\uDD50-\uDD76]'
            },
            {
                name: 'Malayalam',
                bmp: '\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D75\u0D79-\u0D7F'
            },
            {
                name: 'Mandaic',
                bmp: '\u0840-\u085B\u085E'
            },
            {
                name: 'Manichaean',
                astral: '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
            },
            {
                name: 'Meetei_Mayek',
                bmp: '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
            },
            {
                name: 'Mende_Kikakui',
                astral: '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
            },
            {
                name: 'Meroitic_Cursive',
                astral: '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
            },
            {
                name: 'Meroitic_Hieroglyphs',
                astral: '\uD802[\uDD80-\uDD9F]'
            },
            {
                name: 'Miao',
                astral: '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
            },
            {
                name: 'Modi',
                astral: '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
            },
            {
                name: 'Mongolian',
                bmp: '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1877\u1880-\u18AA'
            },
            {
                name: 'Mro',
                astral: '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
            },
            {
                name: 'Multani',
                astral: '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
            },
            {
                name: 'Myanmar',
                bmp: '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
            },
            {
                name: 'Nabataean',
                astral: '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
            },
            {
                name: 'New_Tai_Lue',
                bmp: '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
            },
            {
                name: 'Nko',
                bmp: '\u07C0-\u07FA'
            },
            {
                name: 'Ogham',
                bmp: '\u1680-\u169C'
            },
            {
                name: 'Ol_Chiki',
                bmp: '\u1C50-\u1C7F'
            },
            {
                name: 'Old_Hungarian',
                astral: '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
            },
            {
                name: 'Old_Italic',
                astral: '\uD800[\uDF00-\uDF23]'
            },
            {
                name: 'Old_North_Arabian',
                astral: '\uD802[\uDE80-\uDE9F]'
            },
            {
                name: 'Old_Permic',
                astral: '\uD800[\uDF50-\uDF7A]'
            },
            {
                name: 'Old_Persian',
                astral: '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
            },
            {
                name: 'Old_South_Arabian',
                astral: '\uD802[\uDE60-\uDE7F]'
            },
            {
                name: 'Old_Turkic',
                astral: '\uD803[\uDC00-\uDC48]'
            },
            {
                name: 'Oriya',
                bmp: '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
            },
            {
                name: 'Osmanya',
                astral: '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
            },
            {
                name: 'Pahawh_Hmong',
                astral: '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
            },
            {
                name: 'Palmyrene',
                astral: '\uD802[\uDC60-\uDC7F]'
            },
            {
                name: 'Pau_Cin_Hau',
                astral: '\uD806[\uDEC0-\uDEF8]'
            },
            {
                name: 'Phags_Pa',
                bmp: '\uA840-\uA877'
            },
            {
                name: 'Phoenician',
                astral: '\uD802[\uDD00-\uDD1B\uDD1F]'
            },
            {
                name: 'Psalter_Pahlavi',
                astral: '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
            },
            {
                name: 'Rejang',
                bmp: '\uA930-\uA953\uA95F'
            },
            {
                name: 'Runic',
                bmp: '\u16A0-\u16EA\u16EE-\u16F8'
            },
            {
                name: 'Samaritan',
                bmp: '\u0800-\u082D\u0830-\u083E'
            },
            {
                name: 'Saurashtra',
                bmp: '\uA880-\uA8C4\uA8CE-\uA8D9'
            },
            {
                name: 'Sharada',
                astral: '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
            },
            {
                name: 'Shavian',
                astral: '\uD801[\uDC50-\uDC7F]'
            },
            {
                name: 'Siddham',
                astral: '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
            },
            {
                name: 'SignWriting',
                astral: '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
            },
            {
                name: 'Sinhala',
                bmp: '\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
                astral: '\uD804[\uDDE1-\uDDF4]'
            },
            {
                name: 'Sora_Sompeng',
                astral: '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
            },
            {
                name: 'Sundanese',
                bmp: '\u1B80-\u1BBF\u1CC0-\u1CC7'
            },
            {
                name: 'Syloti_Nagri',
                bmp: '\uA800-\uA82B'
            },
            {
                name: 'Syriac',
                bmp: '\u0700-\u070D\u070F-\u074A\u074D-\u074F'
            },
            {
                name: 'Tagalog',
                bmp: '\u1700-\u170C\u170E-\u1714'
            },
            {
                name: 'Tagbanwa',
                bmp: '\u1760-\u176C\u176E-\u1770\u1772\u1773'
            },
            {
                name: 'Tai_Le',
                bmp: '\u1950-\u196D\u1970-\u1974'
            },
            {
                name: 'Tai_Tham',
                bmp: '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
            },
            {
                name: 'Tai_Viet',
                bmp: '\uAA80-\uAAC2\uAADB-\uAADF'
            },
            {
                name: 'Takri',
                astral: '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
            },
            {
                name: 'Tamil',
                bmp: '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA'
            },
            {
                name: 'Telugu',
                bmp: '\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F'
            },
            {
                name: 'Thaana',
                bmp: '\u0780-\u07B1'
            },
            {
                name: 'Thai',
                bmp: '\u0E01-\u0E3A\u0E40-\u0E5B'
            },
            {
                name: 'Tibetan',
                bmp: '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
            },
            {
                name: 'Tifinagh',
                bmp: '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
            },
            {
                name: 'Tirhuta',
                astral: '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
            },
            {
                name: 'Ugaritic',
                astral: '\uD800[\uDF80-\uDF9D\uDF9F]'
            },
            {
                name: 'Vai',
                bmp: '\uA500-\uA62B'
            },
            {
                name: 'Warang_Citi',
                astral: '\uD806[\uDCA0-\uDCF2\uDCFF]'
            },
            {
                name: 'Yi',
                bmp: '\uA000-\uA48C\uA490-\uA4C6'
            }
        ]);
    }(XRegExp));
    return XRegExp;
}));
/*mad/util/validation*/
define('mad/util/validation', [
    'mad/mad',
    'xregexp'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    var XRegExp = $__1.default;
    var __ = function (input) {
        return input;
    };
    var Validation = mad.Validation = can.Construct.extend('mad.Validation', {
            validate: function (rule, value, values, options) {
                if (typeof rule == 'object') {
                    options = rule;
                    if (typeof rule.rule == 'undefined') {
                        throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule.rule');
                    }
                    if (rule.rule.indexOf('/') == '0') {
                        rule = 'regex';
                    } else if ($.isArray(rule.rule)) {
                        options.params = rule.rule.slice(1);
                        rule = rule.rule[0];
                    } else {
                        rule = rule.rule;
                    }
                }
                if (typeof mad.Validation[rule] == 'undefined') {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule');
                }
                return mad.Validation[rule](value, values, options);
            },
            _getAlphaRegExp: function (type) {
                var returnValue = '\\p{L}';
                if (type) {
                    switch (type) {
                    case 'ASCII':
                        returnValue = 'a-zA-Z';
                        break;
                    default:
                        returnValue = '\\p{' + type + '}';
                    }
                }
                return returnValue;
            },
            regex: function (value, values, options) {
                options = options || {};
                var returnValue = true, regexp = options.rule, not = options.not || false;
                if (regexp.indexOf('/') == 0) {
                    regexp = regexp.substr(1, regexp.length - (regexp.length - regexp.lastIndexOf('/') + 1));
                }
                var xregexp = new XRegExp(regexp);
                var match = xregexp.test(value);
                if (not && match || !not && !match) {
                    returnValue = options.message || __('The regex is not validated');
                }
                return returnValue;
            },
            notEmpty: function (value, values, options) {
                if (typeof value == 'undefined' || value == null || $.isArray(value) && !value.length || $.trim(value) == '') {
                    return options.message || __('Should not be empty');
                }
                return true;
            },
            uuid: function (value, values, options) {
                options = options || {};
                var regexp = '^[abcdef0-9]{8}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{12}$';
                var xregexp = new XRegExp(regexp);
                if (!xregexp.test(value)) {
                    return __('Not valid uuid');
                }
                return true;
            },
            alphaNumeric: function (value, values, options) {
                options = options || {};
                var alphaRegExp = mad.Validation._getAlphaRegExp(options.type);
                var xregexp = new XRegExp('^[' + alphaRegExp + ' \'0-9]*$');
                if (!xregexp.test(value)) {
                    return __('Only alpha-numeric characters allowed');
                }
                return true;
            },
            alpha: function (value, values, options) {
                options = options || {};
                var alphaRegExp = mad.Validation._getAlphaRegExp(options.type);
                var xregexp = XRegExp('^[' + alphaRegExp + ' \']*$');
                if (!xregexp.test(value)) {
                    return __('Only ' + options.type + ' characters allowed');
                }
                return true;
            },
            num: function (value) {
                var xregexp = XRegExp('^-?[0-9]+.?[0-9]*$');
                if (!xregexp.test(value)) {
                    return __('Only numeric characters allowed');
                }
                return true;
            },
            required: function (value) {
                var xregexp = XRegExp('^[s\n\t ]*$');
                if (typeof value == 'undefined' || value === null || xregexp.test(value)) {
                    return __('This information is required');
                }
                return true;
            },
            text: function (value) {
                var xregexp = XRegExp('<(.|\n)*?>');
                if (xregexp.test(value)) {
                    return __('No HTML tags allowed');
                }
                return true;
            },
            url: function (value) {
                var regex = '^\t\t\t\t([a-z0-9+.-]+):\t\t\t\t\t(?:\t\t\t\t\t\t(?:((?:[a-z0-9-._~!$&\'()*+,;=:]|%[0-9A-F]{2})*)@)?\t\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=]|%[0-9A-F]{2})*)\t\t\t\t\t\t(?::(d*))?\t\t\t\t\t\t(/(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t\t|\t\t\t\t\t\t(/?(?:[a-z0-9-._~!$&\'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t)\t\t\t\t(?:\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t\t(?:\t\t\t\t\t#((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t$';
                var xregexp = XRegExp(regex);
                if (xregexp.test(value)) {
                    return __('Not valid url.');
                }
                return true;
            },
            nospace: function (value) {
                var xregexp = XRegExp('[ ]+');
                if (xregexp.test(value)) {
                    return __('No space are allowed');
                }
                return true;
            },
            email: function (value) {
                var xregexp = XRegExp('^[a-zA-Z0-9_.-]+[@]{1}[a-zA-Z0-9_.-]+.[a-zA-Z]+$');
                if (!xregexp.test(value)) {
                    return __('Only email format is allowed');
                }
                return true;
            },
            date: function (value, values, options) {
                value = value || '';
                options = options || {};
                var format = options.format || 'dd/mm/yyyy', yearPos = null, monthPos = null, dayPos = null, days = [
                        0,
                        31,
                        29,
                        31,
                        30,
                        31,
                        30,
                        31,
                        31,
                        30,
                        31,
                        30,
                        31
                    ], dateRegExp = '', returnValue = true;
                switch (format) {
                case 'm/d/y':
                    dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2}|\d{4})$/;
                    monthPos = 1;
                    dayPos = 2;
                    yearPos = 3;
                    break;
                case 'mm/dd/yy':
                    dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2})$/;
                    monthPos = 1;
                    dayPos = 2;
                    yearPos = 3;
                    break;
                case 'mm/dd/yyyy':
                    dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$/;
                    monthPos = 1;
                    dayPos = 2;
                    yearPos = 3;
                    break;
                case 'dd/mm/yyyy':
                    dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$/;
                    monthPos = 2;
                    dayPos = 1;
                    yearPos = 3;
                    break;
                case 'd/m/yy':
                    dateRegExp = /^(\d{1,2})[./-](\d{1,2})[./-](\d{2}|\d{4})$/;
                    monthPos = 2;
                    dayPos = 1;
                    yearPos = 3;
                    break;
                case 'y/m/d':
                    dateRegExp = /^(\d{2}|\d{4})[./-](\d{1,2})[./-](\d{1,2})$/;
                    monthPos = 2;
                    dayPos = 3;
                    yearPos = 1;
                    break;
                case 'yy/mm/dd':
                    dateRegExp = /^(\d{4}|\d{1,2})[./-](\d{1,2})[./-](\d{1,2})$/;
                    monthPos = 2;
                    dayPos = 3;
                    yearPos = 1;
                    break;
                case 'yyyy/mm/dd':
                    dateRegExp = /^(\d{4})[./-](\d{1,2})[./-](\d{1,2})$/;
                    monthPos = 2;
                    dayPos = 3;
                    yearPos = 1;
                    break;
                }
                var dateParts = value.match(dateRegExp);
                if (!dateParts) {
                    returnValue = __('The date format is incorect, expected : ') + format;
                } else {
                    var year = dateParts[yearPos] * 1;
                    var month = dateParts[monthPos] * 1;
                    var day = dateParts[dayPos] * 1;
                    if (day < 1 || day > days[month] || month < 1 || month > 12) {
                        returnValue = __('The date format is incorect, expected : ') + format;
                    }
                    if (month == 2 && day == 29) {
                        var isLeapYear = year % 4 != 0 ? false : year % 100 != 0 ? true : year % 1000 != 0 ? false : true;
                        if (!isLeapYear) {
                            returnValue = __('The year %s is not a leap year', year);
                        }
                    }
                }
                return returnValue;
            },
            lengthBetween: function (value, values, options) {
                value = value || '';
                options = options || [];
                var returnValue = true, min = options.params[0] || null, max = options.params[1] || null;
                if (min != null && value.length < min || max != null && value.length > max) {
                    returnValue = options.message ? __(options.message, min, max) : __('Must be between %s and %s characters long', min, max);
                }
                return returnValue;
            },
            foreignRule: function (value, options) {
                var returnValue = true;
                if (options.model && options.model.validateRules && options.attribute) {
                    for (var i in options.model.validateRules[options.attribute]) {
                        var rule = options.model.validateRules[options.attribute][i];
                        var foreignReturnValue = mad.Validation.validate(rule, value);
                        if (foreignReturnValue !== true) {
                            returnValue = foreignReturnValue;
                            break;
                        }
                    }
                }
                return returnValue;
            },
            choice: function (value, options) {
                var returnValue = true, choices = [];
                value = typeof value == 'undefined' ? null : value;
                if (options.choices) {
                    choices = options.choices;
                } else if (options.callback) {
                    choices = options.callback.apply(this);
                }
                if (choices.indexOf(value) == -1) {
                    returnValue = __('%s is not a valid value', value);
                }
                return returnValue;
            }
        }, {});
    var $__default = Validation;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/util/lang/i18n*/
define('mad/util/lang/i18n', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var glbl = typeof window !== 'undefined' ? window : global;
    var __ = function (str) {
        var args = Array.prototype.slice.call(arguments, 1);
        return mad.I18n.translate(str, args);
    };
    glbl.__ = __;
    var I18n = mad.I18n = can.Construct.extend('mad.I18n', {
            dico: {},
            translate: function (str, vars) {
                var vars = typeof vars != 'undefined' ? vars : [];
                return mad.I18n.replaceHooks(this.getEntry(str), vars);
            },
            loadDico: function (dico) {
                for (var i in dico) {
                    mad.I18n.dico[i] = dico[i];
                }
            },
            replaceHooks: function (str, vars) {
                var returnValue = '', split = [];
                split = str.split('%s');
                if (split.length != vars.length + 1) {
                    throw mad.Exception.get('mad.I18n::replaceHooks() expects as many variables as hooks in the sentence');
                }
                if (split.length < 2) {
                    return str;
                }
                var j;
                for (var i in vars) {
                    j = parseInt(i);
                    if (typeof vars[j] != 'string' && typeof vars[j] != 'number' && typeof vars[j] != 'boolean' && vars[j] !== null) {
                        throw mad.Exception.get('mad.I18n::replaceHooks() expects variables to be scalar');
                    }
                    returnValue += split[i] + vars[j];
                }
                returnValue += typeof split[j + 1] != 'undefined' ? split[j + 1] : '';
                return returnValue;
            },
            getEntry: function (str) {
                if (typeof mad.I18n.dico[str] != 'undefined' && this.dico[str] != '') {
                    return mad.I18n.dico[str];
                }
                return str;
            }
        }, {});
    var $__default = I18n;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*lib/can/map/attributes/attributes*/
define('lib/can/map/attributes/attributes', [
    'can/util/util',
    'can/map/map',
    'can/list/list'
], function (can, Map) {
    can.each([
        can.Map,
        can.Model
    ], function (clss) {
        if (clss === undefined) {
            return;
        }
        var isObject = function (obj) {
            return typeof obj === 'object' && obj !== null && obj;
        };
        can.extend(clss, {
            attributes: {},
            convert: {
                'date': function (str) {
                    var type = typeof str;
                    if (type === 'string') {
                        str = Date.parse(str);
                        return isNaN(str) ? null : new Date(str);
                    } else if (type === 'number') {
                        return new Date(str);
                    } else {
                        return str;
                    }
                },
                'number': function (val) {
                    return parseFloat(val);
                },
                'boolean': function (val) {
                    if (val === 'false' || val === '0' || !val) {
                        return false;
                    }
                    return true;
                },
                'default': function (val, oldVal, error, type) {
                    if (can.Map.prototype.isPrototypeOf(type.prototype) && typeof type.model === 'function' && typeof type.models === 'function') {
                        return type[can.isArray(val) ? 'models' : 'model'](val);
                    }
                    if (can.Map.prototype.isPrototypeOf(type.prototype)) {
                        if (can.isArray(val) && typeof type.List === 'function') {
                            return new type.List(val);
                        }
                        return new type(val);
                    }
                    if (typeof type === 'function') {
                        return type(val, oldVal);
                    }
                    var construct = can.getObject(type), context = window, realType;
                    if (type.indexOf('.') >= 0) {
                        realType = type.substring(0, type.lastIndexOf('.'));
                        context = can.getObject(realType);
                    }
                    return typeof construct === 'function' ? construct.call(context, val, oldVal) : val;
                }
            },
            serialize: {
                'default': function (val, type) {
                    return isObject(val) && val.serialize ? val.serialize() : val;
                },
                'date': function (val) {
                    return val && val.getTime();
                }
            }
        });
        var oldSetup = clss.setup;
        clss.setup = function (superClass, stat, proto) {
            var self = this;
            oldSetup.call(self, superClass, stat, proto);
            can.each(['attributes'], function (name) {
                if (!self[name] || superClass[name] === self[name]) {
                    self[name] = {};
                }
            });
            can.each([
                'convert',
                'serialize'
            ], function (name) {
                if (superClass[name] !== self[name]) {
                    self[name] = can.extend({}, superClass[name], self[name]);
                }
            });
        };
    });
    can.Map.prototype.__convert = function (prop, value) {
        var Class = this.constructor, oldVal = this.__get(prop), type, converter;
        if (Class.attributes) {
            type = Class.attributes[prop];
            converter = Class.convert[type] || Class.convert['default'];
        }
        return value === null || !type ? value : converter.call(Class, value, oldVal, function () {
        }, type);
    };
    var oldSerialize = can.Map.helpers._serialize;
    can.Map.helpers._serialize = function (map, name, val) {
        var constructor = map.constructor, type = constructor.attributes ? constructor.attributes[name] : 0, converter = constructor.serialize ? constructor.serialize[type] : 0;
        return val && typeof val.serialize === 'function' ? oldSerialize.apply(this, arguments) : converter ? converter(val, type) : oldSerialize.apply(this, arguments);
    };
    var mapSerialize = can.Map.prototype.serialize;
    can.Map.prototype.serialize = function (attrName) {
        var baseResult = mapSerialize.apply(this, arguments);
        if (attrName) {
            return baseResult[attrName];
        } else {
            return baseResult;
        }
    };
    return can.Map;
});
/*mad/model/list*/
define('mad/model/list', [
    'can/construct/construct',
    'mad/model/model'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    mad.model = mad.model || {};
    var List = mad.model.List = can.Construct.extend('mad.model.List', {
            indexOf: function (list, item) {
                var returnValue = -1;
                var itemId = item instanceof mad.Model ? item.id : item;
                can.each(list, function (raw, i) {
                    if (raw.id == itemId) {
                        returnValue = i;
                        return false;
                    }
                });
                return returnValue;
            },
            remove: function (list, item) {
                var i = mad.model.List.indexOf(list, item);
                if (i != -1) {
                    list.splice(i, 1);
                    return true;
                }
                return false;
            }
        }, {});
    var $__default = List;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/serializer/serializer*/
define('mad/model/serializer/serializer', ['can/construct/construct'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    mad.model.serializer = mad.model.serializer || {};
    var Serializer = mad.model.serializer.Serializer = can.Construct.extend('mad.model.serializer.Serializer', {
            from: function (data) {
            },
            to: function (data) {
            }
        }, {});
    var $__default = Serializer;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/serializer/cake_serializer*/
define('mad/model/serializer/cake_serializer', [
    'can/construct/construct',
    'mad/model/serializer/serializer'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    mad.model.serializer = mad.model.serializer || {};
    var CakeSerializer = mad.model.serializer.CakeSerializer = can.Construct.extend('mad.model.serializer.CakeSerializer', {
            from: function (data, Class) {
                var returnValue = {};
                returnValue = $.extend(true, {}, data, data[Class.shortName]);
                delete returnValue[Class.shortName];
                return returnValue;
            },
            to: function (data, Class) {
                var returnValue = {};
                returnValue[Class.shortName] = {};
                for (var name in data) {
                    if (Class.isModelAttribute(name)) {
                        returnValue[name] = data[name];
                    } else {
                        returnValue[Class.shortName][name] = data[name];
                    }
                }
                return returnValue;
            }
        }, {});
    var $__default = CakeSerializer;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/model*/
define('mad/model/model', [
    'mad/util/util',
    'can/map/attributes/attributes',
    'mad/model/list',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    var mad = $__0.default;
    $__2;
    $__3;
    $__4;
    mad.model = mad.model || {};
    var Model = mad.Model = can.Model.extend('mad.Model', {
            forceStore: false,
            madStore: new can.Model.List(),
            validationRules: {},
            serverValidationRules: {},
            checkServerRules: false,
            getModelAttributeValue: function (modelRef, instance) {
                var returnValue = [], attributes = mad.Model.getModelAttributes(modelRef), pointer = instance;
                for (var i = 1; i < attributes.length; i++) {
                    if (attributes[i - 1].isMultiple()) {
                        returnValue = [];
                        pointer.each(function (subInstance) {
                            returnValue.push(subInstance[attributes[i].getName()]);
                        });
                    } else {
                        pointer = can.getObject(attributes[i].getName(), pointer);
                        returnValue = pointer;
                    }
                }
                return returnValue;
            },
            getModelAttributes: function (str) {
                var returnValue = [];
                var matches = str.match(/[\.]?[A-Z][^.]*/), modelName = str.substr(0, matches.index + matches[0].length), subAttributesStr = str.substr(modelName.length + 1), model = can.getObject(modelName);
                returnValue.push(new mad.model.Attribute({
                    name: modelName,
                    multiple: false,
                    modelReference: model
                }));
                var subsplit = subAttributesStr.split('.');
                for (var i in subsplit) {
                    var attributeType = model.attributes[subsplit[i]], name = '', multiple = false;
                    if (/models?$/.test(attributeType)) {
                        var matches = attributeType.match(/(.*)\.models?$/);
                        name = subsplit[i];
                        model = can.getObject(matches[1]);
                        multiple = /models$/.test(attributeType);
                    } else {
                        name = subsplit[i];
                        model = undefined;
                    }
                    returnValue.push(new mad.model.Attribute({
                        name: name,
                        multiple: multiple,
                        modelReference: model
                    }));
                }
                return returnValue;
            },
            isModelAttribute: function (name) {
                return /model[s]?$/.test(this.attributes[name]);
            },
            isMultipleAttribute: function (name) {
                return /models$/.test(this.attributes[name]);
            },
            parseModel: function (data, xhr) {
                data = data || {};
                if (mad.net.Response.isResponse(data)) {
                    console.debug('mad.model.parseModel : mad.net.Response.isResponse == true');
                    data = mad.net.Response.getData(data);
                    data = mad.model.serializer.CakeSerializer.from(data, this);
                } else if (data[this.shortName]) {
                    data = mad.model.serializer.CakeSerializer.from(data, this);
                }
                return data;
            },
            getValidationRules: function (validationCase) {
                var rules = {}, self = this;
                if (typeof validationCase == 'undefined' || validationCase == null) {
                    validationCase = 'default';
                }
                if (!_.isEmpty(this.validationRules)) {
                    rules = this.validationRules;
                } else if (this.checkServerRules) {
                    if (typeof this.serverValidationRules[this.shortName] == 'undefined') {
                        this.serverValidationRules[this.shortName] = {};
                    }
                    if (typeof this.serverValidationRules[this.shortName][validationCase] == 'undefined') {
                        var url = APP_URL + 'validation/' + this.shortName + '/' + validationCase + '.json';
                        self.serverValidationRules[self.shortName][validationCase] = {};
                        mad.net.Ajax.request({
                            async: false,
                            type: 'GET',
                            url: url
                        }).then(function (data) {
                            self.serverValidationRules[self.shortName][validationCase] = data;
                        });
                    }
                    rules = this.serverValidationRules[this.shortName][validationCase];
                }
                return rules;
            },
            isRequired: function (attrName, validationCase) {
                var required = false;
                var rules = this.getValidationRules(validationCase);
                if (!$.isArray(rules[attrName])) {
                    if (typeof rules[attrName]['rule'] != 'undefined') {
                        var fieldRequiredForCase = typeof rules[attrName]['required'] != 'undefined' && (typeof rules[attrName]['required'] === true || rules[attrName]['required'] === validationCase);
                        var fieldAllowEmpty = typeof rules[attrName]['allowEmpty'] != 'undefined' ? rules[attrName]['allowEmpty'] : true;
                        if (fieldRequiredForCase === true || fieldAllowEmpty === false) {
                            required = true;
                        }
                    } else {
                        for (var ruleLabel in rules[attrName]) {
                            var fieldRequiredForCase = typeof rules[attrName][ruleLabel]['required'] != 'undefined' && (typeof rules[attrName][ruleLabel]['required'] === true || rules[attrName][ruleLabel]['required'] === validationCase);
                            var fieldAllowEmpty = typeof rules[attrName][ruleLabel]['allowEmpty'] != 'undefined' ? rules[attrName][ruleLabel]['allowEmpty'] : true;
                            if (fieldRequiredForCase === true || fieldAllowEmpty === false) {
                                required = true;
                            }
                        }
                    }
                }
                return required;
            },
            search: function (data, key, value) {
                var returnValue = [], split = key.split('.'), modelName = split[0], attrName = split[1];
                for (var i in data) {
                    if ($.isArray(data[i][modelName])) {
                        for (var j in data[i][modelName]) {
                            if (data[i][modelName][j][attrName] == value) {
                                returnValue.push(data[i]);
                            }
                        }
                    } else {
                        if (data[i][modelName][attrName] == value) {
                            returnValue.push(data[i]);
                        }
                    }
                    if (data[i].children) {
                        var childrenSearch = mad.model.Model.search(data[i].children, key, value);
                        if (childrenSearch.length) {
                            returnValue = $.merge(returnValue, childrenSearch);
                        }
                    }
                }
                return returnValue;
            },
            searchOne: function (data, key, value) {
                var returnValue = null;
                var searchResults = mad.Model.search(data, key, value);
                if (searchResults.length) {
                    returnValue = searchResults[0];
                }
                return returnValue;
            },
            validateAttribute: function (attrName, value, values, validationCase) {
                var returnValue = [];
                if (typeof validationCase == 'undefined') {
                    validationCase = 'default';
                }
                var rules = this.getValidationRules(validationCase);
                if (typeof rules[attrName] != 'undefined') {
                    var required = this.isRequired(attrName, validationCase);
                    var requiredValidation = mad.Validation.validate('required', value);
                    if (required && requiredValidation !== true) {
                        returnValue.push(requiredValidation);
                        return returnValue;
                    } else if (!required && requiredValidation !== true) {
                        return returnValue;
                    }
                    var attributeRules = rules[attrName];
                    for (var i in attributeRules) {
                        var validateResult = mad.Validation.validate(attributeRules[i], value, values);
                        if (validateResult !== true) {
                            returnValue.push(validateResult);
                        }
                    }
                }
                return returnValue;
            }
        }, {});
    var $__default = Model;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/state*/
define('mad/model/state', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var State = mad.model.State = mad.Model.extend('mad.model.State', {
            attributes: {
                previous: 'can.List',
                current: 'can.List'
            }
        }, {
            init: function () {
                this.previous = new can.List([]);
                this.current = new can.List([]);
            },
            is: function (state) {
                if (state == null && !this.current.length) {
                    return true;
                }
                return this.current.indexOf(state) != -1 ? true : false;
            },
            was: function (state) {
                if (state == null && !this.previous.length) {
                    return true;
                }
                return this.previous.indexOf(state) != -1 ? true : false;
            },
            setState: function (states) {
                if (typeof states == 'undefined') {
                    states = [];
                }
                states = $.isArray(states) ? states : [states];
                this.previous.replace(this.current.attr());
                this.current.replace(states);
            },
            addState: function (states) {
                states = $.isArray(states) ? states : [states];
                this.previous.replace(this.current.attr());
                $.each(this.current.attr(), function (i, val) {
                    states.push(val);
                });
                this.current.replace(states);
            },
            removeState: function (states) {
                states = $.isArray(states) ? states : [states];
                var newStates = [];
                this.previous.replace(this.current.attr());
                $.each(this.current.attr(), function (i, val) {
                    if (states.indexOf(val) == -1) {
                        newStates.push(val);
                    }
                });
                this.current.replace(newStates);
            },
            toString: function (separator) {
                if (typeof separator == 'undefined') {
                    separator = ',';
                }
                return this.current.join(separator);
            }
        });
    var $__default = State;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/attribute*/
define('mad/model/attribute', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Attribute = mad.model.Attribute = mad.Model.extend('mad.model.Attribute', {
            attributes: {
                name: 'string',
                type: 'string',
                modelReference: 'object',
                multiple: 'boolean'
            }
        }, {
            getModelReference: function () {
                return this.modelReference;
            },
            getName: function () {
                return this.name;
            },
            isMultiple: function () {
                return this.multiple;
            }
        });
    var $__default = Attribute;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/control/control*/
define('mad/control/control', ['mad/util/util'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    var Control = mad.Control = can.Control.extend('mad.Control', {
            init: function (el, options) {
                if (!el || !$(el).length) {
                    throw new mad.Exception('The parameter "el" (' + $(el).selector + ') should refer to an existing DOM node.');
                }
                if (typeof options.id == 'undefined' || options.id == null || options.id == '') {
                    var elId = this.element.attr('id');
                    if (typeof elId != 'undefined' && elId != '') {
                        options.id = elId;
                    } else {
                        options.id = uuid();
                        this.element.attr('id', options.id);
                    }
                } else {
                    var elId = this.element.attr('id');
                    if (elId != '') {
                        console.warn('Controller id is defined by options and by template, the template id will be overriden by the option id.');
                    }
                    this.element.attr('id', options.id);
                }
                this.options = $.extend(true, {}, this.options, options);
                mad.referenceControl(this);
            },
            destroy: function () {
                mad.unreferenceControl(this);
                this._super();
            },
            getAlias: function (type) {
                type = typeof type == 'undefined' ? 'camel' : type;
                var returnValue = '';
                var alias = this.constructor.shortName.replace(/Controller$/, '');
                switch (type) {
                case 'under':
                    returnValue = jQuery.String.underscore(alias);
                    break;
                case 'camel':
                default:
                    returnValue = alias;
                    break;
                }
                return returnValue;
            },
            getComponent: function (id) {
                console.warn('This function is deprecated, replace it with mad.getControl(id)');
                return mad.app.getComponent(id);
            },
            getClass: function () {
                return this.constructor;
            },
            getId: function () {
                return this.options.id;
            },
            remove: function () {
                this.element.remove();
            }
        });
    var $__default = Control;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/view*/
define('mad/view/view', [
    'mad/control/control',
    'mad/helper/control'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    mad.view = mad.view || {};
    var View = mad.View = mad.Control.extend('mad.View', {
            defaults: {
                templateUri: null,
                templateBased: true,
                element: null
            },
            render: function (uri, data) {
                return can.view.render(uri, data);
            }
        }, {
            getController: function () {
                return this.options.controller;
            },
            addClass: function (className) {
                this.element.addClass(className);
            },
            getTemplate: function () {
                var tpl = '';
                if (this.getTemplateUri() != null) {
                    tpl = this.getTemplateUri();
                } else {
                    tpl = mad.helper.Control.getViewPath(this.getController().getClass());
                }
                return tpl;
            },
            hide: function () {
                this.element.hide();
            },
            loading: function (loading) {
                if (loading) {
                    this.element.prepend('<div class="js_loading" />');
                } else {
                    $('.js_loading', this.element).remove();
                }
            },
            removeClass: function (className) {
                this.element.removeClass(className);
            },
            position: function (options) {
                mad.helper.Html.position(this.element, options);
            },
            render: function () {
                return mad.View.render(this.getTemplate(), this.getController().getViewData());
            },
            insertInDom: function (html) {
                this.element.html(html);
            },
            getTemplateUri: function () {
                return this.options.templateUri;
            },
            setTemplateUri: function (templateUri) {
                this.options.templateUri = templateUri;
            },
            show: function () {
                this.element.show();
            }
        });
    var $__default = View;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*lib/can/view/ejs/ejs*/
define('lib/can/view/ejs/ejs', [
    'can/util/util',
    'can/view/view',
    'can/util/string/string',
    'can/compute/compute',
    'can/view/scanner',
    'can/view/render'
], function (can) {
    var extend = can.extend, EJS = function (options) {
            if (this.constructor !== EJS) {
                var ejs = new EJS(options);
                return function (data, helpers) {
                    return ejs.render(data, helpers);
                };
            }
            if (typeof options === 'function') {
                this.template = { fn: options };
                return;
            }
            extend(this, options);
            this.template = this.scanner.scan(this.text, this.name);
        };
    can.EJS = EJS;
    EJS.prototype.render = function (object, extraHelpers) {
        object = object || {};
        return this.template.fn.call(object, object, new EJS.Helpers(object, extraHelpers || {}));
    };
    extend(EJS.prototype, {
        scanner: new can.view.Scanner({
            text: {
                outStart: 'with(_VIEW) { with (_CONTEXT) {',
                outEnd: '}}',
                argNames: '_CONTEXT,_VIEW',
                context: 'this'
            },
            tokens: [
                [
                    'templateLeft',
                    '<%%'
                ],
                [
                    'templateRight',
                    '%>'
                ],
                [
                    'returnLeft',
                    '<%=='
                ],
                [
                    'escapeLeft',
                    '<%='
                ],
                [
                    'commentLeft',
                    '<%#'
                ],
                [
                    'left',
                    '<%'
                ],
                [
                    'right',
                    '%>'
                ],
                [
                    'returnRight',
                    '%>'
                ]
            ],
            helpers: [{
                    name: /\s*\(([\$\w]+)\)\s*->([^\n]*)/,
                    fn: function (content) {
                        var quickFunc = /\s*\(([\$\w]+)\)\s*->([^\n]*)/, parts = content.match(quickFunc);
                        return 'can.proxy(function(__){var ' + parts[1] + '=can.$(__);' + parts[2] + '}, this);';
                    }
                }],
            transform: function (source) {
                return source.replace(/<%([\s\S]+?)%>/gm, function (whole, part) {
                    var brackets = [], foundBracketPair, i;
                    part.replace(/[{}]/gm, function (bracket, offset) {
                        brackets.push([
                            bracket,
                            offset
                        ]);
                    });
                    do {
                        foundBracketPair = false;
                        for (i = brackets.length - 2; i >= 0; i--) {
                            if (brackets[i][0] === '{' && brackets[i + 1][0] === '}') {
                                brackets.splice(i, 2);
                                foundBracketPair = true;
                                break;
                            }
                        }
                    } while (foundBracketPair);
                    if (brackets.length >= 2) {
                        var result = ['<%'], bracket, last = 0;
                        for (i = 0; bracket = brackets[i]; i++) {
                            result.push(part.substring(last, last = bracket[1]));
                            if (bracket[0] === '{' && i < brackets.length - 1 || bracket[0] === '}' && i > 0) {
                                result.push(bracket[0] === '{' ? '{ %><% ' : ' %><% }');
                            } else {
                                result.push(bracket[0]);
                            }
                            ++last;
                        }
                        result.push(part.substring(last), '%>');
                        return result.join('');
                    } else {
                        return '<%' + part + '%>';
                    }
                });
            }
        })
    });
    EJS.Helpers = function (data, extras) {
        this._data = data;
        this._extras = extras;
        extend(this, extras);
    };
    EJS.Helpers.prototype = {
        list: function (list, cb) {
            can.each(list, function (item, i) {
                cb(item, i, list);
            });
        },
        each: function (list, cb) {
            if (can.isArray(list)) {
                this.list(list, cb);
            } else {
                can.view.lists(list, cb);
            }
        }
    };
    can.view.register({
        suffix: 'ejs',
        script: function (id, src) {
            return 'can.EJS(function(_CONTEXT,_VIEW) { ' + new EJS({
                text: src,
                name: id
            }).template.out + ' })';
        },
        renderer: function (id, text) {
            return EJS({
                text: text,
                name: id
            });
        }
    });
    can.ejs.Helpers = EJS.Helpers;
    return can;
});
/*lib/can/view/ejs/system*/
System.set('lib/can/view/ejs/system', System.newModule({}));
/*mad/view/template/component/default.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/default.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_default_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="component">\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/component*/
define('mad/component/component', [
    'mad/control/control',
    'mad/view/view',
    'mad/model/state',
    'mad/view/template/component/default.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    mad.component = mad.component || {};
    mad.view.component = mad.view.component || {};
    var Component = mad.Component = mad.Control.extend('mad.Component', {
            defaults: {
                icon: null,
                label: 'ComponentController',
                cssClasses: ['js_component'],
                state: 'ready',
                tag: 'div',
                templateBased: true,
                templateUri: null,
                viewClass: mad.View,
                viewData: {},
                silentLoading: true
            }
        }, {
            init: function (el, options) {
                var self = this;
                this._super(el, options);
                if (!this.options.viewClass instanceof mad.View) {
                    throw new mad.error.WrongParameter('options.viewClass', 'mad.View');
                }
                this.state = new mad.model.State();
                for (var i in options.cssClasses) {
                    if (!this.element.hasClass(this.options.cssClasses[i])) {
                        this.element.addClass(this.options.cssClasses[i]);
                    }
                }
            },
            destroy: function () {
                if (this.state.is('loading')) {
                    mad.bus.trigger('passbolt_component_loading_complete', [this]);
                }
                this.state.unbind('label');
                var currentStates = this.state.current.attr();
                for (var i in currentStates) {
                    this.element.removeClass(currentStates[i]);
                }
                for (var i in this.options.cssClasses) {
                    this.element.removeClass(this.options.cssClasses[i]);
                }
                if (this.view) {
                    this.view.destroy();
                }
                this._super();
            },
            _goNextStates: function () {
                var leaving = [], entering = [], previous = this.state.previous.attr(), current = this.state.current.attr(), staying = mad.array.intersect(previous, current);
                leaving = previous.filter(function (item) {
                    return staying.indexOf(item) == -1;
                });
                entering = current.filter(function (item) {
                    return staying.indexOf(item) == -1;
                });
                for (var i in leaving) {
                    this.element.removeClass(leaving[i]);
                    var previousStateListener = this['state' + can.capitalize(leaving[i])];
                    if (previousStateListener) {
                        previousStateListener.call(this, false);
                    }
                }
                for (var i in entering) {
                    this.element.addClass(entering[i]);
                    var newStateListener = this['state' + can.capitalize(entering[i])];
                    if (newStateListener) {
                        newStateListener.call(this, true);
                    }
                }
            },
            setTemplateUri: function (templateUri) {
                this.view.setTemplateUri(templateUri);
            },
            setState: function (statesName) {
                this.state.setState(statesName);
                this._goNextStates();
                return this;
            },
            setViewData: function (name, value) {
                if (typeof name == 'object') {
                    var data = name;
                    for (var i in data) {
                        this.setViewData(i, data[i]);
                    }
                } else {
                    this.options.viewData[name] = value;
                }
                return this;
            },
            getViewData: function (name) {
                if (typeof name == 'undefined') {
                    return this.options.viewData;
                }
                return this.options.viewData[name];
            },
            refresh: function () {
                if (this.element == null) {
                    console.warn('Try to refresh a component which doesn\'t have a DOM element.');
                    return;
                }
                this.element.empty();
                if (this.options.templateBased) {
                    this.beforeRender();
                    var render = this.view.render();
                    render = this.afterRender(render);
                    this.view.insertInDom(render);
                }
                this.afterStart();
                this.setState(this.options.state);
                return this;
            },
            start: function () {
                this.setState('loading');
                this.beforeStart();
                this.initView();
                if (this.options.templateBased) {
                    this.beforeRender();
                    var render = this.view.render();
                    render = this.afterRender(render);
                    this.view.insertInDom(render);
                }
                this.afterStart();
                this.setState(this.options.state);
                return this;
            },
            initView: function () {
                this.view = new this.options.viewClass(this.element, {
                    templateUri: this.options.templateUri,
                    cssClasses: this.options.cssClasses,
                    templateBased: this.options.templateBased,
                    controller: this
                });
                this.setViewData('controller', this);
                this.setViewData('icon', this.options.icon);
                this.setViewData('label', this.options.label);
                this.setViewData('view', this.view);
            },
            beforeStart: function () {
            },
            afterStart: function () {
            },
            beforeRender: function () {
            },
            afterRender: function (render) {
                return render;
            },
            render: function (options) {
                this.start();
            },
            closest: function (Control) {
                var classCssSelector = '.' + Control._fullName, data = this.element.closest(classCssSelector).data();
                for (var i in data.controls) {
                    if (data.controls[i].getClass().fullName == Control.fullName) {
                        return data.controls[i];
                    }
                }
                ;
                return null;
            },
            stateLoading: function (go) {
                if (this.view) {
                    this.view.loading(go);
                }
                if (go) {
                    if (mad.bus) {
                        mad.bus.trigger('passbolt_component_loading_start', [this]);
                    }
                } else {
                    if (mad.bus) {
                        mad.bus.trigger('passbolt_component_loading_complete', [this]);
                    }
                }
            },
            stateReady: function (go) {
            },
            stateDisabled: function (go) {
            },
            stateHidden: function (go) {
                if (go) {
                    this.view.hide();
                } else {
                    this.view.show();
                }
            }
        });
    var $__default = Component;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/mad*/
define('mad/mad', [
    'jquery',
    'underscore',
    'can/can',
    'mad/util/util',
    'mad/error/exception',
    'mad/error/error_handler',
    'mad/helper/component',
    'mad/helper/control',
    'mad/helper/html',
    'mad/config/config',
    'mad/util/array/array',
    'mad/util/map/map',
    'mad/util/validation',
    'mad/util/lang/i18n',
    'mad/model/model',
    'mad/model/list',
    'mad/model/state',
    'mad/model/attribute',
    'mad/control/control',
    'mad/view/view',
    'mad/component/component'
], function ($__0, $__2, $__4, $__6, $__8, $__9, $__10, $__11, $__12, $__13, $__14, $__15, $__16, $__17, $__18, $__19, $__20, $__21, $__22, $__23, $__24) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    if (!$__13 || !$__13.__esModule)
        $__13 = { default: $__13 };
    if (!$__14 || !$__14.__esModule)
        $__14 = { default: $__14 };
    if (!$__15 || !$__15.__esModule)
        $__15 = { default: $__15 };
    if (!$__16 || !$__16.__esModule)
        $__16 = { default: $__16 };
    if (!$__17 || !$__17.__esModule)
        $__17 = { default: $__17 };
    if (!$__18 || !$__18.__esModule)
        $__18 = { default: $__18 };
    if (!$__19 || !$__19.__esModule)
        $__19 = { default: $__19 };
    if (!$__20 || !$__20.__esModule)
        $__20 = { default: $__20 };
    if (!$__21 || !$__21.__esModule)
        $__21 = { default: $__21 };
    if (!$__22 || !$__22.__esModule)
        $__22 = { default: $__22 };
    if (!$__23 || !$__23.__esModule)
        $__23 = { default: $__23 };
    if (!$__24 || !$__24.__esModule)
        $__24 = { default: $__24 };
    var $ = $__0.default;
    var _ = $__2.default;
    var can = $__4.default;
    var mad = $__6.default;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    $__13;
    $__14;
    $__15;
    $__16;
    $__17;
    $__18;
    $__19;
    $__20;
    $__21;
    $__22;
    $__23;
    $__24;
    var $__default = mad;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/util/util*/
define('app/util/util', ['mad/mad'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    var mad = $__0.default;
    mad.setGlobal('passbolt', {});
    if (passbolt.component == undefined) {
        passbolt.component = {};
    }
    if (passbolt.model == undefined) {
        passbolt.model = {};
    }
    if (passbolt.view == undefined) {
        passbolt.view = {};
    }
    if (passbolt.view.component == undefined) {
        passbolt.view.component = {};
    }
    if (passbolt.form == undefined) {
        passbolt.form = {};
    }
    if (passbolt.form == undefined) {
        passbolt.form = {};
    }
    var $__default = passbolt;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/net/response*/
define('mad/net/response', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Response = mad.Model.extend('mad.net.Response', {
            attributes: {
                'header': 'json',
                'body': 'json'
            },
            'STATUS_ERROR': 'error',
            'STATUS_NOTICE': 'notice',
            'STATUS_SUCCESS': 'success',
            'STATUS_WARNING': 'warning',
            'RESPONSE_ID_UNDEFINED': 'undefined',
            'RESPONSE_CONTROLLER_UNDEFINED': 'undefined',
            'RESPONSE_ACTION_UNDEFINED': 'undefined',
            getResponse: function (type, data) {
                var returnValue = null, header = {}, body = null;
                switch (type) {
                case 'unreachable':
                    header = {
                        'id': mad.net.Response.RESPONSE_ID_UNDEFINED,
                        'status': mad.net.Response.STATUS_ERROR,
                        'controller': mad.net.Response.RESPONSE_CONTROLLER_UNDEFINED,
                        'action': mad.net.Response.RESPONSE_ACTION_UNDEFINED,
                        'title': __('Unable to reach the server'),
                        'message': __('The url is probably incorrectly formatted')
                    };
                    body = data;
                    break;
                }
                returnValue = new mad.net.Response({
                    header: header,
                    body: body
                });
                return returnValue;
            },
            isResponse: function (data) {
                var returnValue = false;
                if (typeof data != 'undefined' && data != null) {
                    if (data.header && data.body) {
                        returnValue = true;
                    }
                }
                return returnValue;
            },
            getData: function (data) {
                return data.body;
            }
        }, {
            getStatus: function () {
                return this.attr('header').status;
            },
            getTitle: function () {
                return this.attr('header').title;
            },
            getMessage: function () {
                return this.attr('header').message;
            },
            getAction: function () {
                return this.attr('header').action;
            },
            getController: function () {
                return this.attr('header').controller;
            },
            getData: function () {
                return this.attr('body');
            }
        });
    var $__default = Response;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/net/response_handler*/
define('mad/net/response_handler', ['can/construct/construct'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var ResponseHandler = mad.net.ResponseHandler = can.Construct.extend('mad.net.ResponseHandler', {}, {
            defaults: { defaultErrorHandlerClass: 'mad.error.ErrorHandler' },
            'response': null,
            'request': null,
            'callback': null,
            _getErrorHandlerClass: function () {
                var ErrorHandlerClass = this.defaults.defaultErrorHandlerClass;
                var configErrorHandler = mad.Config.read('net.ErrorHandlerClassName');
                if (configErrorHandler !== undefined) {
                    ErrorHandlerClass = configErrorHandler;
                }
                return ErrorHandlerClass;
            },
            init: function (response, request, callbacks) {
                this.response = response;
                this.request = request;
                this.callbacks = callbacks || {};
            },
            handle: function () {
                this._log();
                switch (this.response.getStatus('status')) {
                case mad.net.Response.STATUS_ERROR:
                    this._error();
                    break;
                case mad.net.Response.STATUS_NOTICE:
                    this._notice();
                    break;
                case mad.net.Response.STATUS_SUCCESS:
                    this._success();
                    break;
                case mad.net.Response.STATUS_WARNING:
                    this._warning();
                    break;
                }
            },
            _log: function () {
                var message = this.response.getStatus().toUpperCase() + ' ' + this.request.type.toUpperCase() + ' ' + this.request.url + '  ' + this.response.getController() + ' ' + this.response.getAction() + ' (' + this.response.getTitle() + ')';
            },
            _success: function () {
                if (this.callbacks.success) {
                    this.callbacks.success(this.response, this.request);
                }
            },
            _error: function () {
                var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
                ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
                if (this.callbacks.error) {
                    this.callbacks.error(this.response, this.request);
                }
            },
            _notice: function () {
                var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
                ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
                if (this.callbacks.notice) {
                    this.callbacks.notice(this.response, this.request);
                }
            },
            _warning: function () {
                var ErrorHandlerClass = can.getObject(this._getErrorHandlerClass());
                ErrorHandlerClass.handleError(this.response.getStatus(), this.response.getTitle(), this.response.getMessage(), this.response.getData());
                if (this.callbacks.warning) {
                    this.callbacks.warning(this.response, this.request);
                }
            }
        });
    var $__default = ResponseHandler;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/net/ajax*/
define('mad/net/ajax', [
    'can/construct/construct',
    'mad/net/response',
    'mad/net/response_handler'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    mad.net = mad.net || {};
    var Ajax = mad.net.Ajax = can.Construct.extend('mad.net.Ajax', {
            defaults: { defaultResponseHandlerClass: 'mad.net.ResponseHandler' },
            _getResponseHandlerClass: function () {
                var ResponseHandlerClass = this.defaults.defaultResponseHandlerClass;
                var configHandler = mad.Config.read('net.ResponseHandlerClassName');
                if (configHandler !== undefined) {
                    ResponseHandlerClass = configHandler;
                }
                return ResponseHandlerClass;
            },
            request: function (request) {
                request.originParams = $.extend({}, request.params);
                request.url = can.sub(request.url, request.params, true);
                request.dataType = request.dataType || 'json';
                request.data = request.params;
                request.type = request.type ? request.type.toUpperCase() : 'GET';
                if (typeof request.silentLoading == 'undefined') {
                    request.silentLoading = true;
                    if (request.type == 'POST' || request.type == 'DELETE' || request.type == 'PUT') {
                        request.silentLoading = false;
                    }
                }
                var returnValue = can.ajax(request).pipe(function (data, textStatus, jqXHR) {
                        var response = new mad.net.Response(data), deferred = null;
                        if (response.getStatus() == mad.net.Response.STATUS_ERROR) {
                            deferred = $.Deferred();
                            deferred.rejectWith(this, [
                                jqXHR,
                                'error',
                                response
                            ]);
                            return deferred;
                        }
                        deferred = $.Deferred();
                        deferred.resolveWith(this, [
                            data.body,
                            response,
                            request
                        ]);
                        return deferred;
                    }, function (jqXHR, textStatus, data) {
                        var jsonData = null;
                        var response = null;
                        try {
                            if (typeof jqXHR.responseText != undefined) {
                                jsonData = $.parseJSON(jqXHR.responseText);
                            }
                        } catch (e) {
                        }
                        if (jsonData != null && mad.net.Response.isResponse(jsonData)) {
                            response = new mad.net.Response(jsonData);
                        } else {
                            response = mad.net.Response.getResponse('unreachable');
                        }
                        var deferred = $.Deferred();
                        deferred.rejectWith(this, [
                            jqXHR,
                            response.getStatus(),
                            response,
                            request
                        ]);
                        return deferred;
                    });
                var self = this;
                returnValue.then(function (data, response, request) {
                    var ResponseHandlerClass = self._getResponseHandlerClass();
                    var ResponseHandlerClass = can.getObject(ResponseHandlerClass);
                    var responseHandler = new ResponseHandlerClass(response, request);
                    responseHandler.handle();
                });
                returnValue.fail(function (jqXHR, textStatus, response) {
                    var ResponseHandlerClass = self._getResponseHandlerClass();
                    var ResponseHandlerClass = can.getObject(ResponseHandlerClass);
                    var responseHandler = new ResponseHandlerClass(response, request);
                    responseHandler.handle();
                });
                return returnValue;
            }
        }, {});
    var $__default = Ajax;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/control/bus*/
define('mad/control/bus', ['mad/control/control'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Bus = mad.Bus = mad.Control.extend('mad.Bus', {
            trigger: function (eventName, eventData) {
                var data = typeof eventData != 'undefined' ? eventData : [];
                this.element.trigger(eventName, data);
                if (!steal.isRhino) {
                    var event = document.createEvent('CustomEvent');
                    event.initCustomEvent(eventName, true, true, data);
                    document.documentElement.dispatchEvent(event);
                }
            },
            triggerRequest: function (rqstName, rqstData) {
                var data = [], deferred = $.Deferred();
                if (Object.prototype.toString.call(rqstData) == '[object Array]') {
                    data = rqstData;
                } else if (Object.prototype.toString.call(rqstData) == '[object Object]') {
                    data = [rqstData];
                }
                data.unshift(deferred);
                this.trigger(rqstName, data);
                return deferred.promise();
            },
            bind: function (eventName, func) {
                this.element.bind(eventName, func);
            }
        });
    window.addEventListener('addon-message', function (event) {
        mad.bus.element.trigger(event.detail.event, event.detail.data);
    }, false);
    var $__default = Bus;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/config/config.json*/
define('mad/config/config.json', [], function () {
    return {
        'core': {
            'components': [
                'EventBus',
                'AppController'
            ]
        },
        'app': {
            'debug': 1,
            'url': 'http://localhost',
            'controllerElt': 'body',
            'namespace': 'app',
            'ControllerClassName': ''
        },
        'error': { 'ErrorHandlerClassName': 'mad.error.ErrorHandler' },
        'i18n': { 'dictionnaryUrl': 'dictionnaries/EN-en.json' },
        'net': { 'ResponseHandlerClassName': 'mad.net.ResponseHandler' }
    };
});
/*mad/bootstrap*/
define('mad/bootstrap', [
    'mad/mad',
    'mad/net/ajax',
    'mad/control/bus',
    'mad/util/lang/i18n',
    'mad/config/config.json'
], function ($__0, $__2, $__3, $__4, $__5) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    var mad = $__0.default;
    $__2;
    $__3;
    $__4;
    var madConfig = $__5.default;
    mad.Config.load(madConfig);
    var Boostrap = mad.Bootstrap = can.Construct.extend('mad.Bootstrap', { defaults: { callbacks: { ready: null } } }, {
            init: function (options) {
                this.options = {};
                options = options || {};
                $.extend(true, this.options, mad.Bootstrap.defaults, options);
                var appUrl = mad.Config.read('app.url');
                if (typeof appUrl == 'undefined') {
                    throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.url');
                }
                mad.setGlobal('APP_URL', appUrl);
                var ErrorHandlerClass = can.getObject(mad.Config.read('error.ErrorHandlerClassName'));
                if (!ErrorHandlerClass) {
                    throw mad.Exception.get(mad.error.MISSING_CONFIG, 'error.ErrorHandlerClassName');
                }
                mad.Config.write('error.ErrorHandlerClass', ErrorHandlerClass);
                var ResponseHandlerClass = can.getObject(mad.Config.read('net.ResponseHandlerClassName'));
                if (!ResponseHandlerClass) {
                    throw mad.Exception.get(mad.error.MISSING_CONFIG, 'net.ResponseHandlerClassName');
                }
                mad.Config.write('net.ResponseHandlerClass', ResponseHandlerClass);
                var AppControllerClass = can.getObject(mad.Config.read('app.ControllerClassName'));
                if (!AppControllerClass) {
                    throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.ControllerClassName');
                }
                mad.Config.write('app.AppControllerClass', AppControllerClass);
                if (!$(mad.Config.read('app.controllerElt')).length) {
                    throw mad.Exception.get(mad.error.MISSING_CONFIG, 'app.controllerElt');
                }
                var ns = can.getObject(mad.Config.read('app.namespace'), window, true);
                var components = mad.Config.read('core.components');
                for (var i in components) {
                    console.debug('Bootstrap init component ' + components[i]);
                    if (components[i] == 'Devel' && (mad.Config.read('app.debug') == null || mad.Config.read('app.debug') == 0)) {
                        continue;
                    }
                    this['init' + components[i]]();
                }
            },
            initAppController: function () {
                var self = this;
                mad.bus.bind('app_ready', function () {
                    if (self.options.callbacks.ready) {
                        self.options.callbacks.ready();
                    }
                });
                var AppControllerClass = can.getObject(mad.Config.read('app.ControllerClassName'));
                var app = new AppControllerClass($(mad.Config.read('app.controllerElt')));
                app.start();
            },
            initEventBus: function () {
                var elt = mad.helper.Html.create($(mad.Config.read('app.controllerElt')), 'before', '<div/>');
                var eventBus = new mad.Bus(elt);
                mad.bus = eventBus;
            },
            initDevel: function () {
                var elt = mad.helper.HtmlHelper.create($(mad.Config.read('app.controllerElt')), 'before', '<div/>');
                var dev = new mad.devel.Devel(elt);
                mad.dev = dev;
            }
        });
    var $__default = Boostrap;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/error/error_handler*/
define('app/error/error_handler', ['mad/error/error_handler'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    passbolt.error = passbolt.error || {};
    var ErrorHandler = passbolt.error.ErrorHandler = mad.error.ErrorHandler.extend('passbolt.error.ErrorHandler', {});
    var $__default = ErrorHandler;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad*/
define('mad', [
    'jquery',
    'underscore',
    'can/can',
    'mad/util/util',
    'mad/error/exception',
    'mad/error/error_handler',
    'mad/helper/component',
    'mad/helper/control',
    'mad/helper/html',
    'mad/config/config',
    'mad/util/array/array',
    'mad/util/map/map',
    'mad/util/validation',
    'mad/util/lang/i18n',
    'mad/model/model',
    'mad/model/list',
    'mad/model/state',
    'mad/model/attribute',
    'mad/control/control',
    'mad/view/view',
    'mad/component/component'
], function ($__0, $__2, $__4, $__6, $__8, $__9, $__10, $__11, $__12, $__13, $__14, $__15, $__16, $__17, $__18, $__19, $__20, $__21, $__22, $__23, $__24) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    if (!$__13 || !$__13.__esModule)
        $__13 = { default: $__13 };
    if (!$__14 || !$__14.__esModule)
        $__14 = { default: $__14 };
    if (!$__15 || !$__15.__esModule)
        $__15 = { default: $__15 };
    if (!$__16 || !$__16.__esModule)
        $__16 = { default: $__16 };
    if (!$__17 || !$__17.__esModule)
        $__17 = { default: $__17 };
    if (!$__18 || !$__18.__esModule)
        $__18 = { default: $__18 };
    if (!$__19 || !$__19.__esModule)
        $__19 = { default: $__19 };
    if (!$__20 || !$__20.__esModule)
        $__20 = { default: $__20 };
    if (!$__21 || !$__21.__esModule)
        $__21 = { default: $__21 };
    if (!$__22 || !$__22.__esModule)
        $__22 = { default: $__22 };
    if (!$__23 || !$__23.__esModule)
        $__23 = { default: $__23 };
    if (!$__24 || !$__24.__esModule)
        $__24 = { default: $__24 };
    var $ = $__0.default;
    var _ = $__2.default;
    var can = $__4.default;
    var mad = $__6.default;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    $__13;
    $__14;
    $__15;
    $__16;
    $__17;
    $__18;
    $__19;
    $__20;
    $__21;
    $__22;
    $__23;
    $__24;
    var $__default = mad;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/net/response_handler*/
define('app/net/response_handler', ['mad'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    mad.net.ResponseHandler.extend('passbolt.net.ResponseHandler', {}, {
        '_success': function () {
            if (mad.bus) {
                mad.bus.trigger('passbolt_notify', {
                    'title': this.response.header.title,
                    'status': this.response.header.status,
                    'data': this.response
                });
            }
            this._super();
        },
        '_error': function () {
            if (this.response.getStatus() == mad.net.Response.STATUS_ERROR && this.response.getMessage() == __('You need to login to access this location')) {
                location.href = mad.Config.read('app.url');
            } else {
                this.response.attr('header').title = this.response.getMessage();
            }
            this._super();
        }
    });
    return {};
});
/*sha1*/
'use strict';
(function (T) {
    function y(c, a, d) {
        var b = 0, f = [], k = 0, g, e, n, h, m, u, r, p = !1, q = !1, t = [], v = [], x, w = !1;
        d = d || {};
        g = d.encoding || 'UTF8';
        x = d.numRounds || 1;
        n = J(a, g);
        if (x !== parseInt(x, 10) || 1 > x)
            throw Error('numRounds must a integer >= 1');
        if ('SHA-1' === c)
            m = 512, u = K, r = U, h = 160;
        else if (u = function (a, d) {
                return L(a, d, c);
            }, r = function (a, d, b, f) {
                var k, e;
                if ('SHA-224' === c || 'SHA-256' === c)
                    k = (d + 65 >>> 9 << 4) + 15, e = 16;
                else if ('SHA-384' === c || 'SHA-512' === c)
                    k = (d + 129 >>> 10 << 5) + 31, e = 32;
                else
                    throw Error('Unexpected error in SHA-2 implementation');
                for (; a.length <= k;)
                    a.push(0);
                a[d >>> 5] |= 128 << 24 - d % 32;
                a[k] = d + b;
                b = a.length;
                for (d = 0; d < b; d += e)
                    f = L(a.slice(d, d + e), f, c);
                if ('SHA-224' === c)
                    a = [
                        f[0],
                        f[1],
                        f[2],
                        f[3],
                        f[4],
                        f[5],
                        f[6]
                    ];
                else if ('SHA-256' === c)
                    a = f;
                else if ('SHA-384' === c)
                    a = [
                        f[0].a,
                        f[0].b,
                        f[1].a,
                        f[1].b,
                        f[2].a,
                        f[2].b,
                        f[3].a,
                        f[3].b,
                        f[4].a,
                        f[4].b,
                        f[5].a,
                        f[5].b
                    ];
                else if ('SHA-512' === c)
                    a = [
                        f[0].a,
                        f[0].b,
                        f[1].a,
                        f[1].b,
                        f[2].a,
                        f[2].b,
                        f[3].a,
                        f[3].b,
                        f[4].a,
                        f[4].b,
                        f[5].a,
                        f[5].b,
                        f[6].a,
                        f[6].b,
                        f[7].a,
                        f[7].b
                    ];
                else
                    throw Error('Unexpected error in SHA-2 implementation');
                return a;
            }, 'SHA-224' === c)
            m = 512, h = 224;
        else if ('SHA-256' === c)
            m = 512, h = 256;
        else if ('SHA-384' === c)
            m = 1024, h = 384;
        else if ('SHA-512' === c)
            m = 1024, h = 512;
        else
            throw Error('Chosen SHA variant is not supported');
        e = z(c);
        this.setHMACKey = function (a, d, f) {
            var k;
            if (!0 === q)
                throw Error('HMAC key already set');
            if (!0 === p)
                throw Error('Cannot set HMAC key after finalizing hash');
            if (!0 === w)
                throw Error('Cannot set HMAC key after calling update');
            g = (f || {}).encoding || 'UTF8';
            d = J(d, g)(a);
            a = d.binLen;
            d = d.value;
            k = m >>> 3;
            f = k / 4 - 1;
            if (k < a / 8) {
                for (d = r(d, a, 0, z(c)); d.length <= f;)
                    d.push(0);
                d[f] &= 4294967040;
            } else if (k > a / 8) {
                for (; d.length <= f;)
                    d.push(0);
                d[f] &= 4294967040;
            }
            for (a = 0; a <= f; a += 1)
                t[a] = d[a] ^ 909522486, v[a] = d[a] ^ 1549556828;
            e = u(t, e);
            b = m;
            q = !0;
        };
        this.update = function (a) {
            var c, d, g, h = 0, p = m >>> 5;
            c = n(a, f, k);
            a = c.binLen;
            d = c.value;
            c = a >>> 5;
            for (g = 0; g < c; g += p)
                h + m <= a && (e = u(d.slice(g, g + p), e), h += m);
            b += h;
            f = d.slice(h >>> 5);
            k = a % m;
            w = !0;
        };
        this.getHash = function (a, d) {
            var g, m, n;
            if (!0 === q)
                throw Error('Cannot call getHash after setting HMAC key');
            n = M(d);
            switch (a) {
            case 'HEX':
                g = function (a) {
                    return N(a, n);
                };
                break;
            case 'B64':
                g = function (a) {
                    return O(a, n);
                };
                break;
            case 'BYTES':
                g = P;
                break;
            default:
                throw Error('format must be HEX, B64, or BYTES');
            }
            if (!1 === p)
                for (e = r(f, k, b, e), m = 1; m < x; m += 1)
                    e = r(e, h, 0, z(c));
            p = !0;
            return g(e);
        };
        this.getHMAC = function (a, d) {
            var g, n, t;
            if (!1 === q)
                throw Error('Cannot call getHMAC without first setting HMAC key');
            t = M(d);
            switch (a) {
            case 'HEX':
                g = function (a) {
                    return N(a, t);
                };
                break;
            case 'B64':
                g = function (a) {
                    return O(a, t);
                };
                break;
            case 'BYTES':
                g = P;
                break;
            default:
                throw Error('outputFormat must be HEX, B64, or BYTES');
            }
            !1 === p && (n = r(f, k, b, e), e = u(v, z(c)), e = r(n, h, m, e));
            p = !0;
            return g(e);
        };
    }
    function b(c, a) {
        this.a = c;
        this.b = a;
    }
    function V(c, a, d) {
        var b = c.length, f, k, e, l, n;
        a = a || [0];
        d = d || 0;
        n = d >>> 3;
        if (0 !== b % 2)
            throw Error('String of HEX type must be in byte increments');
        for (f = 0; f < b; f += 2) {
            k = parseInt(c.substr(f, 2), 16);
            if (isNaN(k))
                throw Error('String of HEX type contains invalid characters');
            l = (f >>> 1) + n;
            for (e = l >>> 2; a.length <= e;)
                a.push(0);
            a[e] |= k << 8 * (3 - l % 4);
        }
        return {
            value: a,
            binLen: 4 * b + d
        };
    }
    function W(c, a, d) {
        var b = [], f, k, e, l, b = a || [0];
        d = d || 0;
        k = d >>> 3;
        for (f = 0; f < c.length; f += 1)
            a = c.charCodeAt(f), l = f + k, e = l >>> 2, b.length <= e && b.push(0), b[e] |= a << 8 * (3 - l % 4);
        return {
            value: b,
            binLen: 8 * c.length + d
        };
    }
    function X(c, a, d) {
        var b = [], f = 0, e, g, l, n, h, m, b = a || [0];
        d = d || 0;
        a = d >>> 3;
        if (-1 === c.search(/^[a-zA-Z0-9=+\/]+$/))
            throw Error('Invalid character in base-64 string');
        g = c.indexOf('=');
        c = c.replace(/\=/g, '');
        if (-1 !== g && g < c.length)
            throw Error('Invalid \'=\' found in base-64 string');
        for (g = 0; g < c.length; g += 4) {
            h = c.substr(g, 4);
            for (l = n = 0; l < h.length; l += 1)
                e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(h[l]), n |= e << 18 - 6 * l;
            for (l = 0; l < h.length - 1; l += 1) {
                m = f + a;
                for (e = m >>> 2; b.length <= e;)
                    b.push(0);
                b[e] |= (n >>> 16 - 8 * l & 255) << 8 * (3 - m % 4);
                f += 1;
            }
        }
        return {
            value: b,
            binLen: 8 * f + d
        };
    }
    function N(c, a) {
        var d = '', b = 4 * c.length, f, e;
        for (f = 0; f < b; f += 1)
            e = c[f >>> 2] >>> 8 * (3 - f % 4), d += '0123456789abcdef'.charAt(e >>> 4 & 15) + '0123456789abcdef'.charAt(e & 15);
        return a.outputUpper ? d.toUpperCase() : d;
    }
    function O(c, a) {
        var d = '', b = 4 * c.length, f, e, g;
        for (f = 0; f < b; f += 3)
            for (g = f + 1 >>> 2, e = c.length <= g ? 0 : c[g], g = f + 2 >>> 2, g = c.length <= g ? 0 : c[g], g = (c[f >>> 2] >>> 8 * (3 - f % 4) & 255) << 16 | (e >>> 8 * (3 - (f + 1) % 4) & 255) << 8 | g >>> 8 * (3 - (f + 2) % 4) & 255, e = 0; 4 > e; e += 1)
                8 * f + 6 * e <= 32 * c.length ? d += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(g >>> 6 * (3 - e) & 63) : d += a.b64Pad;
        return d;
    }
    function P(c) {
        var a = '', d = 4 * c.length, b, f;
        for (b = 0; b < d; b += 1)
            f = c[b >>> 2] >>> 8 * (3 - b % 4) & 255, a += String.fromCharCode(f);
        return a;
    }
    function M(c) {
        var a = {
                outputUpper: !1,
                b64Pad: '='
            };
        c = c || {};
        a.outputUpper = c.outputUpper || !1;
        a.b64Pad = c.b64Pad || '=';
        if ('boolean' !== typeof a.outputUpper)
            throw Error('Invalid outputUpper formatting option');
        if ('string' !== typeof a.b64Pad)
            throw Error('Invalid b64Pad formatting option');
        return a;
    }
    function J(c, a) {
        var d;
        switch (a) {
        case 'UTF8':
        case 'UTF16BE':
        case 'UTF16LE':
            break;
        default:
            throw Error('encoding must be UTF8, UTF16BE, or UTF16LE');
        }
        switch (c) {
        case 'HEX':
            d = V;
            break;
        case 'TEXT':
            d = function (c, d, b) {
                var e = [], l = [], n = 0, h, m, u, r, p, e = d || [0];
                d = b || 0;
                u = d >>> 3;
                if ('UTF8' === a)
                    for (h = 0; h < c.length; h += 1)
                        for (b = c.charCodeAt(h), l = [], 128 > b ? l.push(b) : 2048 > b ? (l.push(192 | b >>> 6), l.push(128 | b & 63)) : 55296 > b || 57344 <= b ? l.push(224 | b >>> 12, 128 | b >>> 6 & 63, 128 | b & 63) : (h += 1, b = 65536 + ((b & 1023) << 10 | c.charCodeAt(h) & 1023), l.push(240 | b >>> 18, 128 | b >>> 12 & 63, 128 | b >>> 6 & 63, 128 | b & 63)), m = 0; m < l.length; m += 1) {
                            p = n + u;
                            for (r = p >>> 2; e.length <= r;)
                                e.push(0);
                            e[r] |= l[m] << 8 * (3 - p % 4);
                            n += 1;
                        }
                else if ('UTF16BE' === a || 'UTF16LE' === a)
                    for (h = 0; h < c.length; h += 1) {
                        b = c.charCodeAt(h);
                        'UTF16LE' === a && (m = b & 255, b = m << 8 | b >>> 8);
                        p = n + u;
                        for (r = p >>> 2; e.length <= r;)
                            e.push(0);
                        e[r] |= b << 8 * (2 - p % 4);
                        n += 2;
                    }
                return {
                    value: e,
                    binLen: 8 * n + d
                };
            };
            break;
        case 'B64':
            d = X;
            break;
        case 'BYTES':
            d = W;
            break;
        default:
            throw Error('format must be HEX, TEXT, B64, or BYTES');
        }
        return d;
    }
    function w(c, a) {
        return c << a | c >>> 32 - a;
    }
    function q(c, a) {
        return c >>> a | c << 32 - a;
    }
    function v(c, a) {
        var d = null, d = new b(c.a, c.b);
        return d = 32 >= a ? new b(d.a >>> a | d.b << 32 - a & 4294967295, d.b >>> a | d.a << 32 - a & 4294967295) : new b(d.b >>> a - 32 | d.a << 64 - a & 4294967295, d.a >>> a - 32 | d.b << 64 - a & 4294967295);
    }
    function Q(c, a) {
        var d = null;
        return d = 32 >= a ? new b(c.a >>> a, c.b >>> a | c.a << 32 - a & 4294967295) : new b(0, c.a >>> a - 32);
    }
    function Y(c, a, d) {
        return c & a ^ ~c & d;
    }
    function Z(c, a, d) {
        return new b(c.a & a.a ^ ~c.a & d.a, c.b & a.b ^ ~c.b & d.b);
    }
    function R(c, a, d) {
        return c & a ^ c & d ^ a & d;
    }
    function aa(c, a, d) {
        return new b(c.a & a.a ^ c.a & d.a ^ a.a & d.a, c.b & a.b ^ c.b & d.b ^ a.b & d.b);
    }
    function ba(c) {
        return q(c, 2) ^ q(c, 13) ^ q(c, 22);
    }
    function ca(c) {
        var a = v(c, 28), d = v(c, 34);
        c = v(c, 39);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function da(c) {
        return q(c, 6) ^ q(c, 11) ^ q(c, 25);
    }
    function ea(c) {
        var a = v(c, 14), d = v(c, 18);
        c = v(c, 41);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function fa(c) {
        return q(c, 7) ^ q(c, 18) ^ c >>> 3;
    }
    function ga(c) {
        var a = v(c, 1), d = v(c, 8);
        c = Q(c, 7);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function ha(c) {
        return q(c, 17) ^ q(c, 19) ^ c >>> 10;
    }
    function ia(c) {
        var a = v(c, 19), d = v(c, 61);
        c = Q(c, 6);
        return new b(a.a ^ d.a ^ c.a, a.b ^ d.b ^ c.b);
    }
    function B(c, a) {
        var d = (c & 65535) + (a & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) & 65535) << 16 | d & 65535;
    }
    function ja(c, a, d, b) {
        var f = (c & 65535) + (a & 65535) + (d & 65535) + (b & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (b >>> 16) + (f >>> 16) & 65535) << 16 | f & 65535;
    }
    function C(c, a, d, b, f) {
        var e = (c & 65535) + (a & 65535) + (d & 65535) + (b & 65535) + (f & 65535);
        return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (b >>> 16) + (f >>> 16) + (e >>> 16) & 65535) << 16 | e & 65535;
    }
    function ka(c, a) {
        var d, e, f;
        d = (c.b & 65535) + (a.b & 65535);
        e = (c.b >>> 16) + (a.b >>> 16) + (d >>> 16);
        f = (e & 65535) << 16 | d & 65535;
        d = (c.a & 65535) + (a.a & 65535) + (e >>> 16);
        e = (c.a >>> 16) + (a.a >>> 16) + (d >>> 16);
        return new b((e & 65535) << 16 | d & 65535, f);
    }
    function la(c, a, d, e) {
        var f, k, g;
        f = (c.b & 65535) + (a.b & 65535) + (d.b & 65535) + (e.b & 65535);
        k = (c.b >>> 16) + (a.b >>> 16) + (d.b >>> 16) + (e.b >>> 16) + (f >>> 16);
        g = (k & 65535) << 16 | f & 65535;
        f = (c.a & 65535) + (a.a & 65535) + (d.a & 65535) + (e.a & 65535) + (k >>> 16);
        k = (c.a >>> 16) + (a.a >>> 16) + (d.a >>> 16) + (e.a >>> 16) + (f >>> 16);
        return new b((k & 65535) << 16 | f & 65535, g);
    }
    function ma(c, a, d, e, f) {
        var k, g, l;
        k = (c.b & 65535) + (a.b & 65535) + (d.b & 65535) + (e.b & 65535) + (f.b & 65535);
        g = (c.b >>> 16) + (a.b >>> 16) + (d.b >>> 16) + (e.b >>> 16) + (f.b >>> 16) + (k >>> 16);
        l = (g & 65535) << 16 | k & 65535;
        k = (c.a & 65535) + (a.a & 65535) + (d.a & 65535) + (e.a & 65535) + (f.a & 65535) + (g >>> 16);
        g = (c.a >>> 16) + (a.a >>> 16) + (d.a >>> 16) + (e.a >>> 16) + (f.a >>> 16) + (k >>> 16);
        return new b((g & 65535) << 16 | k & 65535, l);
    }
    function z(c) {
        var a, d;
        if ('SHA-1' === c)
            c = [
                1732584193,
                4023233417,
                2562383102,
                271733878,
                3285377520
            ];
        else
            switch (a = [
                    3238371032,
                    914150663,
                    812702999,
                    4144912697,
                    4290775857,
                    1750603025,
                    1694076839,
                    3204075428
                ], d = [
                    1779033703,
                    3144134277,
                    1013904242,
                    2773480762,
                    1359893119,
                    2600822924,
                    528734635,
                    1541459225
                ], c) {
            case 'SHA-224':
                c = a;
                break;
            case 'SHA-256':
                c = d;
                break;
            case 'SHA-384':
                c = [
                    new b(3418070365, a[0]),
                    new b(1654270250, a[1]),
                    new b(2438529370, a[2]),
                    new b(355462360, a[3]),
                    new b(1731405415, a[4]),
                    new b(41048885895, a[5]),
                    new b(3675008525, a[6]),
                    new b(1203062813, a[7])
                ];
                break;
            case 'SHA-512':
                c = [
                    new b(d[0], 4089235720),
                    new b(d[1], 2227873595),
                    new b(d[2], 4271175723),
                    new b(d[3], 1595750129),
                    new b(d[4], 2917565137),
                    new b(d[5], 725511199),
                    new b(d[6], 4215389547),
                    new b(d[7], 327033209)
                ];
                break;
            default:
                throw Error('Unknown SHA variant');
            }
        return c;
    }
    function K(c, a) {
        var d = [], b, e, k, g, l, n, h;
        b = a[0];
        e = a[1];
        k = a[2];
        g = a[3];
        l = a[4];
        for (h = 0; 80 > h; h += 1)
            d[h] = 16 > h ? c[h] : w(d[h - 3] ^ d[h - 8] ^ d[h - 14] ^ d[h - 16], 1), n = 20 > h ? C(w(b, 5), e & k ^ ~e & g, l, 1518500249, d[h]) : 40 > h ? C(w(b, 5), e ^ k ^ g, l, 1859775393, d[h]) : 60 > h ? C(w(b, 5), R(e, k, g), l, 2400959708, d[h]) : C(w(b, 5), e ^ k ^ g, l, 3395469782, d[h]), l = g, g = k, k = w(e, 30), e = b, b = n;
        a[0] = B(b, a[0]);
        a[1] = B(e, a[1]);
        a[2] = B(k, a[2]);
        a[3] = B(g, a[3]);
        a[4] = B(l, a[4]);
        return a;
    }
    function U(c, a, b, e) {
        var f;
        for (f = (a + 65 >>> 9 << 4) + 15; c.length <= f;)
            c.push(0);
        c[a >>> 5] |= 128 << 24 - a % 32;
        c[f] = a + b;
        b = c.length;
        for (a = 0; a < b; a += 16)
            e = K(c.slice(a, a + 16), e);
        return e;
    }
    function L(c, a, d) {
        var q, f, k, g, l, n, h, m, u, r, p, v, t, w, x, y, z, D, E, F, G, H, A = [], I;
        if ('SHA-224' === d || 'SHA-256' === d)
            r = 64, v = 1, H = Number, t = B, w = ja, x = C, y = fa, z = ha, D = ba, E = da, G = R, F = Y, I = e;
        else if ('SHA-384' === d || 'SHA-512' === d)
            r = 80, v = 2, H = b, t = ka, w = la, x = ma, y = ga, z = ia, D = ca, E = ea, G = aa, F = Z, I = S;
        else
            throw Error('Unexpected error in SHA-2 implementation');
        d = a[0];
        q = a[1];
        f = a[2];
        k = a[3];
        g = a[4];
        l = a[5];
        n = a[6];
        h = a[7];
        for (p = 0; p < r; p += 1)
            16 > p ? (u = p * v, m = c.length <= u ? 0 : c[u], u = c.length <= u + 1 ? 0 : c[u + 1], A[p] = new H(m, u)) : A[p] = w(z(A[p - 2]), A[p - 7], y(A[p - 15]), A[p - 16]), m = x(h, E(g), F(g, l, n), I[p], A[p]), u = t(D(d), G(d, q, f)), h = n, n = l, l = g, g = t(k, m), k = f, f = q, q = d, d = t(m, u);
        a[0] = t(d, a[0]);
        a[1] = t(q, a[1]);
        a[2] = t(f, a[2]);
        a[3] = t(k, a[3]);
        a[4] = t(g, a[4]);
        a[5] = t(l, a[5]);
        a[6] = t(n, a[6]);
        a[7] = t(h, a[7]);
        return a;
    }
    var e, S;
    e = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ];
    S = [
        new b(e[0], 3609767458),
        new b(e[1], 602891725),
        new b(e[2], 3964484399),
        new b(e[3], 2173295548),
        new b(e[4], 4081628472),
        new b(e[5], 3053834265),
        new b(e[6], 2937671579),
        new b(e[7], 3664609560),
        new b(e[8], 2734883394),
        new b(e[9], 1164996542),
        new b(e[10], 1323610764),
        new b(e[11], 3590304994),
        new b(e[12], 4068182383),
        new b(e[13], 991336113),
        new b(e[14], 633803317),
        new b(e[15], 3479774868),
        new b(e[16], 2666613458),
        new b(e[17], 944711139),
        new b(e[18], 2341262773),
        new b(e[19], 2007800933),
        new b(e[20], 1495990901),
        new b(e[21], 1856431235),
        new b(e[22], 3175218132),
        new b(e[23], 2198950837),
        new b(e[24], 3999719339),
        new b(e[25], 766784016),
        new b(e[26], 2566594879),
        new b(e[27], 3203337956),
        new b(e[28], 1034457026),
        new b(e[29], 2466948901),
        new b(e[30], 3758326383),
        new b(e[31], 168717936),
        new b(e[32], 1188179964),
        new b(e[33], 1546045734),
        new b(e[34], 1522805485),
        new b(e[35], 2643833823),
        new b(e[36], 2343527390),
        new b(e[37], 1014477480),
        new b(e[38], 1206759142),
        new b(e[39], 344077627),
        new b(e[40], 1290863460),
        new b(e[41], 3158454273),
        new b(e[42], 3505952657),
        new b(e[43], 106217008),
        new b(e[44], 3606008344),
        new b(e[45], 1432725776),
        new b(e[46], 1467031594),
        new b(e[47], 851169720),
        new b(e[48], 3100823752),
        new b(e[49], 1363258195),
        new b(e[50], 3750685593),
        new b(e[51], 3785050280),
        new b(e[52], 3318307427),
        new b(e[53], 3812723403),
        new b(e[54], 2003034995),
        new b(e[55], 3602036899),
        new b(e[56], 1575990012),
        new b(e[57], 1125592928),
        new b(e[58], 2716904306),
        new b(e[59], 442776044),
        new b(e[60], 593698344),
        new b(e[61], 3733110249),
        new b(e[62], 2999351573),
        new b(e[63], 3815920427),
        new b(3391569614, 3928383900),
        new b(3515267271, 566280711),
        new b(3940187606, 3454069534),
        new b(4118630271, 4000239992),
        new b(116418474, 1914138554),
        new b(174292421, 2731055270),
        new b(289380356, 3203993006),
        new b(460393269, 320620315),
        new b(685471733, 587496836),
        new b(852142971, 1086792851),
        new b(1017036298, 365543100),
        new b(1126000580, 2618297676),
        new b(1288033470, 3409855158),
        new b(1501505948, 4234509866),
        new b(1607167915, 987167468),
        new b(1816402316, 1246189591)
    ];
    'function' === typeof define && define.amd ? define('sha1', function () {
        return y;
    }) : 'undefined' !== typeof exports ? 'undefined' !== typeof module && module.exports ? module.exports = exports = y : exports = y : T.jsSHA = y;
}(this));
/*app/util/common*/
define('app/util/common', [
    'sha1',
    'xregexp',
    'mad/component/component'
], function ($__0, $__2, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    var jsSHA = $__0.default;
    var XRegExp = $__2.default;
    $__4;
    var Common = passbolt.Common = mad.Component.extend('passbolt.Common', {
            uuid: function (seed) {
                var shaObj = new jsSHA('SHA-1', 'TEXT');
                shaObj.update(seed);
                var hashStr = shaObj.getHash('HEX').substring(0, 32);
                var search = XRegExp('^(?<first>.{8})(?<second>.{4})(?<third>.{1})(?<fourth>.{3})(?<fifth>.{1})(?<sixth>.{3})(?<seventh>.{12}$)');
                var replace = XRegExp('${first}-${second}-3${fourth}-a${sixth}-${seventh}');
                var uuid = XRegExp.replace(hashStr, search, replace).replace(/\//g, '');
                return uuid;
            }
        }, {});
    var $__default = Common;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/component/composite*/
define('mad/component/composite', ['mad/component/component'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Composite = mad.component.Composite = mad.Component.extend('mad.component.Composite', { 'defaults': { 'label': 'Composite Component Controller' } }, {
            init: function (el, options) {
                this._components = [];
                this._super(el, options);
            },
            getComponent: function (id) {
                return this._components[id];
            },
            addComponent: function (component) {
                this._components[component.getId()] = component;
                return component;
            }
        });
    var $__default = Composite;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/tree*/
define('mad/view/component/tree', [
    'mad/view/view',
    'mad/helper/html'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Tree = mad.view.component.Tree = mad.View.extend('mad.view.component.Tree', {}, {
            getItemElement: function (item) {
                return $('#' + item.id, this.element);
            },
            insertItem: function (item, refItem, position) {
                position = position || 'last';
                var self = this, $item = null, $refElement = null, itemRender = '', control = this.getController();
                var mappedItem = control.getMap().mapObject(item);
                control.setViewData('mappedItem', mappedItem);
                var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
                control.setViewData('hasChildren', hasChildren);
                var cssClasses = [];
                if (typeof mappedItem['cssClasses'] != 'undefined') {
                    cssClasses = cssClasses.concat(mappedItem['cssClasses']);
                }
                control.setViewData('cssClasses', cssClasses);
                if (refItem !== undefined && refItem !== null) {
                    $refElement = this.getItemElement(refItem);
                    if (!$refElement.length) {
                        throw new mad.Exception.get('No HTMLElement found for the given item (%0).', [refItem.id]);
                    }
                    switch (position) {
                    case 'first':
                    case 'last':
                    case 'inside':
                        var $refList = $refElement.find('ul:first');
                        if (!$refList.length) {
                            $refElement = $('<ul></ul>').appendTo($refElement);
                        } else {
                            $refElement = $refList;
                        }
                        break;
                    case 'before':
                    case 'after':
                        $refElement = $refElement;
                        break;
                    }
                } else {
                    $refElement = this.element;
                }
                itemRender = mad.View.render(control.options.itemTemplateUri, control.getViewData());
                $item = mad.helper.Html.create($refElement, position, itemRender);
                can.data($item, control.getItemClass().fullName, item);
                return $item;
            },
            removeItem: function (item) {
                this.getItemElement(item).remove();
            },
            refreshItem: function (item) {
                var self = this, $item = this.getItemElement(item), control = this.getController();
                var mappedItem = control.getMap().mapObject(item);
                ;
                control.setViewData('mappedItem', mappedItem);
                var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
                control.setViewData('hasChildren', hasChildren);
                var cssClasses = [];
                if (typeof mappedItem['cssClasses'] != 'undefined') {
                    cssClasses = cssClasses.concat(mappedItem['cssClasses']);
                }
                control.setViewData('cssClasses', cssClasses);
                var itemRender = mad.View.render(control.options.itemTemplateUri, control.getViewData());
                $item.replaceWith(itemRender);
                $item = this.getItemElement(item);
                can.data($item, control.getItemClass().fullName, item);
                if (hasChildren) {
                    can.each(item.children, function (item, i) {
                        self.insertItem(item, mappedItem.id, 'last');
                    });
                }
                return $item;
            },
            reset: function () {
                $('li', this.element).remove();
            },
            selectItem: function (item) {
                this.unselectAll();
                var $item = this.getItemElement(item);
                $('.row:first', $item).addClass('selected');
            },
            unselectItem: function (item) {
                var $item = this.getItemElement(item);
                $item.removeClass('selected');
            },
            unselectAll: function () {
                $('.row.selected', this.element).removeClass('selected');
            },
            rightSelectItem: function (item) {
            },
            hoverItem: function (item, element, srcEvent) {
            },
            'li .main-cell a click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
                if (itemClass) {
                    data = li.data(itemClass.fullName);
                } else {
                    data = li[0].id;
                }
                this.element.trigger('item_selected', [
                    data,
                    ev
                ]);
                return false;
            },
            'li a contextmenu': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                if (ev.which == 3) {
                    var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
                    if (itemClass) {
                        data = li.data(itemClass.fullName);
                    } else {
                        data = li[0].id;
                    }
                    this.element.trigger('item_right_selected', [
                        data,
                        ev
                    ]);
                }
                return false;
            },
            'li a hover': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null, li = el.parents('li:first'), itemClass = this.getController().getItemClass();
                if (itemClass) {
                    data = li.data(itemClass.fullName);
                } else {
                    data = li[0].id;
                }
                this.element.trigger('item_hovered', [
                    data,
                    ev
                ]);
                return false;
            }
        });
    var $__default = Tree;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/tree/tree.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/tree/tree.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_tree_tree_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/view/template/component/tree/treeItem.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/tree/treeItem.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_tree_treeItem_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a href="#"><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/tree*/
define('mad/component/tree', [
    'mad/component/component',
    'mad/view/component/tree',
    'mad/view/template/component/tree/tree.ejs!',
    'mad/view/template/component/tree/treeItem.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var Tree = mad.component.Tree = mad.Component.extend('mad.component.Tree', {
            defaults: {
                label: 'Tree Component',
                cssClasses: ['tree'],
                tag: 'ul',
                templateUri: 'mad/view/template/component/tree/tree.ejs',
                templateBased: false,
                viewClass: mad.view.component.Tree,
                itemTemplateUri: 'mad/view/template/component/tree/treeItem.ejs',
                itemClass: mad.Model,
                items: new can.Model.List(),
                map: null,
                callbacks: {
                    item_selected: null,
                    item_right_selected: null,
                    item_hovered: null
                }
            }
        }, {
            init: function (el, options) {
                options.items = new options.itemClass.List();
                if (options.map == null) {
                    options.map = this._getDefaultMap();
                }
                this._super(el, options);
            },
            _getDefaultMap: function () {
                return new mad.Map({
                    id: 'id',
                    label: {
                        key: 'id',
                        func: function (value, map, rowObject) {
                            var fields = [
                                    'label',
                                    'title',
                                    'name',
                                    'id'
                                ];
                            for (var i in fields) {
                                if (typeof rowObject[fields[i]] != 'undefined') {
                                    return rowObject[fields[i]];
                                }
                            }
                            return null;
                        }
                    },
                    children: {
                        key: 'children',
                        func: mad.Map.mapObjects
                    }
                });
            },
            insertItem: function (item, refItem, position) {
                var self = this;
                if (this.getItemClass() == null) {
                    throw mad.Exception.get('The associated itemClass can not be null');
                }
                if (!(item instanceof this.getItemClass())) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'item');
                }
                this.options.items.push(item);
                this.view.insertItem(item, refItem, position);
                if (typeof this.options.map.map.children != undefined && this.options.map.map.children != null) {
                    var children = this.options.map._getObjFieldPointer(item, this.options.map.map.children.key);
                    if (typeof children != undefined && children != null && children.length > 0) {
                        can.each(children, function (childItem, i) {
                            self.insertItem(childItem, item, 'last');
                        });
                    }
                }
            },
            removeItem: function (item) {
                var position = this.options.items.indexOf(item);
                if (position != -1) {
                    this.options.items.splice(position, 1);
                    this.view.removeItem(item);
                }
            },
            refreshItem: function (item) {
                if (this.getItemClass() == null) {
                    throw new mad.Exception('The associated itemClass can not be null');
                }
                if (!(item instanceof this.getItemClass())) {
                    throw new mad.error.WrongParameter('item', this.getItemClass().fullName);
                }
                this.view.refreshItem(item);
            },
            reset: function () {
                this.options.items.splice(0);
                this.view.reset();
            },
            load: function (items) {
                if (typeof items == undefined || items == null) {
                    return;
                } else if (items instanceof can.Model.List) {
                    var itemsList = items;
                    items = [];
                    itemsList.each(function (item) {
                        items.push(item);
                    });
                }
                for (var i in items) {
                    this.insertItem(items[i]);
                }
            },
            getItemClass: function () {
                return this.options.itemClass;
            },
            setItemClass: function (itemClass) {
                this.options.itemClass = itemClass;
            },
            getMap: function () {
                return this.options.map;
            },
            setMap: function (map) {
                this.options.map = map;
            },
            selectItem: function (item) {
                this.view.selectItem(item);
            },
            rightSelectItem: function (item) {
                this.view.rightSelectItem(item);
            },
            unselectItem: function (item) {
                this.view.unselectAll();
            },
            hoverItem: function (item) {
                this.view.hoverItem(item);
            },
            unselectAll: function () {
                this.view.unselectAll();
            },
            ' item_selected': function (el, ev, item, srcEv) {
                this.selectItem(item);
                if (this.options.callbacks.itemSelected) {
                    this.options.callbacks.itemSelected(el, ev, item, srcEv);
                }
            },
            ' item_right_selected': function (el, ev, item, srcEv) {
                this.rightSelectItem(item);
                if (this.options.callbacks.itemRightSelected) {
                    this.options.callbacks.itemRightSelected(el, ev, item, srcEv);
                }
            },
            ' item_hovered': function (el, ev, item, srcEv) {
                this.hoverItem(item);
                if (this.options.callbacks.itemHovered) {
                    this.options.callbacks.itemHovered(el, ev, item, srcEv);
                }
            }
        });
    var $__default = Tree;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/model/action*/
define('mad/model/action', [
    'mad/model/model',
    'mad/model/state'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Action = mad.model.Action = mad.Model.extend('mad.model.Action', {
            attributes: {
                'id': 'string',
                'label': 'string',
                'name': 'string',
                'icon': 'string',
                'action': 'function',
                'cssClasses': 'array',
                'initial_state': 'string',
                'state': mad.model.State.model,
                'active': 'boolean'
            }
        }, {
            init: function () {
                if (typeof this.initial_state == 'undefined') {
                    this.initial_state = 'ready';
                }
                this.state = new mad.model.State();
                this.state.setState(this.initial_state);
                if (typeof this.cssClasses == 'undefined' || this.cssClasses == null) {
                    this.cssClasses = [];
                }
            },
            getAction: function () {
                return typeof this.action != 'undefined' ? this.action : null;
            }
        });
    var $__default = Action;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/menu/menu_item.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/menu/menu_item.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_menu_menu_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a href="#"><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/menu*/
define('mad/component/menu', [
    'mad/component/component',
    'mad/component/tree',
    'mad/util/map/map',
    'mad/model/action',
    'mad/view/template/component/menu/menu_item.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var Menu = mad.component.Menu = mad.component.Tree.extend('mad.component.Menu', {
            defaults: {
                label: 'Menu',
                cssClasses: ['menu'],
                viewClass: mad.view.component.Tree,
                itemTemplateUri: 'mad/view/template/component/menu/menu_item.ejs',
                itemClass: mad.model.Action,
                map: new mad.Map({
                    id: 'id',
                    label: 'label',
                    cssClasses: {
                        key: 'cssClasses',
                        func: function (value, map, item, mappedValues) {
                            var mappedValue = $.merge([], value);
                            if (typeof item.state != 'undefined') {
                                mappedValue = $.merge(mappedValue, item.state.current);
                            }
                            return mappedValue.join(' ');
                        }
                    },
                    children: {
                        key: 'children',
                        func: mad.Map.mapObjects
                    }
                })
            }
        }, {
            setItemState: function (id, stateName) {
                for (var i in this.options.items) {
                    if (this.options.items[i].id == id) {
                        this.options.items[i].state.setState(stateName);
                        this.refreshItem(this.options.items[i]);
                        return;
                    }
                }
                throw mad.Exception.get('The item [%0] is not an item of the menu', [id]);
            },
            ' item_selected': function (el, ev, item) {
                this._super(el, ev, item);
                var action = item.getAction();
                if (action && !item.state.is('disabled')) {
                    action(this);
                }
            }
        });
    var $__default = Menu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/tab*/
define('mad/view/component/tab', [], function () {
    'use strict';
    var Tab = mad.view.component.Tab = mad.View.extend('mad.view.component.Tab', {}, {
            selectTab: function (tabId) {
                this.getController().getComponent(tabId).view.addClass('selected');
                $('#js_tab_nav_' + tabId, this.element).find('a').addClass('selected');
            },
            unselectTab: function (tabId) {
                this.getController().getComponent(tabId).view.removeClass('selected');
                $('#js_tab_nav_' + tabId, this.element).find('a').removeClass('selected');
            }
        });
    var $__default = Tab;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/tab/tab.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/tab/tab.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_tab_tab_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (autoMenu) {
                        ___v1ew.push('\n<ul class="js_tabs_nav tabs-nav">\n</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<div class="js_tabs_content tabs-content">\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/tab*/
define('mad/component/tab', [
    'mad/component/composite',
    'mad/component/menu',
    'mad/view/component/tab',
    'mad/view/template/component/tab/tab.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var Tab = mad.component.Tab = mad.component.Composite.extend('mad.component.Tab', {
            defaults: {
                label: 'Tab Controller',
                viewClass: mad.view.component.Tab,
                templateUri: 'mad/view/template/component/tab/tab.ejs',
                autoMenu: true
            }
        }, {
            init: function (el, opts) {
                this.enabledId = null;
                this._super(el, opts);
                this.setViewData('autoMenu', this.options.autoMenu);
            },
            afterStart: function () {
                if (this.options.autoMenu) {
                    this.options.menu = new mad.component.Menu($('.js_tabs_nav', this.element));
                    this.options.menu.start();
                }
                this.on();
            },
            '{menu.element} item_selected': function (el, ev, item) {
                if (this.options.autoMenu) {
                    var tabId = item.id.replace('js_tab_nav_', '');
                    this.enableTab(tabId);
                }
            },
            enableTab: function (tabId) {
                if (this.enabledTabId) {
                    this.getComponent(this.enabledTabId).setState('hidden');
                    this.view.unselectTab(this.enabledTabId);
                }
                this.enabledTabId = tabId;
                var tab = this.getComponent(this.enabledTabId);
                if (tab.state.is(null)) {
                    tab.start();
                } else if (tab.state.is('hidden')) {
                    tab.setState('ready');
                }
                this.view.selectTab(this.enabledTabId);
            },
            addComponent: function (Class, options) {
                var defaultTabCss = ['tab-content'];
                if (typeof options.id != 'undefined') {
                    options.id = options.id;
                } else {
                    options.id = uuid();
                }
                if (this.options.autoMenu) {
                    var menuEntry = new mad.model.Action({
                            'id': 'js_tab_nav_' + options.id,
                            'label': options.label
                        });
                    this.options.menu.insertItem(menuEntry);
                }
                if ($.isArray(options.cssClasses)) {
                    $.merge(options.cssClasses, defaultTabCss);
                } else {
                    options.cssClasses = defaultTabCss;
                }
                var component = mad.helper.Component.create($('.js_tabs_content', this.element), 'last', Class, options);
                return this._super(component);
            }
        });
    var $__default = Tab;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/settings_menu*/
define('app/component/settings_menu', ['mad/component/menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var SettingsMenu = passbolt.component.SettingsMenu = mad.component.Menu.extend('passbolt.component.SettingsMenu', { defaults: { menuItems: null } }, {
            afterStart: function () {
                this.load(this.options.menuItems);
            }
        });
    var $__default = SettingsMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/settings_workspace_menu.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/settings_workspace_menu.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_settings_workspace_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n\t<a id="js_settings_wk_menu_edition_button" href="#" class="button">\n\t\t<i class="icon edit"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('edit');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/settings_workspace_menu*/
define('app/component/settings_workspace_menu', [
    'mad/component/component',
    'app/view/template/component/settings_workspace_menu.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var SettingsWorkspaceMenu = passbolt.component.SettingsWorkspaceMenu = mad.Component.extend('passbolt.component.SettingsWorkspaceMenu', {
            defaults: {
                'label': 'Settings Workspace Menu',
                'templateUri': 'app/view/template/component/settings_workspace_menu.ejs'
            }
        }, {
            afterStart: function () {
                this.options.editionButton = new mad.component.Button($('#js_settings_wk_menu_edition_button')).start();
                this.on();
            },
            '{editionButton.element} click': function (el, ev) {
                mad.bus.trigger('request_profile_edition');
            }
        });
    var $__default = SettingsWorkspaceMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/breadcrumb/breadcrumb.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/breadcrumb/breadcrumb.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_breadcrumb_breadcrumb_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul>\n</ul>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/breadcrumb/breadcrumb_item.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/breadcrumb/breadcrumb_item.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_breadcrumb_breadcrumb_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                if (typeof cssClasses == 'undefined') {
                    cssClasses = '';
                }
                ;
                ;
                ___v1ew.push('\n<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="main-cell">\n        <a href="#"><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/breadcrumb/settings_breadcrumb*/
define('app/component/breadcrumb/settings_breadcrumb', [
    'mad/component/component',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var SettingsBreadcrumb = passbolt.component.SettingsBreadcrumb = mad.Component.extend('passbolt.component.SettingsBreadcrumb', {
            defaults: {
                templateUri: 'app/view/template/component/breadcrumb/breadcrumb.ejs',
                status: 'hidden',
                filter: null
            }
        }, {
            afterStart: function () {
                var menuSelector = '#' + this.getId() + ' ul';
                this.options.menu = new mad.component.Menu(menuSelector, { 'itemTemplateUri': 'app/view/template/component/breadcrumb/breadcrumb_item.ejs' });
                this.options.menu.start();
                this.menuItems = [];
                this.sectionMenuItems = [];
                var menuItem = new mad.model.Action({
                        'id': uuid(),
                        'label': __('All users'),
                        'action': function () {
                            var filter = new passbolt.model.Filter({
                                    'label': __('All users'),
                                    'type': passbolt.model.Filter.SHORTCUT
                                });
                            mad.bus.trigger('workspace_selected', 'people');
                            mad.bus.trigger('filter_users_browser', filter);
                        }
                    });
                this.menuItems.push(menuItem);
                var menuItem = new mad.model.Action({
                        'id': uuid(),
                        'label': passbolt.model.User.getCurrent().Profile.first_name + ' ' + passbolt.model.User.getCurrent().Profile.last_name,
                        'action': function () {
                            mad.bus.trigger('request_settings_section', 'profile');
                        }
                    });
                this.menuItems.push(menuItem);
                this.sectionMenuItems['profile'] = [new mad.model.Action({
                        'id': uuid(),
                        'label': __('Profile'),
                        'action': function () {
                            return;
                        }
                    })];
                this.sectionMenuItems['keys'] = [new mad.model.Action({
                        'id': uuid(),
                        'label': __('Keys management'),
                        'action': function () {
                            return;
                        }
                    })];
            },
            load: function () {
            },
            destroy: function () {
                $('#' + this.getId() + ' ul').empty();
                this._super();
            },
            refreshMenuItems: function (section) {
                var menuItems = this.sectionMenuItems[section] !== undefined ? $.merge($.merge([], this.menuItems), this.sectionMenuItems[section]) : this.menuItems;
                this.options.menu.reset();
                this.options.menu.load(menuItems);
            },
            '{mad.bus} request_settings_section': function (el, ev, section) {
                if (!this.element)
                    return;
                this.refreshMenuItems(section);
            }
        });
    var $__default = SettingsBreadcrumb;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/profile.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/profile.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_profile_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="grid grid-responsive-12">\n\t<div class="row">\n\t\t<div class="profile col8">\n\t\t\t<h3>');
                ___v1ew.push(can.view.txt(1, 'h3', 0, this, function () {
                    return __('Profile');
                }));
                ___v1ew.push('</h3>\n\t\t\t<div class="section profile-detailed-information">\n\t\t\t\t<div class="avatar">\n\t\t\t\t\t<div class="value">\n\t\t\t\t\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user.Profile.avatarPath('medium'));
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="profile picture" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="edit">\n\t\t\t\t\t\t<a class="edit-avatar-action" href="#" title="');
                ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                    return __('Change Avatar');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t\t\t\t\t\t<i class="icon camera"></i>\n\t\t\t\t\t\t\t<span class="help-text">Click here to upload a new picture.</span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<table class="table-info">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Name');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Email');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Role');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Role.name;
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Modified');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return moment(new Date(user.Profile.modified)).fromNow();
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Created');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return moment(new Date(user.Profile.created)).fromNow();
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Public key');
                }));
                ___v1ew.push('</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return user.Gpgkey.key_id;
                }));
                ___v1ew.push('\n\t\t\t\t\t\t\t<p><em>Note: Sorry it is not possible to change your key at the moment. <a href="#">learn more \u203A</a></em></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<!--<tr>-->\n\t\t\t\t\t<!--<td>');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return __('Groups');
                }));
                ___v1ew.push('</span>-->\n\t\t\t\t\t<!--<div class="value">-->\n\t\t\t\t\t<!--<ul id="js_wk_preference_profile_groups"></ul>-->\n\t\t\t\t\t<!--</div>-->\n\t\t\t\t\t<!--</tr>-->\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/profile*/
define('app/component/profile', [
    'mad/component/component',
    'app/view/template/component/profile.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Profile = passbolt.component.Profile = mad.Component.extend('passbolt.component.Profile', {
            defaults: {
                user: null,
                templateUri: 'app/view/template/component/profile.ejs'
            }
        }, {
            'beforeRender': function () {
                this._super();
                this.setViewData('user', this.options.user);
            },
            '{user} updated': function (user) {
                if (!this.state.is('disabled') && !this.state.is(null)) {
                    this.refresh();
                }
            },
            '.edit-action click': function (el, ev) {
                mad.bus.trigger('request_profile_edition', this.options.user);
            },
            '.edit-password-action click': function (el, ev) {
                mad.bus.trigger('request_user_password_edition', this.options.user);
            },
            '.edit-avatar-action click': function (el, ev) {
                mad.bus.trigger('request_profile_avatar_edition', this.options.user);
            }
        });
    var $__default = Profile;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/image_storage*/
define('app/model/image_storage', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var ImageStorage = passbolt.model.ImageStorage = mad.Model.extend('passbolt.model.ImageStorage', {}, {
            imagePath: function (version) {
                if (typeof this.url == 'undefined') {
                    return '';
                }
                if (typeof this.url[version] == 'undefined') {
                    return '';
                } else {
                    return this.url[version];
                }
            }
        });
    var $__default = ImageStorage;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/profile*/
define('app/model/profile', [
    'mad/model/model',
    'app/model/image_storage',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Profile = passbolt.model.Profile = mad.Model.extend('passbolt.model.Profile', {
            validateRules: {},
            attributes: {
                id: 'string',
                first_name: 'string',
                last_name: 'string',
                Avatar: 'passbolt.model.ImageStorage.model'
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + '/profiles',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {
            avatarPath: function (version) {
                if (typeof this.Avatar != 'undefined' && this.Avatar.url != undefined) {
                    return this.Avatar.imagePath(version);
                } else {
                    return 'img/avatar/user.png';
                }
            },
            fullName: function () {
                return this.first_name + ' ' + this.last_name;
            }
        });
    var $__default = Profile;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/user*/
define('app/model/user', [
    'mad/model/model',
    'app/model/profile',
    'app/model/image_storage',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var User = passbolt.model.User = mad.Model.extend('passbolt.model.User', {
            current: null,
            validateRules: {
                username: [
                    'email',
                    'required'
                ]
            },
            attributes: {
                id: 'string',
                username: 'string',
                email: 'string',
                role_id: 'string',
                active: 'string',
                Profile: 'passbolt.model.Profile.model',
                GroupUser: 'passbolt.model.GroupUser.models'
            },
            getCurrent: function () {
                return passbolt.model.User.current;
            },
            setCurrent: function (user) {
                passbolt.model.User.current = user;
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'users',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + '/users/{id}',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                if (typeof params.filter != 'undefined') {
                    var filter = params.filter;
                    delete params.filter;
                    var formattedFilter = filter.toRequest();
                    $.extend(params, formattedFilter);
                }
                return mad.net.Ajax.request({
                    url: APP_URL + '/users',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                var async = true;
                if (typeof params['async'] != 'undefined') {
                    async = params['async'];
                }
                return mad.net.Ajax.request({
                    url: APP_URL + 'users/{id}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error,
                    async: async
                });
            },
            update: function (id, attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = id;
                return mad.net.Ajax.request({
                    url: APP_URL + 'users/{id}',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            updatePassword: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = attrs['id'];
                return mad.net.Ajax.request({
                    url: APP_URL + 'users/password/{id}',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            updateAvatar: function (attrs, success, error) {
                var self = this;
                var params = new FormData();
                params.append('file-0', attrs.newAvatar);
                params.id = attrs['id'];
                return mad.net.Ajax.request({
                    url: APP_URL + 'users/avatar/{id}',
                    type: 'POST',
                    cache: false,
                    contentType: false,
                    processData: false,
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            }
        }, {
            saveAvatar: function (file) {
                this.attr('newAvatar', file);
                var def = can.Model._makeRequest(this, 'updateAvatar', null, null, 'updated');
                this.attr('newAvatar', null);
                return def;
            },
            savePassword: function () {
                return can.Model._makeRequest(this, 'updatePassword', null, null, 'updated');
            }
        });
    var $__default = User;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/gpgkey*/
define('app/model/gpgkey', [
    'mad/model/model',
    'app/model/user',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Gpgkey = passbolt.model.Gpgkey = mad.Model.extend('passbolt.model.Gpgkey', {
            attributes: {
                id: 'string',
                user_id: 'string',
                key: 'string',
                bits: 'string',
                uid: 'string',
                key_id: 'string',
                fingerprint: 'string',
                type: 'string',
                expires: 'string',
                key_created: 'string',
                User: 'passbolt.model.User.model'
            },
            findAll: function (params, success, error) {
                if (typeof params.filter != 'undefined') {
                    var filer = params.filter;
                    delete params.filter;
                    var formatedFilter = filer.toRequest();
                    $.extend(params, formatedFilter);
                }
                return mad.net.Ajax.request({
                    url: APP_URL + 'gpgkeys.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'gpgkeys/{id}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {});
    var $__default = Gpgkey;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/keys.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/keys.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_keys_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="grid grid-responsive-12">\n\t<div class="row">\n\t\t<div class="col6 key-info">\n\t\t\t<h3>Information for public and secret key</h3>\n\t\t\t<table class="table-info" id="privkeyinfo">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Key Id</td>\n\t\t\t\t\t<td class="keyId">\n\t\t\t\t\t\t<div class="input select tooltip-top"\n\t\t\t\t\t\t\t data-tooltip="sorry you can only have one key set at the moment">\n\t\t\t\t\t\t\t<select name="data[Key][0]" id="KeyId" disabled="disabled" class="">\n\t\t\t\t\t\t\t\t<option value="');
                ___v1ew.push(can.view.txt(true, 'option', 'value', this, function () {
                    return gpgkey.key_id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'option', 0, this, function () {
                    return gpgkey.key_id;
                }));
                ___v1ew.push('</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Uid</td>\n\t\t\t\t\t<td class="uid">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.uid;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Fingerprint</td>\n\t\t\t\t\t<td class="fingerprint">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.fingerprint;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Created</td>\n\t\t\t\t\t<td class="created">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.key_created;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Expires</td>\n\t\t\t\t\t<td class="expires">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.expires;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Key Length</td>\n\t\t\t\t\t<td class="length">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.bits;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Algorithm</td>\n\t\t\t\t\t<td class="algorithm">');
                ___v1ew.push(can.view.txt(1, 'td', 0, this, function () {
                    return gpgkey.type;
                }));
                ___v1ew.push('</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>\n\t\t<div class="col6 last key-export">\n\t\t\t<ul class="actions duo-wrapper">\n\t\t\t\t<li>\n\t\t\t\t\t<a href="#publicKey" class="button selected toggle duo">public</a>\n\t\t\t\t\t<a href="#privateKey" class="button toggle duo">private</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a id="js_settings_keys_download" href="#" class="button">\n\t\t\t\t\t\t<i class="icon download"></i>\n\t\t\t\t\t\t<span>download</span>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div class="input textarea gpgkey" rel="publicKey">\n\t\t\t\t<textarea id="publicKeyUnarmored" class="fluid code" placeholder="" name="data[Gpgkey][key]"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'textarea', 0, this, function () {
                    return gpgkey.key;
                }));
                ___v1ew.push('</textarea>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/keys*/
define('app/component/keys', [
    'mad/component/component',
    'app/model/gpgkey',
    'app/view/template/component/keys.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Keys = passbolt.component.Keys = mad.Component.extend('passbolt.component.Keys', { defaults: { templateUri: 'app/view/template/component/keys.ejs' } }, {
            afterStart: function () {
                var self = this;
                this._super();
            },
            beforeRender: function () {
                var self = this;
                this._super();
                self.setViewData('gpgkey', passbolt.model.User.getCurrent().Gpgkey);
            },
            '#js_settings_keys_download click': function (el, ev) {
                mad.bus.trigger('passbolt.settings.backup_key');
            }
        });
    var $__default = Keys;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/form/element*/
define('mad/view/form/element', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    mad.view.form = mad.view.form || {};
    var Element = mad.view.form.Element = mad.View.extend('mad.view.form.Element', {}, {
            getName: function () {
                return this.element.attr('name');
            },
            setValue: function (value) {
            },
            reset: function () {
            }
        });
    var $__default = Element;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/element*/
define('mad/form/element', [
    'mad/component/component',
    'mad/view/form/element'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    mad.form = mad.form || {};
    var Element = mad.form.Element = mad.Component.extend('mad.form.Element', {
            defaults: {
                label: 'Form Element Component',
                cssClasses: ['form-element'],
                tag: null,
                templateUri: null,
                templateBased: false,
                viewClass: mad.view.form.Element,
                modelReference: null,
                validate: true,
                validateFunction: null,
                defaultValue: null,
                value: null,
                callbacks: {
                    changed: function (el, ev, value) {
                    }
                }
            }
        }, {
            init: function (el, options) {
                this.defaultValue = options.value;
                this.value = options.value;
                this._super(el, options);
            },
            getModelReference: function () {
                return this.options.modelReference;
            },
            getValidateFunction: function () {
                return this.options.validateFunction;
            },
            requireValidation: function () {
                return this.options.validate;
            },
            setModelReference: function (modelReference) {
                this.options.modelReference = modelReference;
            },
            getValue: function () {
                return this.value;
            },
            reset: function () {
                this.setState('reset');
                this.setValue(this.options.value);
                this.setState('ready');
            },
            setValue: function (value) {
                this.value = value;
                this.view.setValue(this.value);
                return this;
            },
            afterStart: function () {
                this.setValue(this.options.value);
            },
            stateReset: function (go) {
                this.setState('ready');
            },
            stateReady: function (go) {
            },
            stateError: function (go) {
            },
            stateDisabled: function (go) {
                if (go) {
                    this.element.attr('disabled', 'disabled').addClass('disabled');
                } else {
                    this.element.removeAttr('disabled').removeClass('disabled');
                }
            },
            ' changed': function (el, ev, data) {
                this.value = data.value;
                if (this.options.callbacks.changed) {
                    this.options.callbacks.changed(this.value);
                }
            }
        });
    var $__default = Element;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/feedback*/
define('mad/form/feedback', ['mad/component/component'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    mad.form = mad.form || {};
    var Feedback = mad.form.Feedback = mad.Component.extend('mad.form.Feedback', {
            defaults: {
                label: 'Form Feedback Component',
                templateBased: false,
                message: null
            }
        }, {
            setMessage: function (message) {
                this.message = message;
                return this;
            },
            stateSuccess: function (go) {
                if (go) {
                    this.element.html(this.message);
                    this.element.removeClass('error');
                }
            },
            stateError: function (go) {
                if (go) {
                    this.element.html(this.message);
                    this.element.addClass('error');
                }
            }
        });
    return {};
});
/*mad/view/form/form*/
define('mad/view/form/form', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    mad.view.form = mad.view.form || {};
    var Form = mad.view.Form = mad.View.extend('mad.view.Form', {}, {
            setElementState: function (element, state) {
                var eltId = element.getId(), $label = $('label[for="' + eltId + '"]'), $wrapper = element.element.parent('.js_form_element_wrapper');
                switch (state) {
                case 'success':
                    if ($label) {
                        $label.removeClass('error');
                    }
                    if ($wrapper) {
                        $wrapper.removeClass('error');
                    }
                    break;
                case 'error':
                    if ($label) {
                        $label.addClass('error');
                    }
                    if ($wrapper) {
                        $wrapper.addClass('error');
                    }
                    break;
                }
            }
        });
    var $__default = Form;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/form*/
define('mad/form/form', [
    'mad/component/component',
    'mad/form/element',
    'mad/form/feedback',
    'mad/view/form/form'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    mad.form = mad.form || {};
    var Form = mad.Form = mad.Component.extend('mad.Form', {
            defaults: {
                label: 'Form Component',
                cssClasses: ['form'],
                tag: 'form',
                templateUri: null,
                templateBased: false,
                viewClass: mad.view.Form,
                callbacks: {
                    error: null,
                    submit: null
                },
                action: null,
                validateOnChange: 'afterFirstValidation'
            }
        }, {
            init: function (el, options) {
                this.elements = {};
                this.feedbackElements = {};
                this.data = {};
                this.validations = 0;
                this._super(el, options);
            },
            beforeRender: function () {
                this.setViewData('action', this.options.action);
            },
            reset: function () {
                for (var eltId in this.elements) {
                    this.elements[eltId].setValue(this.options.defaultValue);
                }
            },
            load: function (data) {
                for (var eltId in this.elements) {
                    var element = this.getElement(eltId), eltModelRef = element.getModelReference(), value = null;
                    if (eltModelRef != null) {
                        if (!(data instanceof mad.Model)) {
                            throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'data');
                        }
                        value = mad.Model.getModelAttributeValue(eltModelRef, data);
                    } else {
                        value = data[eltId];
                    }
                    if (typeof value !== 'undefined') {
                        element.setValue(value);
                    }
                }
            },
            getElement: function (eltId) {
                return this.elements[eltId];
            },
            addElement: function (element, feedback) {
                if (!(element instanceof mad.form.Element)) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'element');
                }
                var modelReference = element.getModelReference();
                if (modelReference != null) {
                    var modelPresentInForm = false, modelAttr = mad.Model.getModelAttributes(modelReference), modelName = modelAttr[modelAttr.length - 2].name;
                    for (var eltId in this.elements) {
                        var eltModelRef = this.elements[eltId].getModelReference();
                        if (eltModelRef != null) {
                            var eltModelAttr = mad.Model.getModelAttributes(eltModelRef), eltModelName = modelAttr[eltModelAttr.length - 2].name;
                            if (modelName == eltModelName) {
                                modelPresentInForm = true;
                                break;
                            }
                        }
                    }
                    if (!modelPresentInForm) {
                        var model = can.getObject(modelName);
                        if (model !== undefined) {
                            model.getValidationRules(this.options.action);
                        }
                    }
                }
                var eltId = element.getId();
                this.elements[eltId] = element;
                if (typeof feedback != 'undefined') {
                    this.feedbackElements[eltId] = feedback;
                }
                return element;
            },
            removeElement: function (element) {
                if (!(element instanceof mad.form.Element) || element == null) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'element');
                }
                var eltId = element.getId(), element = this.getElement(eltId);
                if (element == undefined) {
                    throw mad.Exception.get(mad.error.ELEMENT_NOT_FOUND, eltId);
                }
                delete this.elements[eltId];
                delete this.feedbackElements[eltId];
            },
            getData: function () {
                var returnValue = {};
                for (var eltId in this.elements) {
                    var element = this.getElement(eltId), eltModelRef = element.getModelReference(), eltValue = element.getValue();
                    if (eltModelRef == null || eltModelRef == undefined) {
                        returnValue[eltId] = eltValue;
                    } else {
                        var fieldAttrs = mad.Model.getModelAttributes(eltModelRef), pointer = returnValue;
                        for (var i = 0; i < fieldAttrs.length; i++) {
                            var eltSubModelRef = fieldAttrs[i].getModelReference();
                            if (eltSubModelRef == null || eltModelRef == undefined) {
                                if (fieldAttrs[i - 1].isMultiple()) {
                                    if (eltValue != null) {
                                        can.each(eltValue, function (val, prop) {
                                            var obj = {};
                                            obj[fieldAttrs[i].getName()] = val;
                                            pointer.push(obj);
                                        });
                                    }
                                } else {
                                    pointer[fieldAttrs[i].getName()] = eltValue;
                                }
                                break;
                            } else {
                                if (pointer[fieldAttrs[i].getName()] == undefined) {
                                    pointer[fieldAttrs[i].getName()] = [];
                                }
                                pointer = pointer[fieldAttrs[i].getName()];
                            }
                        }
                    }
                }
                return returnValue;
            },
            showErrors: function (errors) {
                for (var i in this.elements) {
                    var element = this.elements[i];
                    var eltModelRef = element.getModelReference();
                    if (eltModelRef) {
                        var fieldAttrs = mad.Model.getModelAttributes(eltModelRef), modelFullName = fieldAttrs[fieldAttrs.length - 2].name, attrName = fieldAttrs[fieldAttrs.length - 1].name, modelName = modelFullName.substr(modelFullName.lastIndexOf('.') + 1), eltId = element.getId();
                        for (var j in errors) {
                            if (errors[j][modelName] != undefined && errors[j][modelName][attrName] != undefined) {
                                var error = errors[j][modelName][attrName][0];
                                var eltStates = ['error'];
                                if (element.state.is('hidden')) {
                                    eltStates.push('hidden');
                                }
                                element.setState(eltStates);
                                if (this.feedbackElements[eltId]) {
                                    this.feedbackElements[eltId].setMessage(error).setState('error');
                                }
                                this.view.setElementState(this.elements[eltId], 'error');
                            }
                        }
                    }
                }
            },
            validateElement: function (element) {
                var returnValue = true, eltModelRef = element.getModelReference(), validationResult = [], eltId = element.getId();
                if (element.requireValidation()) {
                    var value = element.getValue(), validateFunction = element.getValidateFunction();
                    if (validateFunction != null) {
                        var validateFuncResult = validateFunction(value, {});
                        if (validateFuncResult !== true) {
                            validationResult.push(validateFuncResult);
                        }
                    } else if (eltModelRef != null) {
                        var fieldAttrs = mad.Model.getModelAttributes(eltModelRef), model = fieldAttrs[fieldAttrs.length - 2].getModelReference(), attrName = _.last(fieldAttrs).getName();
                        if (model.validateAttribute) {
                            validationResult = model.validateAttribute(attrName, value, {}, this.options.action);
                        }
                    }
                    if (validationResult.length > 0) {
                        var eltStates = ['error'];
                        if (this.elements[eltId].state.is('hidden')) {
                            eltStates.push('hidden');
                        }
                        this.elements[eltId].setState(eltStates);
                        if (this.feedbackElements[eltId]) {
                            this.feedbackElements[eltId].setMessage(validationResult[0]).setState([]).setState('error');
                        }
                        this.view.setElementState(this.elements[eltId], 'error');
                        returnValue = false;
                    } else {
                        var eltStates = ['success'];
                        if (this.elements[eltId].state.is('hidden')) {
                            eltStates.push('hidden');
                        }
                        this.elements[eltId].setState(eltStates);
                        if (this.feedbackElements[eltId]) {
                            this.feedbackElements[eltId].setMessage('').setState('success');
                        }
                        this.view.setElementState(this.elements[eltId], 'success');
                    }
                }
                return returnValue;
            },
            validate: function () {
                var returnValue = true;
                for (var i in this.elements) {
                    returnValue &= this.validateElement(this.elements[i]);
                }
                this.validations++;
                return returnValue;
            },
            ' submit': function (el, ev) {
                ev.preventDefault();
                if (this.validate()) {
                    if (this.options.callbacks.submit) {
                        this.options.callbacks.submit(this.getData());
                    }
                } else {
                    if (this.options.callbacks.error) {
                        this.options.callbacks.error();
                    }
                }
            },
            ' changed': function (el, ev, data) {
                var validateOnChange = this.options.validateOnChange === true || this.options.validateOnChange === 'afterFirstValidation' && this.validations > 0;
                if (validateOnChange) {
                    var formElement = this.getElement(ev.target.id);
                    if (formElement) {
                        this.validateElement(formElement);
                    } else {
                        throw mad.Exception.get('No form element found.');
                    }
                }
            }
        });
    var $__default = Form;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/form/element/textbox*/
define('mad/view/form/element/textbox', ['mad/view/form/element'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Textbox = mad.view.form.Textbox = mad.view.form.Element.extend('mad.view.form.Textbox', {}, {
            _changeTimeout: null,
            getValue: function () {
                return this.element.val();
            },
            setValue: function (value) {
                this.element.val(value);
            },
            ' input': function (el, ev) {
                var self = this;
                var newValue = this.getValue();
                if (newValue.length >= this.getController().options.onChangeAfterLength) {
                    if (this._changeTimeout != null) {
                        clearTimeout(this._changeTimeout);
                    }
                    this._changeTimeout = setTimeout(function () {
                        self.element.trigger('changed', { value: self.getValue() });
                    }, this.getController().options.onChangeTimeout);
                }
            }
        });
    var $__default = Textbox;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/element/textbox*/
define('mad/form/element/textbox', [
    'mad/form/element',
    'mad/view/form/element/textbox'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Textbox = mad.form.Textbox = mad.form.Element.extend('mad.form.Textbox', {
            defaults: {
                label: 'Textbox Form Element',
                tag: 'input',
                viewClass: mad.view.form.Textbox,
                onChangeTimeout: 0,
                onChangeAfterLength: 0
            }
        }, {});
    var $__default = Textbox;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/secret_strength*/
define('app/model/secret_strength', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var STRENGTH = {
            VERY_WEAK: {
                start: 0,
                id: 'very_weak',
                label: __('very weak')
            },
            WEAK: {
                start: 60,
                id: 'weak',
                label: __('weak')
            },
            FAIR: {
                start: 80,
                id: 'fair',
                label: __('fair')
            },
            STRONG: {
                start: 112,
                id: 'strong',
                label: __('strong')
            },
            VERY_STRONG: {
                start: 128,
                id: 'very_strong',
                label: __('very strong')
            }
        };
    var SecretStrength = passbolt.model.SecretStrength = mad.Model.extend('passbolt.model.SecretStrength', {
            attributes: {
                id: 'string',
                label: 'string',
                start: 'int'
            },
            getSecretStrength: function (pwd) {
                var returnValue = null;
                if (!pwd) {
                    return returnValue;
                }
                var entropy = passbolt.model.SecretStrength.mesurePwdEntropy(pwd);
                for (var level in STRENGTH) {
                    if (entropy >= STRENGTH[level].start) {
                        returnValue = new passbolt.model.SecretStrength(STRENGTH[level]);
                    } else {
                        break;
                    }
                }
                return returnValue;
            },
            mesureEntropy: function (length, maskSize) {
                return length * (Math.log(maskSize) / Math.log(2));
            },
            mesurePwdEntropy: function (pwd) {
                var maskSize = 0;
                for (var i in passbolt.model.Secret.MASKS) {
                    if (pwd.match(passbolt.model.Secret.MASKS[i].pattern)) {
                        maskSize += passbolt.model.Secret.MASKS[i].size;
                    }
                }
                return passbolt.model.SecretStrength.mesureEntropy(pwd.length, maskSize);
            }
        }, {});
    var $__default = SecretStrength;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/secret*/
define('app/model/secret', [
    'mad/model/model',
    'mad/model/serializer/cake_serializer',
    'app/model/secret_strength'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Secret = passbolt.model.Secret = mad.Model.extend('passbolt.model.Secret', {
            attributes: {
                'id': 'string',
                'data': 'string'
            },
            MASKS: {
                'alpha': {
                    size: 26,
                    data: 'abcdefghijklmnopqrstuvwxyz',
                    pattern: /[a-z]/
                },
                'uppercase': {
                    size: 26,
                    data: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                    pattern: /[A-Z]/
                },
                'digit': {
                    size: 10,
                    data: '0123456789',
                    pattern: /[0-9]/
                },
                'special': {
                    size: 32,
                    data: '!"#$%&\'()*+,-./:;<=>?@[:]^_`{|}~',
                    pattern: /[!"#$%&\'\(\)*+,\-./:;<=>?@\[\]^_`{|}~]/
                }
            },
            generate: function () {
                var secret = '', secretMasks = mad.Config.read('secret.generator.masks'), secretLength = mad.Config.read('secret.generator.length'), mask = [], expectedEntropy;
                for (var i in secretMasks) {
                    mask = $.merge(mask, passbolt.model.Secret.MASKS[secretMasks[i]].data);
                }
                var j = 0;
                do {
                    secret = '';
                    expectedEntropy = passbolt.model.SecretStrength.mesureEntropy(secretLength, mask.length);
                    for (var i = 0; i < secretLength; i++) {
                        secret += mask[Math.randomRange(0, mask.length - 1)];
                    }
                } while (expectedEntropy != passbolt.model.SecretStrength.mesurePwdEntropy(secret) && j < 10);
                return secret;
            }
        }, {});
    return {};
});
/*app/view/template/component/secret/secret_strength.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/secret/secret_strength.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_secret_secret_strength_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<span class="progress"><span class="progress-bar ');
                ___v1ew.push(can.view.txt(true, 'span', 'class', this, function () {
                    return strengthId;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</span></span>\n<span class="complexity-text">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('complexity');
                }));
                ___v1ew.push(': <strong>');
                ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                    return strengthLabel;
                }));
                ___v1ew.push('</strong></span>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/secret_strength*/
define('app/component/secret_strength', [
    'mad/component/component',
    'app/model/secret',
    'app/model/secret_strength',
    'app/view/template/component/secret/secret_strength.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var SecretStrength = passbolt.component.SecretStrength = mad.Component.extend('passbolt.component.SecretStrength', {
            defaults: {
                label: 'Secret Strength Controller',
                templateBased: true,
                templateUri: 'app/view/template/component/secret/secret_strength.ejs',
                secretStrength: null
            }
        }, {
            beforeRender: function () {
                this._super();
                var strengthLabel = '', strengthId = '';
                if (this.options.secretStrength) {
                    strengthLabel = this.options.secretStrength.label;
                    strengthId = this.options.secretStrength.id;
                }
                this.setViewData('strengthLabel', strengthLabel);
                this.setViewData('strengthId', strengthId);
            },
            load: function (secretStrength) {
                this.options.secretStrength = secretStrength;
                this.refresh();
            }
        });
    var $__default = SecretStrength;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/user/create.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/user/create.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_user_create_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var role = passbolt.model.User.getCurrent().Role.name;
                ;
                ;
                ___v1ew.push('\n');
                var user = this.controller.options.data;
                ;
                ;
                ___v1ew.push('\n<div class="form-content">\n\t<input type="hidden" name="passbolt.model.User.Group.id" id="js_field_group_id" class="form_field" />\n\t<input type="hidden" name="passbolt.model.User.active" id="js_field_user_active" class="form_field" />\n\t<div class="input text required">\n\t\t<label for="js_field_first_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('First Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.Profile.first_name" class="required" maxlength="50" type="text" id="js_field_first_name" placeholder="first name"/>\n\t\t<div id="js_field_first_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="input text required">\n\t\t<label for="js_field_last_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Last Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.Profile.last_name" class="required" maxlength="50" type="text" id="js_field_last_name" placeholder="last name"/>\n\t\t<div id="js_field_last_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="input text required clearfix">\n\t\t<label for="js_field_username">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Username / Email');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.username" class="required" maxlength="50" type="text" id="js_field_username" placeholder="email"');
                ___v1ew.push(can.view.txt(0, 'input', 1, this, function () {
                    var ___v1ew = [];
                    if (action != 'create') {
                        ___v1ew.push(' disabled');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t<div id="js_field_username_feedback" class="message">\n\t\t</div>\n\t</div>\n    ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (action != 'create') {
                        ___v1ew.push('\n\t');
                        ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                            var ___v1ew = [];
                            if (role != 'admin' || role == 'admin' && user.id == passbolt.model.User.getCurrent().id) {
                                ___v1ew.push('\n\t<div class="input text input-current-password-wrapper clearfix">\n\t\t<div class="input current_password required short">\n\t\t\t<label for="js_field_current_password">');
                                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                                    return __('Current login password');
                                }));
                                ___v1ew.push('</label>\n\t\t\t<input name="passbolt.model.User.current_password" class="required" maxlength="50" type="password" id="js_field_current_password" placeholder="password"/>\n\t\t\t<input class="required" maxlength="50" type="text" id="js_field_current_password_clear" placeholder="password"/>\n\t\t</div>\n\t\t<ul class="actions inline">\n\t\t\t<li>\n\t\t\t\t<a href="#" id="js_show_curr_pwd_button" class="button toggle">\n\t\t\t\t\t<i class="icon eye big no-text"></i>\n\t\t\t\t\t<span>');
                                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                                    return __('view');
                                }));
                                ___v1ew.push('</span>\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t</ul>\n\t\t<div id="js_field_current_password_feedback" class="message"></div>\n\t</div>\n\t');
                            }
                            ;
                            return ___v1ew.join('');
                        }));
                        ___v1ew.push('\n\t<div class="input text input-password-wrapper clearfix">\n\t\t<div class="input password required short">\n\t\t\t<label for="js_field_password">');
                        ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                            return __('New login password');
                        }));
                        ___v1ew.push('</label>\n\t\t\t<input name="passbolt.model.User.password" class="required" maxlength="50" type="password" id="js_field_password" placeholder="password"/>\n\t\t\t<input class="required" maxlength="50" type="text" id="js_field_password_clear" placeholder="password"/>\n\t\t</div>\n\t\t<ul class="actions inline">\n\t\t\t<li>\n\t\t\t\t<a href="#" id="js_show_pwd_button" class="button toggle">\n\t\t\t\t\t<i class="icon eye big no-text"></i>\n\t\t\t\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('view');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href="#" id="js_gen_pwd_button" class="button">\n\t\t\t\t\t<i class="icon key big no-text"></i>\n\t\t\t\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('generate');
                        }));
                        ___v1ew.push('</span>\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t</ul>\n\t\t<div id="js_user_pwd_strength" class="password-complexity">\n\t\t</div>\n\t</div>\n\t');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n\t<div class="input text required">\n\t\t<label for="js_field_role_id">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Role');
                }));
                ___v1ew.push('</label>\n\t\t<div id="js_field_role_id">\n\t\t\t<input name="passbolt.model.User.role_id" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return cakephpConfig.roles.admin;
                }));
                ___v1ew.push('" type="checkbox" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t\t<span>This user is an administrator</span>\n\t\t</div>\n\t\t');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (action == 'create') {
                        ___v1ew.push('\n\t\t<em>Note: administrators can not see passwords as such but they can edit the password properties, like the name and description. They can also manage other users and the organization settings.</em>\n\t\t');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n\t\t<div id="js_field_role_id_feedback" class="message">\n\t\t</div>\n\t</div>\n\t');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (action == 'create') {
                        ___v1ew.push('\n\t<div class="input text required">\n\t\t<label for="js_field_last_name">');
                        ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                            return __('Password');
                        }));
                        ___v1ew.push('</label>\n\t\t<input name="passbolt.model.User.email_user" type="radio" class="required" maxlength="50" id="js_field_email_user" checked="checked"/>\n\t\t<span>Send an email to the user you have just created. It will allow them to set up their password.</span>\n\t\t<div id="js_field_email_user_feedback" class="message">\n\t\t</div>\n\t</div>\n\t');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a href="#" class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/user/create*/
define('app/form/user/create', [
    'mad/form/form',
    'mad/form/element/textbox',
    'app/component/secret_strength',
    'app/model/user',
    'app/view/template/form/user/create.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    passbolt.form.user = passbolt.form.user ? passbolt.form.user : {};
    var CreateForm = passbolt.form.user.Create = mad.Form.extend('passbolt.form.user.Create', {
            defaults: {
                templateBased: true,
                passwordField: null,
                currentPasswordField: null,
                action: 'create',
                templateUri: 'app/view/template/form/user/create.ejs'
            }
        }, {
            afterStart: function () {
                this.options.data.User = this.options.data.User || {};
                var activeField = this.addElement(new mad.form.Textbox($('#js_field_user_active'), { modelReference: 'passbolt.model.User.active' }).start());
                this.addElement(new mad.form.Textbox($('#js_field_first_name'), { modelReference: 'passbolt.model.User.Profile.first_name' }).start(), new mad.form.Feedback($('#js_field_first_name_feedback'), {}).start());
                this.addElement(new mad.form.Textbox($('#js_field_last_name'), { modelReference: 'passbolt.model.User.Profile.last_name' }).start(), new mad.form.Feedback($('#js_field_last_name_feedback'), {}).start());
                var roles = {};
                console.log(mad.config);
                roles[cakephpConfig.roles.admin] = __('This user is an administrator');
                roles[cakephpConfig.roles.user] = __('This user is a normal user');
                this.options.role = new mad.form.Checkbox($('#js_field_role_id'), {
                    name: 'role_id',
                    modelReference: 'passbolt.model.User.role_id',
                    availableValues: roles
                }).start();
                this.addElement(this.options.role, new mad.form.Feedback($('#js_field_role_id_feedback'), {}).start());
                $('input[type=checkbox]', $('#js_field_role_id')).not('[value=\'' + cakephpConfig.roles.admin + '\']').hide().next('label').hide();
                this.addElement(new mad.form.Textbox($('#js_field_username'), { modelReference: 'passbolt.model.User.username' }).start(), new mad.form.Feedback($('#js_field_username_feedback'), {}).start());
                if (this.options.action != 'create') {
                    this.options.passwordField = new mad.form.Textbox($('#js_field_password'), { modelReference: 'passbolt.model.User.password' }).start();
                    this.addElement(this.options.passwordField);
                    this.options.passwordClear = this.addElement(new mad.form.Textbox($('#js_field_password_clear'), { state: 'hidden' }).start());
                    var userRole = passbolt.model.User.getCurrent().Role.name;
                    var userId = this.options.data.id;
                    if (userRole != 'admin' || userRole == 'admin' && userId == passbolt.model.User.getCurrent().id) {
                        this.options.currentPasswordField = new mad.form.Textbox($('#js_field_current_password'), { modelReference: 'passbolt.model.User.current_password' }).start();
                        this.addElement(this.options.currentPasswordField, new mad.form.Feedback($('#js_field_current_password_feedback'), {}).start());
                        this.options.currentPasswordClear = this.addElement(new mad.form.Textbox($('#js_field_current_password_clear'), { state: 'hidden' }).start());
                        this.options.showCurrPwdButton = new mad.component.Button($('#js_show_curr_pwd_button')).start();
                    }
                    this.options.showPwdButton = new mad.component.Button($('#js_show_pwd_button')).start();
                    this.options.genPwdButton = new mad.component.Button($('#js_gen_pwd_button')).start();
                    var secret = can.getObject('data.Secret.data', this.options);
                    var secretStrength = passbolt.model.SecretStrength.getSecretStrength(secret);
                    this.options.secretStrength = new passbolt.component.SecretStrength($('#js_user_pwd_strength'), { secretStrength: secretStrength }).start();
                }
                this.on();
            },
            updateSecretEntropy: function (pwd) {
                var secretStrength = passbolt.model.SecretStrength.getSecretStrength(pwd);
                this.options.secretStrength.load(secretStrength);
            },
            '{passwordField} changed': function (el, ev) {
                if (this.options.passwordField) {
                    this.updateSecretEntropy(this.options.passwordField.getValue());
                }
            },
            '{passwordClear} changed': function (el, ev) {
                var value = this.getElement('js_field_password_clear').getValue();
                this.getElement('js_field_password').setValue(value);
                this.updateSecretEntropy(value);
            },
            '{role} checked': function (el, ev, roleId) {
                this.options.role.setValue(roleId);
            },
            '{role} changed': function (el, ev, val) {
                if (val.value.length == 0) {
                    this.options.role.setValue(cakephpConfig.roles.user);
                }
            },
            '{showPwdButton} click': function (el, ev) {
                var password = this.getElement('js_field_password');
                var passwordClear = this.getElement('js_field_password_clear');
                if (password.state.is('hidden')) {
                    passwordClear.setState('hidden');
                    password.setState('ready');
                    this.options.showPwdButton.view.removeClass('selected');
                } else {
                    password.setState('hidden');
                    passwordClear.setState('ready');
                    passwordClear.setValue(password.getValue());
                    this.options.showPwdButton.view.addClass('selected');
                }
            },
            '{showCurrPwdButton} click': function (el, ev) {
                var password = this.getElement('js_field_current_password');
                var passwordClear = this.getElement('js_field_current_password_clear');
                if (password.state.is('hidden')) {
                    passwordClear.setState('hidden');
                    password.setState('ready');
                    this.options.showCurrPwdButton.view.removeClass('selected');
                } else {
                    password.setState('hidden');
                    passwordClear.setState('ready');
                    passwordClear.setValue(password.getValue());
                    this.options.showCurrPwdButton.view.addClass('selected');
                }
            },
            '{genPwdButton} click': function (el, ev) {
                var value = passbolt.model.Secret.generate();
                this.getElement('js_field_password').setValue(value);
                this.getElement('js_field_password_clear').setValue(value);
                this.updateSecretEntropy(value);
            }
        });
    var $__default = CreateForm;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/user/avatar.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/user/avatar.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_user_avatar_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content">\n\t<div class="input text input-password-wrapper">\n\t\t<div class="input required">\n\t\t\t<label for="js_field_avatar">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Avatar');
                }));
                ___v1ew.push('</label>\n\t\t\t<input class="required" type="file" id="js_field_avatar" placeholder="select an image"/>\n\t\t</div>\n\t</div>\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a href="#" class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/user/avatar*/
define('app/form/user/avatar', [
    'mad/form/form',
    'app/view/template/form/user/avatar.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    passbolt.form.user = passbolt.form.user ? passbolt.form.user : {};
    var AvatarForm = passbolt.form.user.Avatar = mad.Form.extend('passbolt.form.user.Avatar', {
            defaults: {
                templateBased: true,
                templateUri: 'app/view/template/form/user/avatar.ejs'
            }
        }, {
            afterStart: function () {
                this.on();
            }
        });
    var $__default = AvatarForm;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/settings_workspace.ejs!lib/can/view/ejs/system*/
define('app/view/template/settings_workspace.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_settings_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_settings_workspace">\n    <div class="panel left">\n        <div class="navigation first">\n            <ul id="js_wk_settings_menu" class="clearfix">\n            </ul>\n        </div>\n    </div>\n    <div class="panel middle">\n\t\t<div id="js_wsp_settings_breadcrumb" class="breadcrumbs">\n\t\t</div>\n\t\t<div id="js_wk_settings_main">\n\t\t</div>\n    </div>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/settings_workspace*/
define('app/component/settings_workspace', [
    'mad/component/component',
    'mad/component/tab',
    'app/component/settings_menu',
    'app/component/settings_workspace_menu',
    'app/component/breadcrumb/settings_breadcrumb',
    'app/component/profile',
    'app/component/keys',
    'app/form/user/create',
    'app/form/user/avatar',
    'app/view/template/settings_workspace.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    var SettingsWorkspace = passbolt.component.SettingsWorkspace = mad.Component.extend('passbolt.component.SettingsWorkspace', {
            defaults: {
                label: 'Settings',
                templateUri: 'app/view/template/settings_workspace.ejs',
                sections: [
                    'profile',
                    'keys'
                ],
                silentLoading: false
            }
        }, {
            afterStart: function () {
                var self = this;
                this.section = '';
                var component = mad.helper.Component.create($('#js_wsp_primary_menu_wrapper'), 'last', passbolt.component.SettingsWorkspaceMenu, {});
                component.start();
                this.menuItems = Array();
                this.menuItems['profile'] = new mad.model.Action({
                    id: uuid(),
                    label: __('My profile'),
                    action: function () {
                        mad.bus.trigger('request_settings_section', 'profile');
                    }
                });
                this.menuItems['keys'] = new mad.model.Action({
                    id: uuid(),
                    label: __('Manage your keys'),
                    action: function () {
                        mad.bus.trigger('request_settings_section', 'keys');
                    }
                });
                this.settingsWkMenu = new passbolt.component.SettingsMenu('#js_wk_settings_menu', {
                    menuItems: [
                        this.menuItems['profile'],
                        this.menuItems['keys']
                    ]
                });
                this.settingsWkMenu.start();
                this.settingsTabsCtl = new mad.component.Tab('#js_wk_settings_main', { autoMenu: false });
                this.settingsTabsCtl.start();
                this.breadcrumCtl = new passbolt.component.SettingsBreadcrumb($('#js_wsp_settings_breadcrumb'), {});
                this.breadcrumCtl.start();
                this.breadcrumCtl.load();
                self.profileCtl = self.settingsTabsCtl.addComponent(passbolt.component.Profile, {
                    id: 'js_settings_wk_profile_controller',
                    label: 'profile',
                    user: passbolt.model.User.getCurrent()
                });
                self.profileKeysCtl = self.settingsTabsCtl.addComponent(passbolt.component.Keys, {
                    id: 'js_settings_wk_profile_keys_controller',
                    label: 'keys'
                });
            },
            destroy: function () {
                $('#js_wsp_primary_menu_wrapper').empty();
                $('#js_wsp_settings_breadcrumb').empty();
                this._super();
            },
            '{mad.bus} request_profile_edition': function (el, ev) {
                if (!this.element)
                    return;
                var self = this;
                var user = passbolt.model.User.getCurrent();
                var dialog = new mad.component.Dialog(null, { label: __('Edit User') }).start();
                var form = dialog.add(passbolt.form.user.Create, {
                        data: user,
                        action: 'edit',
                        callbacks: {
                            submit: function (data) {
                                user.attr(data['passbolt.model.User']).save();
                                dialog.remove();
                            }
                        }
                    });
                form.load(user);
            },
            '{mad.bus} request_user_password_edition': function (el, ev, user) {
                if (!this.element)
                    return;
                var self = this;
                var dialog = new mad.component.Dialog(null, { label: __('Edit User Password') }).start();
                var form = dialog.add(passbolt.form.user.Password, {
                        data: user,
                        callbacks: {
                            submit: function (data) {
                                user.attr(data['passbolt.model.User']).savePassword();
                                dialog.remove();
                            }
                        }
                    });
                form.load(user);
            },
            '{mad.bus} request_profile_avatar_edition': function (el, ev, user) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, { label: __('Edit Avatar') }).start();
                var form = dialog.add(passbolt.form.user.Avatar, {
                        data: user,
                        callbacks: {
                            submit: function (data) {
                                var $fileField = $('#js_field_avatar');
                                user.saveAvatar($fileField[0].files[0]);
                                dialog.remove();
                            }
                        }
                    });
                form.load(user);
            },
            '{mad.bus} request_settings_section': function (el, ev, section) {
                if (!this.element)
                    return;
                var tabId = null;
                var sectionIsValid = $.inArray(section, this.options.sections) != -1;
                if (sectionIsValid) {
                    switch (section) {
                    case 'keys':
                        tabId = 'js_settings_wk_profile_keys_controller';
                        break;
                    case 'profile':
                        tabId = 'js_settings_wk_profile_controller';
                        break;
                    }
                    if (tabId) {
                        this.settingsTabsCtl.enableTab(tabId);
                    }
                    $('#container').removeClass(this.options.sections.join(' ')).addClass(section);
                    this.section = section;
                    this.settingsWkMenu.selectItem(this.menuItems[this.section]);
                }
            },
            stateReady: function (go) {
                mad.bus.trigger('request_settings_section', 'profile');
            },
            stateDisabled: function (go) {
                this._super(go);
                $('#container').removeClass(this.options.sections.join(' '));
            },
            stateHidden: function (go) {
                this._super(go);
                $('#container').removeClass(this.options.sections.join(' '));
            }
        });
    var $__default = SettingsWorkspace;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/free_composite/workspace.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/free_composite/workspace.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_free_composite_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_workspace grid_16 alpha omega">\n\t<!-----------------------------------------------------------------------------\n\tWorkspace header bar\n\t----------------------------------------------------------------------------->\n\t<div class="js_workspace_label grid_3 alpha">\n\t\t');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('\n\t</div>\n\t\n\t<div class="js_workspace_actions_container grid_7"></div>\n\t\n\t<div class="js_workspace_view_actions_container grid_6 omega"></div>\n\t\n\t<div class="clear"></div>\n\t\n\t<!-----------------------------------------------------------------------------\n\tMain area\n\t----------------------------------------------------------------------------->\n\t\n\t<div class="js_workspace_sidebar_first grid_3 alpha">\n\t</div>\n\t\n\t<div class="js_workspace_main grid_7">\n\t</div>\n\t\n\t<div class="js_workspace_sidebar_second grid_6 omega">\n\t</div>\n\t\n\t<div class="clear"></div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/free_composite*/
define('mad/component/free_composite', [
    'mad/component/composite',
    'mad/view/template/component/free_composite/workspace.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var FreeComposite = mad.component.FreeComposite = mad.component.Composite.extend('mad.component.FreeComposite', {
            defaults: {
                'label': 'WorkspaceController',
                'templateUri': 'mad/view/template/component/free_composite/workspace.ejs'
            }
        }, {
            addComponent: function (ComponentClass, componentOptions, area) {
                area = area || 'mad-container-main';
                var returnValue = null;
                var $area = $('.' + area, this.element);
                var component = mad.helper.Component.create($area, 'inside_replace', ComponentClass, componentOptions);
                return this._super(component);
            }
        });
    var $__default = FreeComposite;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/dialog*/
define('mad/view/component/dialog', [], function () {
    'use strict';
    var Dialog = mad.view.component.Dialog = mad.View.extend('mad.view.component.Dialog', {}, {
            setTitle: function (title) {
                $('.dialog-header h2', this.element).html(title);
            },
            '.dialog-close click': function (el, ev) {
                ev.preventDefault();
                this.element.remove();
            },
            '{window} keyup': function (el, ev) {
                if (ev.keyCode == 27) {
                    this.element.remove();
                }
            },
            ' .js-dialog-cancel click': function (el, ev) {
                this.element.remove();
            }
        });
    var $__default = Dialog;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/dialog/dialog.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/dialog/dialog.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_dialog_dialog_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dialog">\n    <div class="dialog-header">\n        <h2>');
                ___v1ew.push(can.view.txt(1, 'h2', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('</h2>\n        <a href="#" class="dialog-close"><i class="icon close no-text"></i><span>close</span></a>\n    </div>\n    <div class="js_dialog_content dialog-content">\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/dialog*/
define('mad/component/dialog', [
    'mad/component/component',
    'mad/component/free_composite',
    'mad/view/component/dialog',
    'mad/view/template/component/dialog/dialog.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var Dialog = mad.component.Dialog = mad.component.FreeComposite.extend('mad.component.Dialog', {
            defaults: {
                label: 'Dialog Controller',
                viewClass: mad.view.component.Dialog,
                templateUri: 'mad/view/template/component/dialog/dialog.ejs',
                cssClasses: ['dialog-wrapper'],
                tag: 'div'
            },
            closeLatest: function () {
                $('.dialog-wrapper:last').remove();
            }
        }, {
            init: function (el, options) {
                var refElt = mad.config.rootElement, position = 'first';
                var $existingDialog = $('.dialog-wrapper:last');
                if ($existingDialog.length) {
                    refElt = $existingDialog;
                    position = 'after';
                }
                var $el = mad.helper.Html.create(refElt, position, '<div />');
                this.setup($el, options);
                this._super($el, options);
            },
            add: function (Class, options) {
                if (typeof options == 'undefined' || options == null) {
                    options = {};
                }
                var component = this.addComponent(Class, options, 'js_dialog_content');
                component.start();
                return component;
            },
            setTitle: function (title) {
                this.view.setTitle(title);
            }
        });
    var $__default = Dialog;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/confirm*/
define('mad/view/component/confirm', [], function () {
    'use strict';
    var ConfirmView = mad.view.component.Confirm = mad.view.component.Dialog.extend('mad.view.component.Confirm', {}, {
            setContent: function (content) {
                $('.dialog-content .form-content', this.element).html(content);
            },
            ' .js-dialog-confirm click': function (el, ev) {
                ev.preventDefault();
                this.element.trigger('confirm_clicked');
            }
        });
    var $__default = ConfirmView;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/confirm/confirm.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/confirm/confirm.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_confirm_confirm_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dialog confirm">\n    <div class="dialog-header">\n        <h2>');
                ___v1ew.push(can.view.txt(1, 'h2', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('</h2>\n        <a href="#" class="dialog-close"><i class="icon close no-text"></i><span>close</span></a>\n    </div>\n    <div class="js_dialog_content dialog-content">\n        <div class="form-content">\n            <p>');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return content;
                }));
                ___v1ew.push('</p>\n        </div>\n    </div>\n    <div class="submit-wrapper clearfix">\n        <input type="submit" value="OK" class="button primary js-dialog-confirm" id="confirm-button">\n        <a class="js-dialog-cancel cancel" href="#">cancel</a>\n    </div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/confirm*/
define('mad/component/confirm', [
    'mad/component/dialog',
    'mad/view/component/confirm',
    'mad/view/template/component/confirm/confirm.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Confirm = mad.component.Confirm = mad.component.Dialog.extend('mad.component.Confirm', {
            defaults: {
                label: 'Confirm component',
                viewClass: mad.view.component.Confirm,
                templateUri: 'mad/view/template/component/confirm/confirm.ejs',
                content: '',
                closeAfterAction: true,
                action: null
            }
        }, {
            init: function (el, options) {
                this._super(el, options);
                this.setViewData('content', this.options.content);
            },
            setContent: function (content) {
                this.view.setContent(content);
            },
            ' confirm_clicked': function () {
                if (typeof this.options.action !== 'undefined') {
                    this.options.action();
                }
                if (this.options.closeAfterAction === true) {
                    mad.component.Confirm.closeLatest();
                }
            }
        });
    var $__default = Confirm;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/button/button.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/button/button.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_button_button_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<button type="button">\n\t');
                if (icon) {
                    img_tag(icon);
                }
                ;
                ;
                ___v1ew.push('\n\t');
                ___v1ew.push(can.view.txt(1, 'button', 0, this, function () {
                    return label;
                }));
                ___v1ew.push('\n</button>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/button*/
define('mad/component/button', [
    'mad/component/component',
    'mad/view/template/component/button/button.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Button = mad.component.Button = mad.Component.extend('mad.component.Button', {
            'defaults': {
                'label': 'Button Component',
                'templateUri': 'mad/view/template/component/button.ejs',
                'templateBased': false,
                'value': null,
                'events': { 'click': null },
                'tag': 'button'
            }
        }, {
            'value': null,
            init: function (el, options) {
                this._super(el, options);
                this.value = options.value;
            },
            getValue: function () {
                return this.value;
            },
            setValue: function (value) {
                this.value = value;
                return this;
            },
            'click': function (el, ev) {
                if (this.state.is('disabled')) {
                    ev.stopImmediatePropagation();
                } else {
                    if (this.options.events.click) {
                        this.options.events.click(this.element, ev, this.value);
                    }
                }
            },
            'stateDisabled': function (go) {
                if (go) {
                    this.element.attr('disabled', 'disabled').addClass('disabled');
                } else {
                    this.element.removeAttr('disabled').removeClass('disabled');
                }
            }
        });
    var $__default = Button;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/button_dropdown*/
define('mad/view/component/button_dropdown', [
    'mad/view/view',
    'mad/helper/html'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var ButtonDropdown = mad.view.component.ButtonDropdown = mad.View.extend('mad.view.component.ButtonDropdown', { 'defaults': {} }, {
            getDropdownContentElement: function () {
                var contentElement = this.getController().options.contentElement;
                if (contentElement != null) {
                    return $(contentElement);
                } else {
                    return this.element.next();
                }
            },
            open: function () {
                this.element.addClass('pressed');
                var $contentElement = this.getDropdownContentElement();
                $contentElement.addClass('visible');
                this.getController().state.addState('open');
            },
            close: function () {
                this.element.removeClass('pressed');
                var $contentElement = this.getDropdownContentElement();
                $contentElement.removeClass('visible');
                if (this.getController().state.is('open'))
                    this.getController().state.removeState('open');
            },
            'click': function (el, ev) {
                if (this.getController().state.is('disabled')) {
                    return false;
                }
                if (!this.getController().state.is('open')) {
                    this.open();
                } else {
                    this.close();
                }
                return false;
            },
            '{document} click': function (el, ev) {
                if (!this.element.is(el)) {
                    this.close();
                }
            }
        });
    return {};
});
/*mad/view/template/component/button_dropdown/button_dropdown.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/button_dropdown/button_dropdown.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_button_dropdown_button_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dropdown">\n\t<a>\n\t\t<span>more</span>\n\t\t<i class="icon after arrowdown"></i>\n\t</a>\n\t<ul class="dropdown-content">\n\t\t<li><a href="#">submenu1</a></li>\n\t\t<li><a href="#">submenu2</a></li>\n\t</ul>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/button_dropdown*/
define('mad/component/button_dropdown', [
    'mad/component/button',
    'mad/component/menu',
    'mad/view/component/button_dropdown',
    'mad/view/template/component/button_dropdown/button_dropdown.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var ButtonDropdown = mad.component.ButtonDropdown = mad.component.Button.extend('mad.component.ButtonDropdown', {
            defaults: {
                label: 'Button Dropdown Component',
                viewClass: mad.view.component.ButtonDropdown,
                items: null,
                contentElement: null,
                closeOnItemClick: true
            }
        }, {
            afterStart: function () {
                var $dropdownElement = null;
                if (this.options.contentElement == null) {
                    $dropdownElement = $('<ul class="dropdown-content"></div>').insertAfter(this.element);
                } else {
                    $dropdownElement = $(this.options.contentElement);
                }
                this.options.menu = new mad.component.Menu($dropdownElement);
                this.options.menu.start();
                this.options.menu.load(this.options.items);
                this.on();
            },
            setItemState: function (id, stateName) {
                this.options.menu.setItemState(id, stateName);
            },
            '{menu.element} item_selected': function (el, ev, item) {
                if (this.options.closeOnItemClick === true) {
                    this.view.close();
                }
            },
            stateDisabled: function (go) {
                this._super(go);
                if (go) {
                    this.view.close();
                }
            }
        });
    var $__default = ButtonDropdown;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/category*/
define('app/model/category', [
    'mad/model/model',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Category = passbolt.model.Category = mad.Model.extend('passbolt.model.Category', {
            forceStore: true,
            validateRules: {},
            attributes: {
                id: 'string',
                parent_id: 'string',
                lft: 'string',
                rght: 'string',
                name: 'string',
                children: 'passbolt.model.Category.models',
                UserCategoryPermission: 'passbolt.model.UserCategoryPermission.model',
                GroupCategoryPermission: 'passbolt.model.GroupCategoryPermission.model'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'categories.json',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + 'categories/{id}',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                params.children = params.children || false;
                return mad.net.Ajax.request({
                    url: APP_URL + 'categories/{id}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'categories.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            update: function (id, attrs, success, error) {
                var self = this;
                delete attrs.created;
                delete attrs.modified;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = id;
                return mad.net.Ajax.request({
                    url: APP_URL + 'categories/{id}.json',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            }
        }, {
            getSubCategories: function () {
                return mad.Model.nestedToList(this, 'children');
            },
            getParentCategories: function () {
                var data = [];
                var i = mad.model.List.indexOf(passbolt.model.Category.madStore, this.parent_id);
                if (i != -1) {
                    var parentCategory = passbolt.model.Category.madStore[i];
                    if (parentCategory.parent_id != null) {
                        data = parentCategory.getParentCategories();
                    }
                    data.push(parentCategory);
                }
                return data;
            }
        });
    var $__default = Category;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/permission_type*/
define('app/model/permission_type', [
    'mad/model/model',
    'app/model/category',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    passbolt.DENY = 0;
    passbolt.READ = 1;
    passbolt.CREATE = 3;
    passbolt.UPDATE = 7;
    passbolt.ADMIN = 15;
    var PermissionType = passbolt.model.PermissionType = mad.Model.extend('passbolt.model.PermissionType', {
            validateRules: {
                serial: [{
                        rule: 'choice',
                        options: {
                            callback: function () {
                                return $.map(passbolt.model.PermissionType.PERMISSION_TYPES, function (element, index) {
                                    return index;
                                });
                            }
                        }
                    }]
            },
            attributes: {
                serial: 'string',
                name: 'string',
                binary: 'string',
                _admin: 'boolean',
                _update: 'boolean',
                _create: 'boolean',
                _read: 'boolean',
                description: 'string'
            },
            PERMISSION_TYPES: {
                0: __('deny'),
                1: __('read'),
                3: __('create'),
                7: __('update'),
                15: __('owner')
            },
            formatToString: function (permId) {
                var returnValue = '';
                if (permId == undefined) {
                    console.error('Warning, PermissionType.toString called without permId');
                    return 'can read';
                }
                switch (permId) {
                case passbolt.DENY.toString():
                    returnValue = this.PERMISSION_TYPES[permId];
                    break;
                case passbolt.ADMIN.toString():
                    returnValue = __('is %s', this.PERMISSION_TYPES[permId]);
                    break;
                default:
                    returnValue = __('can %s', this.PERMISSION_TYPES[permId]);
                    break;
                }
                return returnValue;
            },
            getPermissionTypes: function (foreignModel) {
                var returnValue = [];
                var allowedPermissions = {
                        'Group': [
                            0,
                            1,
                            3,
                            7,
                            15
                        ],
                        'User': [
                            0,
                            1,
                            7,
                            15
                        ]
                    };
                if (typeof foreignModel != 'undefined') {
                    for (var permType in allowedPermissions[foreignModel]) {
                        returnValue[permType] = passbolt.model.PermissionType.PERMISSION_TYPES[permType];
                    }
                } else {
                    returnValue = passbolt.model.PermissionType.PERMISSION_TYPES;
                }
                return returnValue;
            }
        }, {
            toString: function (format) {
                var returnValue;
                switch (format) {
                case 'long':
                    returnValue = passbolt.model.PermissionType.PERMISSION_TYPES[this.serial];
                    if (this.serial !== passbolt.DENY.toString() && this.serial != passbolt.ADMIN.toString()) {
                        returnValue = __('can %s', returnValue);
                    }
                    break;
                case 'short':
                default:
                    returnValue = passbolt.model.PermissionType.PERMISSION_TYPES[this.serial];
                }
                return returnValue;
            },
            destroy: function () {
            }
        });
    var $__default = PermissionType;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/group_category_permission*/
define('app/model/group_category_permission', [
    'mad/model/model',
    'app/model/category',
    'app/model/permission_type',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var GroupCategoryPermission = passbolt.model.GroupCategoryPermission = mad.Model.extend('passbolt.model.GroupCategoryPermission', {
            attributes: {
                'permission_id': 'string',
                'permission_type': 'number'
            }
        }, {});
    var $__default = GroupCategoryPermission;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/group_resource_permission*/
define('app/model/group_resource_permission', [
    'mad/model/model',
    'app/model/category',
    'app/model/permission_type',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var GroupResourcePermission = passbolt.model.GroupResourcePermission = mad.Model.extend('passbolt.model.GroupResourcePermission', {
            attributes: {
                'permission_id': 'string',
                'permission_type': 'number'
            }
        }, {});
    var $__default = GroupResourcePermission;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/user_category_permission*/
define('app/model/user_category_permission', [
    'mad/model/model',
    'app/model/category',
    'app/model/permission_type',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var UserCategoryPermission = passbolt.model.UserCategoryPermission = mad.Model.extend('passbolt.model.UserCategoryPermission', {
            attributes: {
                'permission_id': 'string',
                'permission_type': 'number'
            }
        }, {});
    var $__default = UserCategoryPermission;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/user_resource_permission*/
define('app/model/user_resource_permission', [
    'mad/model/model',
    'app/model/category',
    'app/model/permission_type',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var UserResourcePermission = passbolt.model.UserResourcePermission = mad.Model.extend('passbolt.model.UserResourcePermission', {
            attributes: {
                'permission_id': 'string',
                'permission_type': 'number'
            }
        }, {});
    var $__default = UserResourcePermission;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/permission*/
define('app/model/permission', [
    'mad/model/model',
    'app/model/category',
    'app/model/permission_type',
    'app/model/group_category_permission',
    'app/model/group_resource_permission',
    'app/model/user_category_permission',
    'app/model/user_resource_permission',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    var Permission = passbolt.model.Permission = mad.Model.extend('passbolt.model.Permission', {
            validateRules: {
                aro_foreign_key: [
                    'required',
                    'uid'
                ],
                aro_foreign_label: ['required'],
                type: [
                    'required',
                    {
                        rule: 'foreignRule',
                        options: {
                            model: passbolt.model.PermissionType,
                            attribute: 'serial'
                        }
                    }
                ]
            },
            attributes: {
                id: 'string',
                type: 'string',
                aco: 'string',
                aco_foreign_key: 'string',
                aro: 'string',
                aro_foreign_key: 'string',
                aro_foreign_label: 'string',
                PermissionType: 'passbolt.model.PermissionType.model',
                Resource: 'passbolt.model.Resource.model',
                Category: 'passbolt.model.Category.model',
                User: 'passbolt.model.User.model',
                Group: 'passbolt.model.Group.model'
            },
            create: function (attrs, success, error) {
                var self = this;
                var uri = 'permissions/' + attrs['aco'].toLowerCase() + '/' + attrs['aco_foreign_key'];
                delete attrs['aco'], attrs['aco_foreign_key'];
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + uri,
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + 'permissions/{id}.json',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                var uri = 'permissions';
                if (typeof params.aco != 'undefined' && typeof params.aco_foreign_key != 'undefined') {
                    uri += '/' + params.aco.toLowerCase() + '/' + params.aco_foreign_key;
                }
                return mad.net.Ajax.request({
                    url: APP_URL + uri,
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + '/permissions/{id}',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            update: function (id, attrs, success, error) {
                var self = this;
                delete attrs.created;
                delete attrs.modified;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = id;
                return mad.net.Ajax.request({
                    url: APP_URL + '/permissions/{id}',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            share: function (aco, acoForeignKey, attrs, success, error) {
                var self = this;
                return mad.net.Ajax.request({
                    url: APP_URL + 'share/' + aco + '/' + acoForeignKey + '.json',
                    type: 'PUT',
                    params: attrs,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            isAllowedTo: function (objs, requestedPermission) {
                var permission = null;
                var returnValue = null;
                if (!(objs instanceof can.Model.List)) {
                    objs = new can.List([objs]);
                }
                objs.each(function (obj, i) {
                    if (returnValue == false) {
                        return;
                    }
                    switch (obj.constructor.shortName) {
                    case 'Category':
                        if (typeof obj.UserCategoryPermission != 'undefined') {
                            permission = obj.UserCategoryPermission;
                        } else if (typeof obj.GroupCategoryPermission != 'undefined') {
                            permission = obj.GroupCategoryPermission;
                        }
                        break;
                    case 'Resource':
                        if (typeof obj.UserResourcePermission != 'undefined') {
                            permission = obj.UserResourcePermission;
                        } else if (typeof obj.GroupResourcePermission != 'undefined') {
                            permission = obj.GroupResourcePermission;
                        }
                        break;
                    }
                    if (permission.permission_type >= requestedPermission) {
                        returnValue = true;
                    } else {
                        returnValue = false;
                    }
                });
                return returnValue != null ? returnValue : false;
            }
        }, {
            isDirect: function (acoInstance) {
                var permAcoModel = can.getObject('passbolt.model.' + this.aco);
                if (acoInstance instanceof permAcoModel && acoInstance.id === this.aco_foreign_key) {
                    return true;
                }
                return false;
            }
        });
    var $__default = Permission;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/password_workspace_menu.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/password_workspace_menu.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_password_workspace_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n    <a id="js_wk_menu_secretcopy_button" href="#" class="button">\n        <i class="icon copy"></i>\n        <span>copy</span>\n    </a>\n</li>\n<li>\n\t<a id="js_wk_menu_edition_button" href="#" class="button">\n\t\t<i class="icon edit"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('edit');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<a id="js_wk_menu_sharing_button" href="#" class="button">\n\t\t<i class="icon share"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('share');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<div class="dropdown">\n\t\t<a id="js_wk_menu_more_button" href="#" class="button">\n\t\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('more');
                }));
                ___v1ew.push('</span>\n\t\t\t<i class="icon after arrowdown"></i>\n\t\t</a>\n\t</div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password_workspace_menu*/
define('app/component/password_workspace_menu', [
    'mad/component/component',
    'mad/component/button',
    'mad/component/button_dropdown',
    'app/model/permission',
    'app/view/template/component/password_workspace_menu.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var PasswordWorkspaceMenu = passbolt.component.PasswordWorkspaceMenu = mad.Component.extend('passbolt.component.PasswordWorkspaceMenu', {
            defaults: {
                label: 'Workspace Menu Controller',
                tag: 'ul',
                selectedRs: new can.Model.List(),
                templateUri: 'app/view/template/component/password_workspace_menu.ejs'
            }
        }, {
            afterStart: function () {
                var self = this;
                this.options.secretCopyButton = new mad.component.Button($('#js_wk_menu_secretcopy_button'), { state: 'disabled' }).start();
                this.options.editButton = new mad.component.Button($('#js_wk_menu_edition_button'), { state: 'disabled' }).start();
                this.options.shareButton = new mad.component.Button($('#js_wk_menu_sharing_button'), { state: 'disabled' }).start();
                var moreButtonMenuItems = [
                        new mad.model.Action({
                            id: uuid(),
                            label: __('copy login to clipboard'),
                            cssClasses: [],
                            action: function () {
                                var username = self.options.selectedRs[0].username;
                                mad.bus.trigger('passbolt.clipboard', {
                                    name: 'username',
                                    data: username
                                });
                            }
                        }),
                        new mad.model.Action({
                            id: uuid(),
                            label: __('copy password to clipboard'),
                            cssClasses: [],
                            action: function () {
                                var secret = self.options.selectedRs[0].Secret[0].data;
                                mad.bus.trigger('passbolt.secret.decrypt', secret);
                            }
                        }),
                        new mad.model.Action({
                            id: 'js_wk_menu_delete_action',
                            label: __('delete'),
                            cssClasses: [],
                            action: function () {
                                self.element.trigger('delete_action_clicked');
                            }
                        })
                    ];
                this.options.moreButton = new mad.component.ButtonDropdown($('#js_wk_menu_more_button'), {
                    state: 'disabled',
                    items: moreButtonMenuItems
                }).start();
                this.on();
            },
            '{secretCopyButton.element} click': function (el, ev) {
                var resource = this.options.editButton.getValue();
                var secret = resource.Secret[0].data;
                mad.bus.trigger('passbolt.secret.decrypt', secret);
            },
            '{editButton.element} click': function (el, ev) {
                var resource = this.options.editButton.getValue();
                mad.bus.trigger('request_resource_edition', resource);
            },
            ' delete_action_clicked': function (el, ev) {
                var resources = this.options.selectedRs;
                mad.bus.trigger('request_resource_deletion', resources);
            },
            '{shareButton.element} click': function (el, ev) {
                var resource = this.options.shareButton.getValue();
                mad.bus.trigger('request_resource_sharing', resource);
            },
            '{selectedRs} add': function (el, ev, resource) {
                if (this.options.selectedRs.length == 0) {
                    this.setState('ready');
                } else if (this.options.selectedRs.length == 1) {
                    this.setState('selection');
                } else {
                    this.setState('multiSelection');
                }
            },
            '{selectedRs} remove': function (el, ev, resource) {
                if (this.options.selectedRs.length == 0) {
                    this.setState('ready');
                } else if (this.options.selectedRs.length == 1) {
                    this.setState('selection');
                } else {
                    this.setState('multiSelection');
                }
            },
            stateSelection: function (go) {
                if (go) {
                    var updatable = passbolt.model.Permission.isAllowedTo(this.options.selectedRs[0], passbolt.UPDATE);
                    var administrable = passbolt.model.Permission.isAllowedTo(this.options.selectedRs[0], passbolt.ADMIN);
                    this.options.secretCopyButton.setValue(this.options.selectedRs[0]).setState('ready');
                    this.options.editButton.setValue(this.options.selectedRs[0]).setState(updatable ? 'ready' : 'disabled');
                    this.options.shareButton.setValue(this.options.selectedRs).setState(administrable ? 'ready' : 'disabled');
                    this.options.moreButton.setValue(this.options.selectedRs[0]).setState('ready');
                    this.options.moreButton.setItemState('js_wk_menu_delete_action', updatable ? 'ready' : 'disabled');
                } else {
                    this.options.secretCopyButton.setValue(null).setState('disabled');
                    this.options.editButton.setValue(null).setState('disabled');
                    this.options.shareButton.setValue(null).setState('disabled');
                    this.options.moreButton.setValue(null).setState('disabled');
                    this.options.moreButton.setItemState('js_wk_menu_delete_action', 'disabled');
                }
            },
            stateMultiSelection: function (go) {
                if (go) {
                    var canUpdate = passbolt.model.Permission.isAllowedTo(this.options.selectedRs, passbolt.UPDATE);
                    var canAdmin = passbolt.model.Permission.isAllowedTo(this.options.selectedRs, passbolt.ADMIN);
                    this.options.secretCopyButton.setValue(null).setState('disabled');
                    this.options.editButton.setState('disabled');
                    this.options.shareButton.setValue(this.options.selectedRs).setState(canAdmin ? 'ready' : 'disabled');
                    this.options.moreButton.setState('disabled');
                } else {
                    this.options.secretCopyButton.setValue(null).setState('disabled');
                    this.options.editButton.setValue(null).setState('disabled');
                    this.options.shareButton.setValue(null).setState('disabled');
                }
            }
        });
    var $__default = PasswordWorkspaceMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/breadcrumb/password_breadcrumb*/
define('app/component/breadcrumb/password_breadcrumb', [
    'mad/component/component',
    'app/model/category',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var PasswordBreadcrumb = passbolt.component.PasswordBreadcrumb = mad.Component.extend('passbolt.component.PasswordBreadcrumb', {
            defaults: {
                categories: passbolt.model.Category.List,
                templateUri: 'app/view/template/component/breadcrumb/breadcrumb.ejs',
                status: 'hidden',
                filter: null
            }
        }, {
            afterStart: function () {
                var menuSelector = '#' + this.getId() + ' ul';
                this.options.menu = new mad.component.Menu(menuSelector, { 'itemTemplateUri': 'app/view/template/component/breadcrumb/breadcrumb_item.ejs' });
                this.options.menu.start();
            },
            parseFilter: function (filter) {
                var menuItems = [];
                var menuItem = new mad.model.Action({
                        'id': uuid(),
                        'label': __('All items'),
                        'action': function () {
                            var filter = new passbolt.model.Filter({
                                    'label': __('All items'),
                                    'order': 'modified'
                                });
                            mad.bus.trigger('filter_resources_browser', filter);
                        }
                    });
                menuItems.push(menuItem);
                if (typeof filter.foreignModels.Category != 'undefined') {
                    if (filter.foreignModels.Category.length == 1) {
                        var category = filter.foreignModels.Category[0];
                        var parentCategories = category.getParentCategories();
                        can.each(parentCategories, function (parentCategory) {
                            var menuItem = new mad.model.Action({
                                    'id': uuid(),
                                    'label': parentCategory.name,
                                    'action': function () {
                                        mad.bus.trigger('category_selected', parentCategory);
                                    }
                                });
                            menuItems.push(menuItem);
                        });
                        var menuItem = new mad.model.Action({
                                'id': uuid(),
                                'label': category.name,
                                'action': function () {
                                    mad.bus.trigger('category_selected', category);
                                }
                            });
                        menuItems.push(menuItem);
                    }
                } else if (typeof filter.keywords != 'undefined' && filter.keywords != '') {
                    var menuItem = new mad.model.Action({
                            'id': uuid(),
                            'label': __('Search : %s', filter.keywords)
                        });
                    menuItems.push(menuItem);
                } else {
                    if (typeof filter.label != 'undefined' && filter.label != __('All items')) {
                        var menuItem = new mad.model.Action({
                                'id': uuid(),
                                'label': filter.label
                            });
                        menuItems.push(menuItem);
                    }
                }
                return menuItems;
            },
            load: function (filter) {
                var menuItems = this.parseFilter(filter);
                this.options.menu.reset();
                this.options.menu.load(menuItems);
            }
        });
    var $__default = PasswordBreadcrumb;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/grid*/
define('mad/view/component/grid', [
    'mad/view/view',
    'mad/helper/html'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Grid = mad.view.component.Grid = mad.View.extend('mad.view.component.Grid', {}, {
            reset: function () {
                $('tbody tr', this.element).remove();
            },
            hideColumn: function (columnName) {
                $('.js_grid_column_' + columnName, this.element).hide();
            },
            showColumn: function (columnName) {
                $('.js_grid_column_' + columnName, this.element).show();
            },
            selectItem: function (item) {
                var $item = this.getItemElement(item);
                $item.addClass('selected');
            },
            unselectItem: function (item) {
                var $item = this.getItemElement(item);
                $item.removeClass('selected');
            },
            unselectAll: function () {
                $('tr.selected', this.element).removeClass('selected');
            },
            rightSelectItem: function (item) {
            },
            hoverItem: function (item, element, srcEvent) {
            },
            removeItem: function (item) {
                var $item = this.getItemElement(item);
                $item.remove();
            },
            _renderRow: function (item) {
                var control = this.getController(), columnModels = control.getColumnModel(), mappedItem = control.getMap().mapObject(item), values = [], titles = [];
                for (var i in columnModels) {
                    var columnModel = columnModels[i], cellValue = null, titleValue = null;
                    if (columnModel.valueAdapter) {
                        cellValue = columnModel.valueAdapter(mappedItem[columnModel.name], mappedItem, item, columnModel);
                    } else if (columnModel.widget || columnModel.cellAdapter) {
                        cellValue = '';
                    } else {
                        cellValue = mappedItem[columnModel.name];
                    }
                    values[columnModel.name] = cellValue;
                    if (columnModel.titleAdapter) {
                        titleValue = columnModel.titleAdapter(mappedItem[columnModel.name], mappedItem, item, columnModel);
                    } else {
                        titleValue = cellValue;
                    }
                    titles[columnModel.name] = titleValue;
                }
                return mad.View.render(control.options.itemTemplateUri, {
                    item: item,
                    id: control.options.prefixItemId + mappedItem.id,
                    columnModels: columnModels,
                    values: values,
                    titles: titles
                });
            },
            getItemElement: function (item) {
                return $('#' + this.getController().options.prefixItemId + item.id, this.element);
            },
            insertItem: function (item, refItem, position) {
                position = position || 'last';
                var $item = null, $refElement = null, itemRender = '', row = '', control = this.getController();
                switch (position) {
                case 'before':
                case 'after':
                    $refElement = this.getItemElement(refItem);
                    if (!$refElement.length) {
                        throw new mad.Exception('No HTMLElement found for the given item.');
                    }
                    break;
                default:
                case 'first':
                case 'last':
                    $refElement = $('tbody', this.element);
                    break;
                }
                row = this._renderRow(item);
                $item = mad.helper.Html.create($refElement, position, row);
                can.data($item, control.getItemClass().fullName, item);
                return $item;
            },
            refreshItem: function (item) {
                var $current = this.getItemElement(item);
                var row = this._renderRow(item);
                var $item = mad.helper.Html.create($current, 'replace_with', row);
                can.data($item, this.getController().getItemClass().fullName, item);
            },
            'tbody tr click': function (el, ev) {
                var data = null, control = this.getController(), itemClass = control.getItemClass();
                if (itemClass) {
                    data = el.data(itemClass.fullName);
                } else {
                    data = el[0].id.replace(control.options.prefixItemId, '');
                }
                this.element.trigger('item_selected', [
                    data,
                    ev
                ]);
            },
            'tbody tr hover': function (el, ev) {
                var data = null, control = this.getController(), itemClass = control.getItemClass();
                if (itemClass) {
                    data = el.data(itemClass.fullName);
                } else {
                    data = el[0].id.replace(control.options.prefixItemId, '');
                }
                this.element.trigger('item_hovered', [
                    data,
                    ev
                ]);
            }
        });
    var $__default = Grid;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/component/grid/grid.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/grid/grid.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_grid_grid_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="tableview-header">\n    <table>\n        <thead>\n            <tr>\n');
                ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                    var ___v1ew = [];
                    for (var i in columnModel) {
                        ___v1ew.push('\n                <th class="js_grid_column js_grid_column_');
                        ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                            return columnModel[i].name;
                        }));
                        ___v1ew.push(' cell_');
                        ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                            return columnModel[i].name;
                        }));
                        ___v1ew.push(' ');
                        ___v1ew.push(can.view.txt(true, 'th', 'class', this, function () {
                            return columnModel[i].header.css.join(' ');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n                    ');
                        ___v1ew.push(can.view.txt(0, 'th', 0, this, function () {
                            return columnModel[i].header.label;
                        }));
                        ___v1ew.push('\n                </th>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n            </tr>\n        </thead>\n    </table>\n</div>\n<div class="tableview-content scroll">\n    <table>\n        <tbody>\n        </tbody>\n    </table>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/view/template/component/grid/gridItem.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/grid/gridItem.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_grid_gridItem_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<tr id="');
                ___v1ew.push(can.view.txt(true, 'tr', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'tr', 0, this, function () {
                    var ___v1ew = [];
                    for (var i in columnModels) {
                        ___v1ew.push('\n\t<td class="js_grid_column_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' cell_');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].name;
                        }));
                        ___v1ew.push(' ');
                        ___v1ew.push(can.view.txt(true, 'td', 'class', this, function () {
                            return columnModels[i].header.css.join(' ');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n\t\t<div title="');
                        ___v1ew.push(can.view.txt(true, 'div', 'title', this, function () {
                            return titles[columnModels[i].name];
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n\t\t\t');
                        ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                            return values[columnModels[i].name];
                        }));
                        ___v1ew.push('\n\t\t</div>\n\t</td>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</tr>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/grid*/
define('mad/component/grid', [
    'mad/component/component',
    'mad/view/component/grid',
    'mad/view/template/component/grid/grid.ejs!',
    'mad/view/template/component/grid/gridItem.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var Grid = mad.component.Grid = mad.Component.extend('mad.component.Grid', {
            defaults: {
                label: 'Grid Component',
                cssClasses: ['tableview'],
                tag: 'div',
                templateUri: 'mad/view/template/component/grid/grid.ejs',
                itemTemplateUri: 'mad/view/template/component/grid/gridItem.ejs',
                viewClass: mad.view.component.Grid,
                prefixItemId: '',
                itemClass: null,
                columnModel: [],
                map: null,
                callbacks: {
                    item_selected: null,
                    item_hovered: null
                }
            }
        }, {
            reset: function () {
                this.view.reset();
            },
            beforeRender: function () {
                this._super();
                this.setViewData('columnModel', this.options.columnModel);
                this.setViewData('items', []);
            },
            getColumnModel: function () {
                return this.options.columnModel;
            },
            getItemClass: function () {
                return this.options.itemClass;
            },
            setItemClass: function (itemClass) {
                this.options.itemClass = itemClass;
            },
            getMap: function (map) {
                return this.options.map;
            },
            setMap: function (map) {
                this.options.map = map;
            },
            selectItem: function (item) {
                this.view.selectItem(item);
            },
            rightSelectItem: function (item) {
                this.view.rightSelectItem(item);
            },
            unselectItem: function (item) {
                this.view.unselectAll();
            },
            hoverItem: function (item) {
                this.view.hoverItem(item);
            },
            unselectAll: function () {
                this.view.unselectAll();
            },
            removeItem: function (item) {
                this.view.removeItem(item);
            },
            insertItem: function (item, refItem, position) {
                var self = this, map = this.getMap(), mappedItem = null, columnModels = this.getColumnModel();
                if (this.getItemClass() != null && !(item instanceof this.getItemClass())) {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'item');
                }
                if (map == null) {
                    throw mad.Exception.get(mad.error.MISSING_OPTION, 'map');
                }
                mappedItem = this.getMap().mapObject(item);
                this.view.insertItem(item, refItem, position);
                for (var j in columnModels) {
                    var columnModel = columnModels[j];
                    if (columnModel.cellAdapter) {
                        var itemId = self.options.prefixItemId + mappedItem.id;
                        var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                        var cellValue = mappedItem[columnModel.name];
                        columnModel.cellAdapter($cell, cellValue, mappedItem, item, columnModel);
                    }
                    if (columnModel.widget) {
                        var widgetClass = columnModel.widget.clazz, widgetJQueryPlugin = widgetClass._fullName, widgetOptions = columnModel.widget.options;
                        var itemId = self.options.prefixItemId + mappedItem[i].id;
                        var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                        widgetOptions.value = mappedItem[i][columnModel.name];
                        $cell[widgetJQueryPlugin](widgetOptions);
                        $cell[widgetJQueryPlugin]('render');
                    }
                }
            },
            refreshItem: function (item) {
                this.view.refreshItem(item);
                var self = this, mappedItem = this.getMap().mapObject(item), columnModels = this.getColumnModel();
                for (var j in columnModels) {
                    var columnModel = columnModels[j];
                    if (columnModel.cellAdapter) {
                        var itemId = self.options.prefixItemId + mappedItem.id;
                        var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                        var cellValue = mappedItem[columnModel.name];
                        columnModel.cellAdapter($cell, cellValue, mappedItem, item, columnModel);
                    }
                    if (columnModel.widget) {
                        var widgetClass = columnModel.widget.clazz, widgetJQueryPlugin = widgetClass._fullName, widgetOptions = columnModel.widget.options;
                        var itemId = self.options.prefixItemId + mappedItem[i].id;
                        var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                        widgetOptions.value = mappedItem[i][columnModel.name];
                        $cell[widgetJQueryPlugin](widgetOptions);
                        $cell[widgetJQueryPlugin]('render');
                    }
                }
            },
            load: function (items) {
                var self = this;
                this.reset();
                can.each(items, function (item, i) {
                    self.insertItem(item);
                });
                return this;
            },
            'tbody mouseleave': function (element, evt) {
            },
            ' item_selected': function (el, ev, item, srcEvent) {
                if (this.options.callbacks.itemSelected) {
                    this.options.callbacks.itemSelected(el, ev, item, srcEvent);
                }
            },
            ' item_hovered': function (el, ev, item, srcEvent) {
                if (this.options.callbacks.itemHovered) {
                    this.options.callbacks.itemHovered(el, ev, item, srcEvent);
                }
            }
        });
    var $__default = Grid;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/dropdown_menu*/
define('mad/view/component/dropdown_menu', ['mad/view/component/tree'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var DropdownMenu = mad.view.component.DropdownMenu = mad.view.component.Tree.extend('mad.view.component.DropdownMenu', {}, {
            init: function (controller, options) {
                this._super(controller, options);
            },
            open: function (item) {
                var li = $('#' + item.id, this.element);
                li.removeClass('closed').addClass('opened');
                var control = $('.control:first', li);
                control.removeClass('open').addClass('close');
            },
            close: function (item) {
                var li = $('#' + item.id, this.element);
                li.removeClass('opened').addClass('closed');
                var control = $('.control:first', li);
                control.removeClass('close').addClass('open');
            },
            'li mouseover': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null;
                if (this.getController().getItemClass()) {
                    data = el.data(this.getController().getItemClass().fullName);
                } else {
                    data = el[0].id;
                }
                this.element.trigger('item_opened', data);
            },
            'li mouseleave': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null;
                if (this.getController().getItemClass()) {
                    data = el.data(this.getController().getItemClass().fullName);
                } else {
                    data = el[0].id;
                }
                this.element.trigger('item_closed', data);
            }
        });
    return {};
});
/*mad/view/template/component/dropdown_menu/dropdown_menu.ejs!lib/can/view/ejs/system*/
define('mad/view/template/component/dropdown_menu/dropdown_menu.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_component_dropdown_menu_dropdown_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t<div class="row">\n\t\t<div class="main-cell-wrapper">\n\t\t\t<div class="main-cell">\n\t\t\t\t<a href="#"><span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.label;
                }));
                ___v1ew.push('</span></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n');
                ___v1ew.push(can.view.txt(0, 'li', 0, this, function () {
                    var ___v1ew = [];
                    if (hasChildren) {
                        ___v1ew.push('\n\t<ul>\n\t</ul>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/component/dropdown_menu*/
define('mad/component/dropdown_menu', [
    'mad/component/menu',
    'mad/view/component/dropdown_menu',
    'mad/view/template/component/dropdown_menu/dropdown_menu.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var DropdownMenu = mad.component.DropdownMenu = mad.component.Menu.extend('mad.component.DropdownMenu', {
            'defaults': {
                'label': 'Drop Down Menu Component',
                'viewClass': mad.view.component.DropdownMenu,
                'templateUri': 'mad/view/template/component/tree.ejs',
                'itemTemplateUri': 'mad/view/template/component/dropdown_menu/dropdown_menu.ejs',
                'cssClasses': ['dropdownmenu'],
                'callbacks': {
                    'item_selected': null,
                    'item_right_selected': null,
                    'item_hovered': null
                }
            }
        }, {
            open: function (item) {
                this.view.open(item);
            },
            close: function (item) {
                this.view.close(item);
            },
            ' item_opened': function (el, ev, item) {
                this.open(item);
            },
            ' item_closed': function (el, ev, item) {
                this.close(item);
            }
        });
    var $__default = DropdownMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/component/contextual_menu*/
define('mad/view/component/contextual_menu', ['mad/view/component/dropdown_menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var ContextualMenu = mad.view.component.ContextualMenu = mad.view.component.DropdownMenu.extend('mad.view.component.ContextualMenu', {}, {
            '{document} click': function (el, ev) {
                if (!this.element.is(el) && !$(this.getController().options.source).is(ev.target)) {
                    this.element.remove();
                }
            }
        });
    var $__default = ContextualMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/component/contextual_menu*/
define('mad/component/contextual_menu', [
    'mad/component/dropdown_menu',
    'mad/view/component/contextual_menu'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var ContextualMenu = mad.component.ContextualMenu = mad.component.DropdownMenu.extend('mad.component.ContextualMenu', {
            'defaults': {
                'viewClass': mad.view.component.ContextualMenu,
                'cssClasses': ['contextual-menu'],
                'source': null,
                'coordinates': {
                    'x': null,
                    'y': null
                }
            }
        }, {
            init: function (el, options) {
                if (el == null || !el.length) {
                    if ($('#js_contextual_menu').length != 0) {
                        $('#js_contextual_menu').remove();
                    }
                    var $el = mad.helper.Html.create(mad.config.rootElement, 'first', '<ul id="js_contextual_menu" />');
                    this.setup($el);
                }
                this._super($el, options);
            },
            afterStart: function () {
                this._super();
                this.view.position({ 'coordinates': this.options.coordinates });
            },
            destroy: function () {
                this._super();
                $('#js_contextual_menu', $(mad.config.rootElement)).remove();
            }
        });
    var $__default = ContextualMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/choice_element*/
define('mad/form/choice_element', [
    'mad/form/element',
    'mad/view/form/element'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var ChoiceElement = mad.form.ChoiceElement = mad.form.Element.extend('mad.form.ChoiceElement', { defaults: { availableValues: {} } }, {
            beforeRender: function () {
                this._super();
                this.setViewData('availableValues', this.options.availableValues);
            }
        });
    var $__default = ChoiceElement;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/form/element/checkbox*/
define('mad/view/form/element/checkbox', ['mad/view/form/element'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Checkbox = mad.view.form.Checkbox = mad.view.form.Element.extend('mad.view.form.Checkbox', {}, {
            getValue: function () {
                var returnValue = [];
                this.element.find('input:checked').each(function () {
                    returnValue.push($(this).val());
                });
                return returnValue;
            },
            setValue: function (value) {
                value = typeof value != 'undefined' && value != null ? value : [];
                this.element.find('input').each(function () {
                    if (value.indexOf($(this).val()) != -1) {
                        $(this).attr('checked', true);
                        $(this)[0].checked = true;
                    } else {
                        $(this)[0].checked = false;
                        $(this).removeAttr('checked');
                    }
                });
            },
            'input click': function (el, ev) {
                ev.stopPropagation();
                if (el.is(':checked')) {
                    this.element.trigger('checked', el.val());
                } else {
                    this.element.trigger('unchecked', el.val());
                }
            },
            'input change': function (el, ev) {
                ev.stopPropagation();
                this.element.trigger('changed', { value: this.getValue() });
            }
        });
    var $__default = Checkbox;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/form/checkbox.ejs!lib/can/view/ejs/system*/
define('mad/view/template/form/checkbox.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_form_checkbox_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    for (var value in availableValues) {
                        var u = uuid();
                        ___v1ew.push('\n<div class="input checkbox">\n\t<input type="checkbox" value="');
                        ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                            return value;
                        }));
                        ___v1ew.push('" id="checkbox');
                        ___v1ew.push(can.view.txt(true, 'input', 'id', this, function () {
                            return u;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '/>');
                        ___v1ew.push('\n\t<label for="checkbox');
                        ___v1ew.push(can.view.txt(true, 'label', 'for', this, function () {
                            return u;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(0, 'label', 0, this, function () {
                            return availableValues[value];
                        }));
                        ___v1ew.push('</label>\n</div>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/form/element/checkbox*/
define('mad/form/element/checkbox', [
    'mad/form/choice_element',
    'mad/view/form/element/checkbox',
    'mad/view/template/form/checkbox.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Checkbox = mad.form.Checkbox = mad.form.ChoiceElement.extend('mad.form.Checkbox', {
            defaults: {
                label: 'Checkbox Form Element',
                tag: 'div',
                templateUri: 'mad/view/template/form/checkbox.ejs',
                templateBased: true,
                viewClass: mad.view.form.Checkbox
            }
        }, {});
    var $__default = Checkbox;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/tag*/
define('app/model/tag', [
    'mad/model/model',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Tag = passbolt.model.Tag = mad.Model.extend('passbolt.model.Tag', {
            validateRules: { name: ['text'] },
            attributes: {
                id: 'string',
                name: 'string',
                created: 'string',
                modified: 'string',
                created_by: 'string',
                modified_by: 'string'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'tags',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + '/tags/{id}',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'tags',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {});
    var $__default = Tag;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/item_tag*/
define('app/model/item_tag', [
    'mad/model/model',
    'app/model/tag',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var ItemTag = passbolt.model.ItemTag = mad.Model.extend('passbolt.model.ItemTag', {
            validateRules: {
                foreign_model: ['text'],
                foreign_id: ['uid'],
                tag_id: ['uid'],
                tag_list: ['tag_list']
            },
            attributes: {
                id: 'string',
                tag_id: 'string',
                foreign_model: 'string',
                foreign_id: 'string',
                created: 'string',
                modified: 'string',
                created_by: 'string',
                modified_by: 'string',
                Tag: 'passbolt.model.Tag.model'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'itemTags/' + attrs.foreign_model + '/' + attrs.foreign_id,
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            createBulk: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'itemTags/updateBulk/' + attrs.foreign_model + '/' + attrs.foreign_id,
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + '/itemTags/{id}',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'itemTags/{foreignModel}/{foreignId}',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {});
    var $__default = ItemTag;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/resource*/
define('app/model/resource', [
    'mad/model/model',
    'app/model/category',
    'app/model/secret',
    'app/model/item_tag',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var Resource = passbolt.model.Resource = mad.Model.extend('passbolt.model.Resource', {
            checkServerRules: true,
            attributes: {
                id: 'string',
                name: 'string',
                username: 'string',
                uri: 'string',
                created: 'string',
                modified: 'string',
                description: 'string',
                Category: 'passbolt.model.Category.models',
                Secret: 'passbolt.model.Secret.models',
                Favorite: 'passbolt.model.Favorite.model',
                ItemTag: 'passbolt.model.ItemTag.models',
                Creator: 'passbolt.model.User.model',
                Modifier: 'passbolt.model.User.model',
                UserResourcePermission: 'passbolt.model.UserResourcePermission.model',
                GroupResourcePermission: 'passbolt.model.GroupResourcePermission.model'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + '/resources',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + 'resources/{id}.json',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                if (typeof params.filter != 'undefined') {
                    var filer = params.filter;
                    delete params.filter;
                    var formatedFilter = filer.toRequest();
                    $.extend(params, formatedFilter);
                }
                return mad.net.Ajax.request({
                    url: APP_URL + 'resources.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'resources/{id}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            update: function (id, attrs, success, error) {
                var self = this;
                delete attrs.created;
                delete attrs.modified;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = id;
                return mad.net.Ajax.request({
                    url: APP_URL + 'resources/{id}.json',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            }
        }, {
            init: function () {
                var self = this;
                passbolt.model.Category.bind('destroyed', function (ev, category) {
                    var destroyedCategories = mad.Model.nestedToList(category, 'children', 'id');
                    var toUpdate = false;
                    can.each(self.Category, function (resourceCategory, i) {
                        if (destroyedCategories.indexOf(resourceCategory.id) != -1) {
                            self.Category.splice(i, 1);
                            toUpdate = true;
                        }
                    });
                    if (toUpdate) {
                        can.trigger(passbolt.model.Resource, 'updated', self);
                    }
                });
            },
            isFavorite: function () {
                if (this.Favorite && this.Favorite.id) {
                    return true;
                } else {
                    return false;
                }
            },
            destroy: function () {
                this._super();
            }
        });
    var $__default = Resource;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/favorite*/
define('app/model/favorite', [
    'mad/model/model',
    'app/model/category',
    'app/model/secret',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var Favorite = passbolt.model.Favorite = mad.Model.extend('passbolt.model.Favorite', {
            validateRules: {
                user_id: [],
                foreign_model: [],
                foreign_id: []
            },
            attributes: {
                id: 'string',
                user_id: 'string',
                foreign_model: 'string',
                foreign_id: 'string'
            },
            create: function (attrs, success, error) {
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + '/favorites/' + attrs['foreign_model'].toLowerCase() + '/' + attrs['foreign_id'],
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + '/favorites/' + id,
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {});
    var $__default = Favorite;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/favorite.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/favorite.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_favorite_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<a href="#" class="no-text">\n\t<i class="icon ');
                ___v1ew.push(can.view.txt(true, 'i', 'class', this, function () {
                    return instance.isFavorite() ? 'unfav' : 'fav';
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</i>\n\t<span>fav</span>\n</a>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/favorite*/
define('app/view/component/favorite', [
    'mad/view/view',
    'app/view/template/component/favorite.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Favorite = passbolt.view.component.Favorite = mad.View.extend('passbolt.view.component.Favorite', {}, {
            ' click': function (el, ev) {
                this.element.trigger('trigger');
            }
        });
    return {};
});
/*app/component/favorite*/
define('app/component/favorite', [
    'mad/component/button',
    'app/view/component/favorite',
    'app/view/template/component/favorite.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Favorite = passbolt.component.Favorite = mad.Component.extend('passbolt.component.Favorite', {
            'defaults': {
                'label': 'Favorite',
                'viewClass': passbolt.view.component.Favorite,
                'instance': null,
                templateUri: 'app/view/template/component/favorite.ejs'
            }
        }, {
            init: function (el, options) {
                this._super(el, options);
                this.setViewData('instance', this.options.instance);
            },
            click: function (el, ev) {
                var self = this;
                ev.preventDefault();
                ev.stopPropagation();
                if (this.state.is('loading')) {
                    return;
                }
                this.setState('loading');
                if (!this.options.instance.isFavorite()) {
                    mad.bus.triggerRequest('request_favorite', this.options.instance).then(function () {
                    }).fail(function () {
                        self.setState('ready');
                    });
                } else {
                    mad.bus.triggerRequest('request_unfavorite', this.options.instance).then(function () {
                    }).fail(function (jqXHR, status, response, request) {
                        self.setState('ready');
                    });
                }
            }
        });
    var $__default = Favorite;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/resource/dragged_resource.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/resource/dragged_resource.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_resource_dragged_resource_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dragged_resource" id="js_dragged_resource">\n\tMove \'<span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return name;
                }));
                ___v1ew.push('</span>\'\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/password_browser*/
define('app/view/component/password_browser', [
    'mad/view/component/grid',
    'app/view/template/component/resource/dragged_resource.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var PasswordBrowser = passbolt.view.component.PasswordBrowser = mad.view.component.Grid.extend('passbolt.view.component.PasswordBrowser', {}, {
            'insertItem': function (item, refItemId, position) {
                var $row = this._super(item, refItemId, position);
                var $name = $('.js_grid_column_name', $row);
            },
            'tbody tr td.password a click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null, tr = $(el).parents('tr');
                if (this.getController().getItemClass()) {
                    data = tr.data(this.getController().getItemClass().fullName);
                } else {
                    data = tr[0].id;
                }
                this.element.trigger('password_clicked', [
                    data,
                    ev
                ]);
            },
            'tbody tr contextmenu': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            },
            'tbody tr mousedown': function (el, ev) {
                var self = this;
                ev.stopPropagation();
                ev.preventDefault();
                if (ev.which == 3) {
                    var data = null, tr = el;
                    if (this.getController().getItemClass()) {
                        data = tr.data(this.getController().getItemClass().fullName);
                    } else {
                        data = tr[0].id;
                    }
                    setTimeout(function () {
                        self.element.trigger('item_right_selected', [
                            data,
                            ev
                        ]);
                    }, 0);
                }
                return false;
            }
        });
    var $__default = PasswordBrowser;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/password_browser*/
define('app/component/password_browser', [
    'moment',
    'mad/component/grid',
    'mad/component/contextual_menu',
    'mad/form/element/checkbox',
    'app/model/resource',
    'app/model/category',
    'app/model/favorite',
    'app/component/favorite',
    'app/view/component/password_browser'
], function ($__0, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    var moment = $__0.default;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    var PasswordBrowser = passbolt.component.PasswordBrowser = mad.component.Grid.extend('passbolt.component.PasswordBrowser', {
            defaults: {
                itemClass: passbolt.model.Resource,
                viewClass: passbolt.view.component.PasswordBrowser,
                resources: new can.Model.List(),
                categories: [],
                selectedRs: new can.Model.List(),
                prefixItemId: 'resource_',
                silentLoading: false
            }
        }, {
            init: function (el, options) {
                options.map = new mad.Map({
                    id: 'id',
                    name: 'name',
                    username: 'username',
                    secret: 'Secret',
                    uri: 'uri',
                    modified: 'modified',
                    owner: 'Creator.username',
                    Category: 'Category'
                });
                options.columnModel = [
                    {
                        name: 'multipleSelect',
                        index: 'multipleSelect',
                        header: {
                            css: ['selections s-cell'],
                            label: '<div class="input checkbox">' + '<input type="checkbox" name="select all" value="checkbox-select-all" id="checkbox-select-all" disabled="disabled">' + '<label for="checkbox-select-all">select all</label> \t\t\t\t\t</div>'
                        },
                        cellAdapter: function (cellElement, cellValue, mappedItem, item, columnModel) {
                            var availableValues = {};
                            availableValues[item.id] = '';
                            var checkbox = mad.helper.Component.create(cellElement, 'inside_replace', mad.form.Checkbox, {
                                    id: 'multiple_select_checkbox_' + item.id,
                                    name: 'test',
                                    cssClasses: ['js_checkbox_multiple_select'],
                                    availableValues: availableValues
                                });
                            checkbox.start();
                        }
                    },
                    {
                        name: 'favorite',
                        index: 'favorite',
                        header: {
                            css: ['selections s-cell'],
                            label: '<a href="#"> \t\t\t\t\t\t<i class="icon fav no-text"></i> \t\t\t\t\t\t<span>fav</span> \t\t\t\t\t</a>'
                        },
                        cellAdapter: function (cellElement, cellValue, mappedItem, item, columnModel) {
                            var availableValues = {};
                            availableValues[item.id] = '';
                            var favorite = mad.helper.Component.create(cellElement, 'inside_replace', passbolt.component.Favorite, {
                                    id: 'favorite_' + item.id,
                                    name: 'test2',
                                    instance: item
                                });
                            favorite.start();
                        }
                    },
                    {
                        name: 'name',
                        index: 'name',
                        header: {
                            css: ['m-cell'],
                            label: __('Resource')
                        }
                    },
                    {
                        name: 'username',
                        index: 'username',
                        header: {
                            css: ['m-cell'],
                            label: __('Username')
                        }
                    },
                    {
                        name: 'secret',
                        index: 'secret',
                        header: {
                            css: [
                                'm-cell',
                                'password'
                            ],
                            label: __('Password')
                        },
                        cellAdapter: function (cellElement, cellValue, mappedItem, item, columnModel) {
                            var secret = '';
                            if (typeof cellValue[0] != 'undefined') {
                                secret = cellValue[0].data;
                            }
                            mad.helper.Html.create(cellElement, 'inside_replace', '<div class="secret-copy">' + '<a id="grid_secret_copy_' + item.id + '" href="#copy_secret">' + '<span>copy password to clipboard</span>' + '</a>' + '<pre>' + secret + '</pre>' + '</div>');
                        }
                    },
                    {
                        name: 'uri',
                        index: 'uri',
                        header: {
                            css: ['l-cell'],
                            label: __('URI')
                        }
                    },
                    {
                        name: 'modified',
                        index: 'modified',
                        header: {
                            css: ['m-cell'],
                            label: __('Modified')
                        },
                        valueAdapter: function (value, mappedItem, item, columnModel) {
                            return moment(value).fromNow();
                        }
                    },
                    {
                        name: 'owner',
                        index: 'owner',
                        header: {
                            css: ['m-cell'],
                            label: __('Owner')
                        }
                    }
                ];
                this._super(el, options);
            },
            showContextualMenu: function (item, x, y, eventTarget) {
                var $item = $('#' + this.options.prefixItemId + item.id);
                var item_offset = $item.offset();
                var contextualMenu = new mad.component.ContextualMenu(null, {
                        state: 'hidden',
                        source: eventTarget,
                        coordinates: {
                            x: x,
                            y: item_offset.top
                        }
                    });
                contextualMenu.start();
                var canRead = passbolt.model.Permission.isAllowedTo(item, passbolt.READ), canUpdate = passbolt.model.Permission.isAllowedTo(item, passbolt.UPDATE), canAdmin = passbolt.model.Permission.isAllowedTo(item, passbolt.ADMIN);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_copy_username',
                        label: 'Copy username',
                        initial_state: !canRead ? 'disabled' : 'ready',
                        action: function (menu) {
                            var data = {
                                    name: 'username',
                                    data: item.username
                                };
                            mad.bus.trigger('passbolt.clipboard', data);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_copy_password',
                        label: 'Copy password',
                        initial_state: !canRead ? 'disabled' : 'ready',
                        action: function (menu) {
                            var secret = item.Secret[0].data;
                            mad.bus.trigger('passbolt.secret.decrypt', secret);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_copy_uri',
                        label: 'Copy URI',
                        initial_state: !canRead ? 'disabled' : 'ready',
                        action: function (menu) {
                            var data = {
                                    name: 'URL',
                                    data: item.uri
                                };
                            mad.bus.trigger('passbolt.clipboard', data);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_open_uri',
                        label: 'Open URI in a new tab',
                        initial_state: !canRead ? 'disabled' : 'ready',
                        cssClasses: ['separator-after'],
                        action: function (menu) {
                            var uri = item.uri;
                            var win = window.open(uri, '_blank');
                            win.focus();
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_edit',
                        label: 'Edit',
                        initial_state: !canUpdate ? 'disabled' : 'ready',
                        action: function (menu) {
                            mad.bus.trigger('request_resource_edition', item);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_share',
                        label: 'Share',
                        initial_state: !canAdmin ? 'disabled' : 'ready',
                        action: function (menu) {
                            mad.bus.trigger('request_resource_sharing', item);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: 'js_password_browser_menu_delete',
                        label: 'Delete',
                        initial_state: !canUpdate ? 'disabled' : 'ready',
                        action: function (menu) {
                            mad.bus.trigger('request_resource_deletion', item);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                contextualMenu.setState('ready');
            },
            insertItem: function (resource, refResourceId, position) {
                this.options.resources.push(resource);
                this._super(resource, refResourceId, position);
            },
            removeItem: function (item) {
                this._super(item);
            },
            refreshItem: function (resource) {
                var self = this;
                if (this.options.categories.length) {
                    var belongToDisplayedCat = false;
                    can.each(resource.Category, function (resourceCategory, i) {
                        if (self.options.categories.indexOf(resourceCategory.id) != -1) {
                            belongToDisplayedCat = true;
                        }
                    });
                    if (!belongToDisplayedCat) {
                        this.removeItem(resource);
                        return;
                    }
                }
                this._super(resource);
                if (this.options.selectedRs.length > 0) {
                    this.select(this.options.selectedRs[0]);
                }
            },
            reset: function () {
                this.options.resources.splice(0, this.options.resources.length);
            },
            load: function (resources) {
                this._super(resources);
            },
            beforeSelect: function (item) {
                var self = this, returnValue = true;
                if (this.state.is('selection')) {
                    if (this.options.selectedRs.length > 0 && this.options.selectedRs[0].id == item.id) {
                        this.unselect(item);
                        this.setState('ready');
                        returnValue = false;
                    } else {
                        for (var i = this.options.selectedRs.length - 1; i > -1; i--) {
                            this.unselect(this.options.selectedRs[i]);
                        }
                    }
                }
                return returnValue;
            },
            beforeUnselect: function (item) {
                var returnValue = true;
                return returnValue;
            },
            select: function (item, silent) {
                silent = typeof silent == 'undefined' ? false : silent;
                if (!this.state.is('multipleSelection') && this.options.selectedRs.length > 0) {
                    this.unselect(this.options.selectedRs[0]);
                }
                this.options.selectedRs.push(item);
                var id = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(id, 'mad.form.Checkbox');
                checkbox.setValue([item.id]);
                this.view.selectItem(item);
                if (!silent) {
                    mad.bus.trigger('resource_selected', item);
                }
            },
            unselect: function (item, silent) {
                silent = typeof silent == 'undefined' ? false : silent;
                var id = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(id, 'mad.form.Checkbox');
                checkbox.reset();
                this.view.unselectItem(item);
                mad.model.List.remove(this.options.selectedRs, item);
                if (!silent) {
                    mad.bus.trigger('resource_unselected', item);
                }
            },
            '{passbolt.model.Resource} created': function (model, ev, resource) {
                var self = this;
                if (resource.Category.length) {
                    resource.Category.each(function (category, i) {
                        if (self.options.categories.indexOf(category.id) != -1) {
                            self.insertItem(resource, null, 'first');
                            return false;
                        }
                    });
                } else {
                    self.insertItem(resource, null, 'first');
                }
            },
            '{passbolt.model.Resource} updated': function (model, ev, resource) {
                if (this.options.resources.indexOf(resource) != -1) {
                    this.refreshItem(resource);
                }
            },
            '{resources} remove': function (model, ev, resources) {
                var self = this;
                can.each(resources, function (resource, i) {
                    self.removeItem(resource);
                });
            },
            '{passbolt.model.Category} destroyed': function (model, ev, category) {
                var self = this;
                var destroyedCategories = mad.model.Model.nestedToList(category, 'children');
                var destroyedCategoriesIds = [];
                can.each(destroyedCategories, function (destroyedCategory, h) {
                    var indexof = self.options.categories.indexOf(destroyedCategory.id);
                    if (indexof != -1) {
                        self.options.categories.splice(indexof, 1);
                    }
                });
            },
            ' item_selected': function (el, ev, item, srcEvent) {
                this.setState('selection');
                if (this.beforeSelect(item)) {
                    this.select(item);
                }
            },
            ' item_right_selected': function (el, ev, item, srcEvent) {
                this.select(item);
                this.showContextualMenu(item, srcEvent.pageX, srcEvent.pageY, srcEvent.target);
            },
            ' password_clicked': function (el, ev, item, srcEvent) {
                var secret = item.Secret[0].data;
                mad.bus.trigger('passbolt.secret.decrypt', secret);
            },
            '.js_checkbox_multiple_select checked': function (el, ev, rsId) {
                var self = this;
                if (this.state.is('ready')) {
                    this.setState('selection');
                } else if (this.state.is('selection')) {
                    this.setState('multipleSelection');
                }
                var i = mad.model.List.indexOf(this.options.resources, rsId);
                var resource = this.options.resources[i];
                if (this.beforeSelect(resource)) {
                    this.select(resource);
                }
            },
            '.js_checkbox_multiple_select unchecked': function (el, ev, rsId) {
                var self = this;
                var i = mad.model.List.indexOf(this.options.resources, rsId);
                var resource = this.options.resources[i];
                if (this.beforeUnselect()) {
                    self.unselect(resource);
                }
                if (!this.options.selectedRs.length) {
                    this.setState('ready');
                } else if (this.options.selectedRs.length == 1) {
                    this.setState('selection');
                }
            },
            '{mad.bus.element} filter_resources_browser': function (element, evt, filter) {
                if (!this.element)
                    return;
                var self = this;
                this.filter = filter;
                this.options.categories = [];
                var filteredCategory = filter.getForeignModels('Category');
                if (filteredCategory) {
                    can.each(filteredCategory, function (category, i) {
                        var subCategories = category.getSubCategories(true);
                        can.each(subCategories, function (subCategory, i) {
                            self.options.categories.push(subCategory.id);
                        });
                    });
                }
                this.setState('loading');
                passbolt.model.Resource.findAll({
                    filter: this.filter,
                    recursive: true,
                    silentLoading: false
                }, function (resources, response, request) {
                    self.load(resources);
                    self.setState('ready');
                });
            },
            stateReady: function (go) {
            },
            stateSelection: function (go) {
            },
            stateMultipleSelection: function (go) {
            }
        });
    var $__default = PasswordBrowser;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/form/element/autocomplete*/
define('mad/form/element/autocomplete', [
    'mad/form/choice_element',
    'mad/view/form/element/textbox'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Autocomplete = mad.form.Autocomplete = mad.form.Textbox.extend('mad.form.Autocomplete', {
            defaults: {
                label: 'Autocomplete Form Element Controller',
                tag: 'input',
                list: null
            }
        }, {
            afterStart: function () {
                var listOpts = {
                        itemClass: mad.model.Model,
                        cssClasses: ['autocomplete-content'],
                        templateUri: 'mad/view/template/component/tree.ejs',
                        state: 'hidden',
                        map: new mad.Map({
                            id: 'id',
                            label: 'label',
                            model: 'model'
                        })
                    };
                this.options.list = mad.helper.Component.create(this.element, 'after', mad.component.Tree, listOpts);
                this.options.list.start();
                this.on();
            },
            changed: function (el, ev, data) {
                var self = this;
                if (this.options.callbacks.ajax) {
                    this.options.callbacks.ajax.apply(this, [data.value]).done(function (ajaxData) {
                        self.options.list.reset();
                        self.options.list.load(ajaxData);
                        self.options.list.setState('ready');
                    });
                }
            },
            '{list} item_selected': function (el, ev, data) {
                this.setValue(data.label);
                this.options.list.setState('hidden');
                this.element.trigger('item_selected', [
                    data,
                    ev
                ]);
            }
        });
    var $__default = Autocomplete;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/form/element/dropdown*/
define('mad/view/form/element/dropdown', ['mad/view/form/element'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Dropdown = mad.view.form.Dropdown = mad.view.form.Element.extend('mad.view.form.Dropdown', {}, {
            getValue: function (value) {
                return this.element.val();
            },
            setValue: function (value) {
                this.element.val(value);
            },
            change: function (el, event) {
                el.trigger('changed', { value: this.getValue() });
            }
        });
    var $__default = Dropdown;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/view/template/form/dropdown.ejs!lib/can/view/ejs/system*/
define('mad/view/template/form/dropdown.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('mad_view_template_form_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (controller.options.emptyValue) {
                        ___v1ew.push('\n<option value=""', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(0, 'option', 0, this, function () {
                            return __('select a value');
                        }));
                        ___v1ew.push('</option>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    for (var value in availableValues) {
                        ___v1ew.push('\n<option value="');
                        ___v1ew.push(can.view.txt(true, 'option', 'value', this, function () {
                            return value;
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push(can.view.txt(0, 'option', 0, this, function () {
                            return availableValues[value];
                        }));
                        ___v1ew.push('</option>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*mad/form/element/dropdown*/
define('mad/form/element/dropdown', [
    'mad/form/choice_element',
    'mad/view/form/element/dropdown',
    'mad/view/template/form/dropdown.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Dropdown = mad.form.Dropdown = mad.form.ChoiceElement.extend('mad.form.Dropdown', {
            defaults: {
                label: 'DropDown Form Element',
                tag: 'div',
                templateUri: 'mad/view/template/form/dropdown.ejs',
                templateBased: true,
                viewClass: mad.view.form.Dropdown,
                emptyValue: true
            }
        }, {});
    var $__default = Dropdown;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/permissions.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/permissions.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permissions_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content permission-edit">\n    <ul id="js_permissions_list" class="permissions scroll">\n    </ul>\n</div>\n<div id="js_permissions_changes" class="warning message hidden">\n    <span>You need to save to apply the changes.</span>\n</div>\n<div class="form-content permission-add">\n    <form id="js_permission_add_form">\n    </form>\n</div>\n<div class="submit-wrapper clearfix">\n    <input id="js_rs_share_save" type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a href="#" class="js-dialog-cancel cancel">cancel</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/permissions*/
define('app/view/component/permissions', [
    'mad/view/view',
    'app/view/template/component/permissions.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Permissions = passbolt.view.component.Permissions = mad.View.extend('passbolt.view.component.Permissions', { defaults: {} }, {
            ' .js_perm_delete click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var li = el.parents('li');
                var permission = li.data('passbolt.model.Permission');
                this.element.trigger('request_permission_delete', [permission]);
            },
            '.js_share_rs_perm_type changed': function (el, ev, data) {
                ev.stopPropagation();
                ev.preventDefault();
                var li = el.parents('li'), permission = li.data('passbolt.model.Permission');
                this.element.trigger('request_permission_edit', [
                    permission,
                    data.value
                ]);
            },
            '#js_perm_create_form_add_btn click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                el.trigger('submit');
            }
        });
    return {};
});
/*app/model/group*/
define('app/model/group', [
    'mad/model/model',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Group = passbolt.model.Group = mad.Model.extend('passbolt.model.Group', {
            validateRules: {
                name: [
                    'alphanum',
                    'required'
                ]
            },
            attributes: {
                id: 'string',
                name: 'string'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'groups.json',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + '/groups',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            update: function (id, attrs, success, error) {
                var self = this;
                delete attrs.created;
                delete attrs.modified;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                params.id = id;
                return mad.net.Ajax.request({
                    url: APP_URL + 'groups/{id}.json',
                    type: 'PUT',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + 'groups/{id}',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {});
    var $__default = Group;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/permission/add.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/permission/add.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_permission_add_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<input id="js_perm_create_form_aro" type="hidden" />\n<div class="input text autocomplete">\n\t<label for="js_perm_create_form_aro_auto_cplt">Share with people</label>\n\t<input maxlength="50" type="text" id="js_perm_create_form_aro_auto_cplt" placeholder="');
                __('start typing a person name');
                ;
                ___v1ew.push('" autocomplete="off"', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n</div>\n<div class="select left perm-type">\n\t<select id="js_perm_create_form_type" class="permission">\n\t</select>\n</div>\n<div class="actions">\n    <input id="js_perm_create_form_add_btn" type="submit" class="button primary" value="add"/>\n</div>\n<div class="input blank">\n\t<div id="js_perm_create_form_feedback" class="message"></div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/permission/permission_list_item.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/permission/permission_list_item.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_permission_permission_list_item_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                if (mappedItem.isDirect) {
                    cssClasses.push('direct-permission');
                } else {
                    cssClasses.push('inherited-permission');
                }
                var availablePermissionTypes = {};
                for (var permType in passbolt.model.PermissionType.PERMISSION_TYPES) {
                    availablePermissionTypes[permType] = passbolt.model.PermissionType.formatToString(permType);
                }
                ;
                ;
                ___v1ew.push('\n<li id="');
                ___v1ew.push(can.view.txt(true, 'li', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" ');
                ___v1ew.push(can.view.txt(1, 'li', 1, this, function () {
                    return can.proxy(function (__) {
                        var el = can.$(__);
                        el.data(itemClass.fullName, item);
                    }, this);
                }));
                ___v1ew.push(' class="row ');
                ___v1ew.push(can.view.txt(true, 'li', 'class', this, function () {
                    return cssClasses.join(' ');
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <div class="avatar">\n        <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(mappedItem.aroAvatarPath);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    </div>\n    <div class="group">\n        <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return mappedItem.acoLabel;
                }));
                ___v1ew.push('</span>\n        <span class="details"><a href="#">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return mappedItem.acoDetails;
                }));
                ___v1ew.push('</a></span>\n    </div>\n    <div class="select rights">\n        <form id="js_share_rs_perm_');
                ___v1ew.push(can.view.txt(true, 'form', 'id', this, function () {
                    return mappedItem.id;
                }));
                ___v1ew.push('" class="js_perm_edit_form"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n            <select class="js_share_rs_perm_type permission">\n            </select>\n        </form>\n    </div>\n    <div class="actions">\n        ');
                ___v1ew.push(can.view.txt(0, 'div', 0, this, function () {
                    var ___v1ew = [];
                    if (mappedItem.isDirect) {
                        ___v1ew.push('\n        <a href="#" class="js_perm_delete close" title="');
                        ___v1ew.push(can.view.txt(true, 'a', 'title', this, function () {
                            return __('remove');
                        }));
                        ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                        ___v1ew.push('\n            <i class="icon close no-text"></i>\n            <span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('remove');
                        }));
                        ___v1ew.push('</span>\n        </a>\n        ');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n    </div>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/permissions*/
define('app/component/permissions', [
    'mad/component/component',
    'mad/form/form',
    'mad/form/feedback',
    'mad/form/element/autocomplete',
    'mad/form/element/dropdown',
    'mad/form/element/checkbox',
    'mad/form/element/textbox',
    'app/view/component/permissions',
    'app/model/group',
    'app/model/user',
    'app/model/permission',
    'app/model/permission_type',
    'app/view/template/component/permissions.ejs!',
    'app/view/template/form/permission/add.ejs!',
    'app/view/template/component/permission/permission_list_item.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9, $__10, $__11, $__12, $__13, $__14) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    if (!$__13 || !$__13.__esModule)
        $__13 = { default: $__13 };
    if (!$__14 || !$__14.__esModule)
        $__14 = { default: $__14 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    $__13;
    $__14;
    var Permissions = passbolt.component.Permissions = mad.Component.extend('passbolt.component.Permissions', {
            defaults: {
                label: 'Permissions Controller',
                viewClass: passbolt.view.component.Permissions,
                acoInstance: null,
                permAroAutocpltTxtbx: null,
                permAroAutocpltList: null,
                changes: [],
                templateUri: 'app/view/template/component/permissions.ejs'
            }
        }, {
            afterStart: function () {
                var self = this;
                this.permList = new mad.component.Tree($('#js_permissions_list'), {
                    cssClasses: ['permissions'],
                    viewClass: mad.view.component.Tree,
                    itemClass: passbolt.model.Permission,
                    templateUri: 'mad/view/template/component/tree.ejs',
                    itemTemplateUri: 'app/view/template/component/permission/permission_list_item.ejs',
                    map: new mad.Map({
                        id: 'id',
                        isDirect: {
                            key: 'aro_foreign_key',
                            func: function (aro_foreign_key, map, obj) {
                                return obj.isDirect(self.options.acoInstance);
                            }
                        },
                        aroLabel: {
                            key: 'aro',
                            func: function (aro, map, obj) {
                                return aro.toLowerCase();
                            }
                        },
                        aroAvatarPath: {
                            key: 'id',
                            func: function (user, map, obj) {
                                if (obj.aro == 'User') {
                                    return obj.User.Profile.avatarPath('small');
                                } else {
                                    return 'img/group_default.png';
                                }
                            }
                        },
                        permType: 'PermissionType.serial',
                        permLabel: {
                            key: 'type',
                            func: function (type, map, obj) {
                                return passbolt.model.PermissionType.formatToString(type);
                            }
                        },
                        acoLabel: {
                            key: 'aco_foreign_key',
                            func: function (aco_foreign_key, map, obj) {
                                switch (obj.aro) {
                                case 'Group':
                                    return obj['Group'].name;
                                    break;
                                case 'User':
                                    return obj['User']['Profile'].first_name + ' ' + obj['User']['Profile'].last_name;
                                    break;
                                }
                            }
                        },
                        acoDetails: {
                            key: 'aco_foreign_key',
                            func: function (aco_foreign_key, map, obj) {
                                switch (obj.aro) {
                                case 'Group':
                                    return __('group');
                                    break;
                                case 'User':
                                    return obj['User'].username;
                                    break;
                                }
                            }
                        }
                    })
                });
                this.permList.start();
                this.addFormController = new mad.Form($('#js_permission_add_form', this.element), {
                    templateBased: true,
                    cssClasses: [
                        'perm-create-form',
                        'clearfix'
                    ],
                    templateUri: 'app/view/template/form/permission/add.ejs',
                    validateOnChange: false,
                    callbacks: {
                        submit: function (data) {
                            self.formAddPermissionSubmit(data);
                        }
                    }
                });
                this.addFormController.start();
                var permCreateFormFeedback = new mad.form.Feedback($('#js_perm_create_form_feedback'), {}).start();
                this.permAroHiddenTxtbx = new mad.form.Textbox($('#js_perm_create_form_aro', this.element), { modelReference: 'passbolt.model.Permission.aro_foreign_key' }).start();
                this.addFormController.addElement(this.permAroHiddenTxtbx);
                this.options.permAroAutocpltTxtbx = new mad.form.Autocomplete($('#js_perm_create_form_aro_auto_cplt', this.element), {
                    modelReference: 'passbolt.model.Permission.aro_foreign_label',
                    changeTimeout: 400,
                    callbacks: {
                        ajax: function (value) {
                            return self.autocompleteAro(value);
                        }
                    }
                }).start();
                this.addFormController.addElement(this.options.permAroAutocpltTxtbx, permCreateFormFeedback);
                var availablePermissionTypes = {};
                for (var permType in passbolt.model.PermissionType.PERMISSION_TYPES) {
                    availablePermissionTypes[permType] = passbolt.model.PermissionType.formatToString(permType);
                }
                var permTypeCtl = new mad.form.Dropdown($('#js_perm_create_form_type', this.element), {
                        emptyValue: false,
                        modelReference: 'passbolt.model.Permission.type',
                        availableValues: availablePermissionTypes
                    }).start();
                this.addFormController.addElement(permTypeCtl, permCreateFormFeedback);
                this.on();
            },
            autocompleteAro: function (value) {
                var request = passbolt.model.User.findAll({ keywords: value }).then(function (users) {
                        var returnValue = [];
                        var currentUser = passbolt.model.User.getCurrent();
                        users.each(function (user, i) {
                            if (user.id == currentUser.id)
                                return;
                            returnValue.push(new mad.model.Model({
                                id: user.id,
                                label: user.username,
                                model: 'passbolt.model.User',
                                user: user
                            }));
                        });
                        return returnValue;
                    });
                return request;
            },
            loadPermission: function (permission) {
                var permSelector = '#js_share_rs_perm_' + permission.id, availablePermissionTypes = {};
                for (var permType in passbolt.model.PermissionType.PERMISSION_TYPES) {
                    availablePermissionTypes[permType] = passbolt.model.PermissionType.formatToString(permType);
                }
                this.permList.insertItem(permission);
                new mad.form.Dropdown($('.js_share_rs_perm_type', permSelector), {
                    emptyValue: false,
                    modelReference: 'passbolt.model.Permission.type',
                    availableValues: availablePermissionTypes
                }).start().setValue(permission.type);
            },
            load: function (obj) {
                var self = this;
                this.options.acoInstance = obj;
                this.options.changes = {};
                self.addFormController.load(this.options.acoInstance);
                passbolt.model.Permission.findAll({
                    aco: this.options.acoInstance.constructor.shortName,
                    aco_foreign_key: this.options.acoInstance.id
                }, function (permissions, response, request) {
                    for (var i = 0; i < permissions.length; i++) {
                        self.loadPermission(permissions[i]);
                    }
                });
            },
            refresh: function () {
                this.permList.reset();
                this.load(this.options.acoInstance);
                $('#js_permissions_changes').addClass('hidden');
            },
            '{mad.bus.element} resource_share_secret_encrypted': function (el, ev, armoreds) {
                if (!this.element)
                    return;
                var self = this;
                if (!this.element)
                    return;
                this.save(armoreds);
            },
            permissionChange: function (id, data) {
                if (this.options.changes[id] !== undefined && data['delete'] !== undefined && data['delete']) {
                    delete this.options.changes[id];
                    if (!this.options.changes.length) {
                        $('#js_permissions_changes').addClass('hidden');
                    }
                } else {
                    this.options.changes[id] = { Permission: data };
                    if (($permissionChanges = $('#js_permissions_changes.hidden')).length) {
                        $permissionChanges.removeClass('hidden');
                    }
                }
            },
            formAddPermissionSubmit: function (formData) {
                var self = this, fieldAttrs = mad.model.Model.getModelAttributes(this.permAroHiddenTxtbx.getModelReference()), modelAttr = fieldAttrs[0];
                var userId = formData[modelAttr.modelReference.fullName].id;
                passbolt.model.User.findOne({
                    id: userId,
                    async: false
                }).then(function (u) {
                    user = u;
                });
                var tmpPermissionId = uuid();
                var permission = new passbolt.model.Permission({
                        id: tmpPermissionId,
                        isNew: true,
                        aco: this.options.acoInstance.constructor.shortName,
                        aco_foreign_key: this.options.acoInstance.id,
                        aro: modelAttr.modelReference.shortName,
                        aro_foreign_key: formData[modelAttr.modelReference.fullName].id,
                        type: formData['passbolt.model.Permission'].type,
                        User: user
                    });
                this.loadPermission(permission);
                this.permissionChange(tmpPermissionId, {
                    isNew: true,
                    aro: modelAttr.modelReference.shortName,
                    aro_foreign_key: formData[modelAttr.modelReference.fullName].id,
                    type: formData['passbolt.model.Permission'].type
                });
                this.addFormController.reset();
            },
            save: function (armoreds) {
                var self = this, data = {}, aco = this.options.acoInstance.constructor.shortName, acoForeignKey = this.options.acoInstance.id;
                data.Permissions = [];
                for (var i in this.options.changes) {
                    data.Permissions.push(this.options.changes[i]);
                }
                if (armoreds) {
                    data.Secrets = [];
                    for (var userId in armoreds) {
                        data.Secrets.push({
                            Secret: {
                                resource_id: acoForeignKey,
                                user_id: userId,
                                data: armoreds[userId]
                            }
                        });
                    }
                }
                passbolt.model.Permission.share(aco, acoForeignKey, data).then(function () {
                    self.refresh();
                });
            },
            request_permission_delete: function (el, ev, permission) {
                this.permissionChange(permission.id, {
                    'id': permission.id,
                    'delete': 1
                });
                this.permList.removeItem(permission);
            },
            '{permAroAutocpltTxtbx} changed': function (el, ev, data) {
                this.permAroHiddenTxtbx.setValue(null);
            },
            '{permAroAutocpltTxtbx} item_selected': function (el, ev, data) {
                this.permAroHiddenTxtbx.setModelReference(data.model + '.id');
                this.permAroHiddenTxtbx.setValue(data.id);
            },
            request_permission_edit: function (el, ev, permission, type) {
                this.permissionChange(permission.id, {
                    id: permission.id,
                    type: type
                });
            },
            '.js_perm_goto click': function (el, ev) {
                var li = el.parents('li'), permission = li.data('passbolt.model.Permission');
                switch (permission.aco) {
                case 'Category':
                    var i = mad.model.List.indexOf(passbolt.model.Category.madStore, permission.Category.id);
                    var category = passbolt.model.Category.madStore[i];
                    mad.bus.trigger('request_category_sharing', category);
                    break;
                }
            },
            '#js_rs_share_save click': function (el, ev) {
                var aco = this.options.acoInstance.constructor.shortName, acoForeignKey = this.options.acoInstance.id, usersIds = [];
                for (var i in this.options.changes) {
                    if (typeof this.options.changes[i].Permission.isNew != 'undefined' && this.options.changes[i].Permission.isNew) {
                        usersIds.push(this.options.changes[i].Permission.aro_foreign_key);
                    }
                }
                if (usersIds.length) {
                    mad.bus.trigger('passbolt.resource_share.encrypt', {
                        resourceId: acoForeignKey,
                        usersIds: usersIds
                    });
                } else {
                    this.save();
                }
            }
        });
    var $__default = Permissions;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/resource_actions_tab*/
define('app/component/resource_actions_tab', [
    'mad/component/tab',
    'app/component/permissions'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var ResourceActionsTab = passbolt.component.ResourceActionsTab = mad.component.Tab.extend('passbolt.component.ResourceActionsTab', {
            defaults: {
                label: null,
                resource: null,
                cssClasses: ['tabs'],
                viewClass: mad.view.component.Tab,
                templateUri: 'mad/view/template/component/tab/tab.ejs'
            }
        }, {
            afterStart: function () {
                this._super();
                var self = this;
                var editFormCtl = this.addComponent(passbolt.form.resource.Create, {
                        id: 'js_rs_edit',
                        label: __('Edit'),
                        action: 'edit',
                        data: this.options.resource,
                        callbacks: {
                            submit: function (data) {
                                self.options.resource.attr(data['passbolt.model.Resource']).save();
                                self.closest(mad.component.Dialog).remove();
                            }
                        }
                    });
                editFormCtl.start();
                editFormCtl.load(this.options.resource);
                var permCtl = this.addComponent(passbolt.component.Permissions, {
                        id: 'js_rs_permission',
                        label: 'Share',
                        resource: this.options.resources,
                        cssClasses: ['share-tab']
                    });
                permCtl.start();
                permCtl.load(this.options.resource);
            },
            load: function (resource) {
                return;
                this.options.resource = resource;
                this.setViewData('resource', resource);
                this.refresh();
            },
            enableTab: function (tabId) {
                this._super(tabId);
                var enabledTabCtl = this.getComponent(this.enabledTabId);
                var label = enabledTabCtl.options.label + '<span class="dialog-header-subtitle">' + this.options.resource.name + '</span>';
                this.closest(mad.component.Dialog).setTitle(label);
            }
        });
    var $__default = ResourceActionsTab;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/resource_details*/
define('app/view/component/resource_details', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var ResourceDetails = passbolt.view.component.ResourceDetails = mad.View.extend('passbolt.view.component.ResourceDetails', {}, {
            '.icon.close click': function (el, ev) {
                mad.Config.write('ui.workspace.showSidebar', false);
                mad.bus.trigger('workspace_showSidebar', false);
            },
            'h2 click': function (el, ev) {
                el.next('p').toggle();
            },
            'li.password .secret-copy > a click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                this.element.trigger('password_clicked', [ev]);
            }
        });
    var $__default = ResourceDetails;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/comment*/
define('app/model/comment', [
    'mad/model/model',
    'mad/model/serializer/cake_serializer'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Comment = passbolt.model.Comment = mad.Model.extend('passbolt.model.Comment', {
            checkServerRules: true,
            attributes: {
                id: 'string',
                parent_id: 'string',
                foreign_model: 'string',
                foreign_id: 'string',
                content: 'string',
                created: 'string',
                modified: 'string',
                Creator: 'passbolt.model.User.model',
                Modifier: 'passbolt.model.User.model'
            },
            create: function (attrs, success, error) {
                var self = this;
                var params = mad.model.serializer.CakeSerializer.to(attrs, this);
                return mad.net.Ajax.request({
                    url: APP_URL + 'comments/' + attrs.foreign_model + '/' + attrs.foreign_id + '.json',
                    type: 'POST',
                    params: params,
                    success: success,
                    error: error
                }).pipe(function (data, textStatus, jqXHR) {
                    var def = $.Deferred();
                    def.resolveWith(this, [mad.model.serializer.CakeSerializer.from(data, self)]);
                    return def;
                });
            },
            destroy: function (id, success, error) {
                var params = { id: id };
                return mad.net.Ajax.request({
                    url: APP_URL + 'comments/{id}.json',
                    type: 'DELETE',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findAll: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'comments/{foreignModel}/{foreignId}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            },
            findOne: function (params, success, error) {
                return mad.net.Ajax.request({
                    url: APP_URL + 'comments/{foreignModel}/{foreignId}.json',
                    type: 'GET',
                    params: params,
                    success: success,
                    error: error
                });
            }
        }, {
            init: function () {
                var self = this;
            }
        });
    var $__default = Comment;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/comments.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/comments.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_comments_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Comments');
                }));
                ___v1ew.push('</h4>\n<a href="#" class="section-action"><i class="icon create no-text"></i><span>create</span></a>\n<div id="js_rs_details_comments_add_form"></div>\n<ul id="js_rs_details_comments_list"></ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/comments*/
define('app/view/component/comments', [
    'mad/view/view',
    'app/view/template/component/comments.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var Comments = passbolt.view.component.Comments = mad.View.extend('passbolt.view.component.Comments', {}, {
            init: function (el, options) {
                this._super(el, options);
            },
            '.icon.create click': function (el, ev) {
                this.getController().addForm.setState('ready');
            },
            'a.button.comment-submit click': function (el, ev) {
                el.trigger('submit');
            }
        });
    var $__default = Comments;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/comments_list*/
define('app/view/component/comments_list', [
    'mad/view/view',
    'mad/view/component/tree',
    'app/view/template/component/comments.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var CommentsList = passbolt.view.component.CommentsList = mad.view.component.Tree.extend('passbolt.view.component.CommentsList', {}, {
            init: function (el, options) {
                this._super(el, options);
            },
            '.actions a .icon.delete click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                var data = null;
                var li = el.parents('li.comment-wrapper');
                if (this.getController().getItemClass()) {
                    data = li.data(this.getController().getItemClass().fullName);
                } else {
                    data = li[0].id;
                }
                el.trigger('request_delete_comment', data);
            }
        });
    var $__default = CommentsList;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/comments_list*/
define('app/component/comments_list', [
    'mad/component/confirm',
    'mad/component/tree',
    'app/view/component/comments_list',
    'app/view/component/comments',
    'app/model/comment'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var CommentsList = passbolt.component.CommentsList = mad.component.Tree.extend('passbolt.component.CommentsList', {
            defaults: {
                label: 'Comments List Controller',
                viewClass: passbolt.view.component.CommentsList,
                itemClass: passbolt.model.Comment,
                templateUri: 'mad/view/template/component/tree.ejs',
                itemTemplateUri: 'js/app/view/template/component/comment/comment_item.ejs',
                foreignModel: null,
                foreignId: null,
                selfLoad: false,
                map: new mad.Map({
                    id: 'id',
                    content: 'content',
                    modified: 'modified',
                    creatorAvatarPath: {
                        key: 'Creator',
                        func: function (creator, map, obj) {
                            return creator.Profile.avatarPath('small');
                        }
                    },
                    creatorName: {
                        key: 'Creator',
                        func: function (creator, map, obj) {
                            return creator.Profile.fullName();
                        }
                    }
                })
            }
        }, {
            init: function (el, opts) {
                this._super(el, opts);
                if (this.options.selfLoad === true) {
                    var self = this;
                    passbolt.model.Comment.findAll({
                        'foreignModel': this.options.foreignModel,
                        'foreignId': this.options.foreignId
                    }, function (comments, response, request) {
                        self.load(comments);
                    });
                }
            },
            ' request_delete_comment': function (elt, evt, data) {
                var confirm = new mad.component.Confirm(null, {
                        label: __('Do you really want to delete comment ?'),
                        content: __('Please confirm you really want to delete the comment. After clicking ok, it will be deleted permanently.'),
                        action: function () {
                            mad.bus.trigger('request_delete_comment', data);
                        }
                    }).start();
            }
        });
    var $__default = CommentsList;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/comment/add.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/comment/add.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_comment_add_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<ul>\n\t<li class="comment-wrapper">\n        <form id="js_comment_add_form" class="form comment add">\n            <div class="author profile picture"><a href="#"><img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user.Profile.Avatar.url.small);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push(' avatar"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</a></div>\n            <div class="form-content">\n                <input name="data[comment][parent_id]" class="js_comment_parent_id required" type="hidden" >\n                <input name="data[comment][foreign_id]" class="js_comment_foreign_id required" type="hidden" >\n                <input name="data[comment][foreign_model]" class="js_comment_foreign_model required" type="hidden" >\n                <div class="input textarea required">\n                    <label for="js_field_comment_content">Add a comment</label>\n                    <textarea id="js_field_comment_content" name="data[comment][content]" class="js_comment_content required" maxlength="150"  placeholder="add a comment"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n                    <div class="js_comment_content_feedback message"></div>\n                </div>\n                <div class="metadata">\n                    <span class="author username"><a href="#">You</a></span>\n                    <span class="modified">right now</span>\n                </div>\n                <div class="actions">\n                    <a href="#" class="button comment-submit"><span>send</span></a>\n                </div>\n            </div>\n        </form>\n\t</li>\n</ul>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/comment/create*/
define('app/form/comment/create', [
    'mad/form/form',
    'app/view/component/comments',
    'app/view/template/form/comment/add.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    passbolt.form.comment = passbolt.form.comment || {};
    var Create = passbolt.form.comment.Create = mad.Form.extend('passbolt.form.comment.Create', {
            defaults: {
                templateBased: true,
                foreignModel: null,
                foreignId: null,
                callbacks: {
                    submit: function (data) {
                        var instance = new passbolt.model.Comment(data['passbolt.model.Comment']).save();
                    }
                },
                templateUri: 'app/view/template/form/comment/add.ejs',
                commentContentField: null
            }
        }, {
            init: function (el, options) {
                this._super(el, options);
                this.setViewData('user', passbolt.model.User.getCurrent());
            },
            afterStart: function () {
                this.addElement(new mad.form.Textbox($('.js_comment_parent_id', this.element), { modelReference: 'passbolt.model.Comment.parent_id' }).start());
                this.addElement(new mad.form.Textbox($('.js_comment_foreign_model', this.element), { modelReference: 'passbolt.model.Comment.foreign_model' }).start().setValue('Resource'));
                this.addElement(new mad.form.Textbox($('.js_comment_foreign_id', this.element), { modelReference: 'passbolt.model.Comment.foreign_id' }).start().setValue(this.options.foreignId));
                this.options.commentContentField = new mad.form.Textbox($('.js_comment_content', this.element), { modelReference: 'passbolt.model.Comment.content' }).start();
                this.addElement(this.options.commentContentField, new mad.form.Feedback($('.js_comment_content_feedback', this.element), {}).start());
            },
            emptyContent: function () {
                this.options.commentContentField.setValue('');
            },
            'stateReady': function () {
                this.options.commentContentField.setValue('');
            },
            stateHidden: function (go) {
                this._super(go);
                this.validations = 0;
            }
        });
    var $__default = Create;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/comments*/
define('app/component/comments', [
    'app/model/comment',
    'app/view/component/comments',
    'app/component/comments_list',
    'app/form/comment/create',
    'app/view/template/component/comments.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var Comments = passbolt.component.Comments = mad.Component.extend('passbolt.component.Comments', {
            defaults: {
                label: 'Comments Controller',
                viewClass: passbolt.view.component.Comments,
                resource: null,
                foreignModel: null,
                foreignId: null,
                templateUri: 'app/view/template/component/comments.ejs'
            }
        }, {
            afterStart: function () {
                this.addForm = new passbolt.form.comment.Create($('#js_rs_details_comments_add_form', this.element), {
                    'foreignModel': this.options.foreignModel,
                    'foreignId': this.options.foreignId
                });
                this.addForm.start();
                this.addForm.setState('hidden');
                this.commentsList = new passbolt.component.CommentsList($('#js_rs_details_comments_list', this.element), {
                    'resource': this.options.resource,
                    'foreignModel': this.options.foreignModel,
                    'foreignId': this.options.foreignId
                });
                this.commentsList.start();
                var self = this;
                passbolt.model.Comment.findAll({
                    'foreignModel': this.options.foreignModel,
                    'foreignId': this.options.foreignId
                }, function (comments, response, request) {
                    if (comments.length > 0) {
                        self.commentsList.load(comments);
                    } else {
                        self.addForm.setState('visible');
                    }
                });
                this._super();
            },
            '{passbolt.model.Comment} created': function (model, ev, resource) {
                if (resource.foreign_id == this.options.resource.id) {
                    this.addForm.setState('hidden');
                    this.commentsList.insertItem(resource, null, 'first');
                }
            },
            '{mad.bus.element} request_delete_comment': function (model, ev, resource) {
                resource.destroy().then(function () {
                    mad.bus.trigger('comment_deleted', resource);
                });
            },
            '{mad.bus.element} comment_deleted': function (model, ev, resource) {
                this.commentsList.removeItem(resource);
                if (this.commentsList.options.items.attr('length') == 0) {
                    this.addForm.emptyContent();
                    this.addForm.setState('visible');
                }
            }
        });
    var $__default = Comments;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/sidebar_section*/
define('app/component/sidebar_section', ['mad/view/component/tree'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    passbolt.component.sidebarSection = passbolt.component.sidebarSection || {};
    var SidebarSection = passbolt.component.SidebarSection = mad.Component.extend('passbolt.component.SidebarSection', {
            'defaults': {
                'label': 'Sidebar Section Component',
                'viewClass': passbolt.view.component.ResourceDetails,
                'resource': null
            }
        }, {});
    var $__default = SidebarSection;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/resource/edit_description.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/resource/edit_description.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_resource_edit_description_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content resource-description-edit-wrapper">\n\t<input name="data[Resource][id]" class="js_resource_id required" type="hidden" >\n    <div class="input text required js_form_element_wrapper">\n        <textarea name="data[Resource][description]" class="js_resource_description required" maxlength="150"  placeholder="enter description"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n\t\t<div class="js_resource_description_feedback message">\n\t\t</div>\n    </div>\n\t<div class="actions">\n\t\t<input type="submit" class="button resource-submit" value="save">\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/resource/edit_description*/
define('app/form/resource/edit_description', [
    'mad/form/form',
    'app/model/resource',
    'app/view/template/form/resource/edit_description.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    passbolt.form.resource = passbolt.form.resource || {};
    var EditDescription = passbolt.form.resource.EditDescription = mad.Form.extend('passbolt.form.resource.EditDescription', {
            defaults: {
                templateBased: true,
                templateUri: 'app/view/template/form/resource/edit_description.ejs',
                resource: null,
                descriptionField: null
            }
        }, {
            afterStart: function () {
                this.addElement(new mad.form.Textbox($('.js_resource_id', this.element), { modelReference: 'passbolt.model.Resource.id' }).start().setValue(this.options.resource.id));
                this.options.descriptionField = this.addElement(new mad.form.Textbox($('.js_resource_description', this.element), { modelReference: 'passbolt.model.Resource.description' }).start(), new mad.form.Feedback($('.js_resource_description_feedback', this.element), {}).start());
                this.options.descriptionField.setValue(this.options.resource.description);
                $('.button.resource-submit').click(function () {
                    $(this).trigger('submit');
                });
            }
        });
    var $__default = EditDescription;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/sidebar_section*/
define('app/view/component/sidebar_section', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    passbolt.view.component.sidebarSection = passbolt.view.component.sidebarSection || {};
    var SidebarSection = passbolt.view.component.SidebarSection = mad.View.extend('passbolt.view.component.SidebarSection', {}, {
            init: function (el, options) {
                this._super(el, options);
            }
        });
    var $__default = SidebarSection;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/sidebar_section/description.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/sidebar_section/description.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_sidebar_section_description_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Description');
                }));
                ___v1ew.push('</h4>\n');
                ___v1ew.push(can.view.txt(0, 'span', 0, this, function () {
                    var ___v1ew = [];
                    if (editable) {
                        ___v1ew.push('\n<a href="#" class="edit_description_button section-action" id="js_edit_description_button">\n\t<i class="icon edit no-text"></i>\n\t<span>edit</span>\n</a>\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n<p class="description_content">');
                ___v1ew.push(can.view.txt(1, 'p', 0, this, function () {
                    return resource.description;
                }));
                ___v1ew.push('</p>\n<!-- edit description form -->\n<div id="js_rs_details_edit_description"></div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/sidebar_section/description*/
define('app/view/component/sidebar_section/description', [
    'mad/view/view',
    'app/view/component/sidebar_section',
    'app/view/template/component/sidebar_section/description.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var Description = passbolt.view.component.sidebarSection.Description = passbolt.view.component.SidebarSection.extend('passbolt.view.component.sidebarSection.Description', {}, {
            'a#js_edit_description_button, p.description_content click': function (el, ev) {
                this.element.trigger('request_resource_description_edit');
            },
            showDescription: function (visible) {
                if (visible) {
                    $('.description_content', $(this.element)).show();
                } else {
                    $('.description_content', $(this.element)).hide();
                }
            }
        });
    var $__default = Description;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/sidebar_section/description*/
define('app/component/sidebar_section/description', [
    'app/component/sidebar_section',
    'app/form/resource/edit_description',
    'app/view/component/sidebar_section/description',
    'app/model/resource',
    'app/view/template/component/sidebar_section/description.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var Description = passbolt.component.sidebarSection.Description = mad.Component.extend('passbolt.component.sidebarSection.Description', {
            defaults: {
                label: 'Sidebar Section Description Controller',
                viewClass: passbolt.view.component.sidebarSection.Description,
                templateUri: 'app/view/template/component/sidebar_section/description.ejs',
                resource: null,
                editDescriptionFormCtrl: null
            }
        }, {
            beforeRender: function () {
                this._super();
                this.setViewData('resource', this.options.resource);
                this.setViewData('editable', passbolt.model.Permission.isAllowedTo(this.options.resource, passbolt.UPDATE));
            },
            afterStart: function () {
                var self = this;
                this.options.editDescriptionFormCtrl = new passbolt.form.resource.EditDescription($('#js_rs_details_edit_description', this.element), {
                    'resource': this.options.resource,
                    'state': 'hidden',
                    'data': { 'Resource': this.options.resource },
                    'callbacks': {
                        'submit': function (data) {
                            self.options.resource.update({ 'description': data['passbolt.model.Resource']['description'] }, function () {
                            });
                        }
                    }
                }).start();
            },
            ' request_resource_description_edit': function (el, ev) {
                if (!this.state.is('edit')) {
                    this.setState('edit');
                } else {
                    this.setState('ready');
                }
            },
            'stateEdit': function (go) {
                if (go) {
                    this.options.editDescriptionFormCtrl.setState('ready');
                    this.view.showDescription(false);
                } else {
                    this.options.editDescriptionFormCtrl.setState('hidden');
                    this.view.showDescription(true);
                }
            }
        });
    return {};
});
/*app/view/template/component/resource_details.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/resource_details.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_resource_details_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="resource">\n\t<h3>');
                ___v1ew.push(can.view.txt(1, 'h3', 0, this, function () {
                    return resource.name;
                }));
                ___v1ew.push('</h3>\n\t<a href="#" class="dialog-close"><i class="icon close no-text"></i><span>close</span></a>\n\t<div class="detailed-information">\n\t<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Information');
                }));
                ___v1ew.push('</h4>\n\t<ul>\n\t\t<li class="username">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Username');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="password">\n\t\t\t<div class="label">');
                ___v1ew.push(can.view.txt(1, 'div', 0, this, function () {
                    return __('Password');
                }));
                ___v1ew.push('</div>\n\t\t\t<div class="value">\n\t\t\t\t<div class="secret-copy">\n\t\t\t\t\t<a id="sidebar_secret_copy_');
                ___v1ew.push(can.view.txt(true, 'a', 'id', this, function () {
                    return resource.id;
                }));
                ___v1ew.push('" href="#copy_secret"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t\t\t\t\t<span>copy password to clipboard</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t<pre>');
                ___v1ew.push(can.view.txt(1, 'pre', 0, this, function () {
                    return resource.Secret[0].data;
                }));
                ___v1ew.push('</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t\t<li class="uri">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('URL');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">\n\t\t\t\t<a href="');
                ___v1ew.push(can.view.txt(true, 'a', 'href', this, function () {
                    return resource.uri;
                }));
                ___v1ew.push('" target="_blank"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return resource.uri;
                }));
                ___v1ew.push('</a>\n\t\t\t</span>\n\t\t</li>\n\t\t<li class="modified">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Modified');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return moment(resource.modified).fromNow();
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="modified-by">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Modified by');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.Modifier.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<li class="created-by">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Owner');
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.Creator.username;
                }));
                ___v1ew.push('</span>\n\t\t</li>\n\t\t<!--<li class="expire">-->\n\t\t\t<!--<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Expire');
                }));
                ___v1ew.push('</span>-->\n\t\t\t<!--<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return resource.expiry_date != null ? moment(resource.expiry_date).fromNow() : __('never');
                }));
                ___v1ew.push('</span>-->\n\t\t<!--</li>-->\n\t\t<!--<li class="strength">\n\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Strength');
                }));
                ___v1ew.push('</span>\n\t\t\t<span>\n\t\t\t\t');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return secretStrength ? secretStrength.label : '-';
                }));
                ___v1ew.push('\n\t\t\t</span>\n\t\t</li>-->\n\t</ul>\n\t</div>\n\t<!-- Description management -->\n\t<div class="description" id="js_rs_details_description"></div>\n\t<!-- Tags management -->\n\t<div class="tags clearfix" id="js_rs_details_tags"></div>\n\t<!-- Comments management -->\n\t<div class="comments clearfix" id="js_rs_details_comments"></div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/resource_details*/
define('app/component/resource_details', [
    'mad/view/component/tree',
    'app/view/component/resource_details',
    'app/component/comments',
    'app/component/sidebar_section',
    'app/component/sidebar_section/description',
    'app/view/template/component/resource_details.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    var ResourceDetails = passbolt.component.ResourceDetails = mad.Component.extend('passbolt.component.ResourceDetails', {
            defaults: {
                label: 'Resource Details',
                viewClass: passbolt.view.component.ResourceDetails,
                resource: null,
                selectedRs: new can.Model.List(),
                'templateUri': 'app/view/template/component/resource_details.ejs'
            }
        }, {
            beforeRender: function () {
                this._super();
                this.setViewData('resource', this.options.resource);
                var secretStrength = passbolt.model.SecretStrength.getSecretStrength(this.options.resource.Secret.data);
                this.setViewData('secretStrength', secretStrength);
            },
            afterStart: function () {
                var descriptionController = new passbolt.component.sidebarSection.Description($('#js_rs_details_description', this.element), { 'resource': this.options.resource });
                descriptionController.start();
                var commentsController = new passbolt.component.Comments($('#js_rs_details_comments', this.element), {
                        'resource': this.options.resource,
                        'foreignModel': 'Resource',
                        'foreignId': this.options.resource.id
                    });
                commentsController.start();
            },
            load: function (resource) {
                this.options.resource = resource;
                if (this.state.is(null)) {
                    this.start();
                } else {
                    this.refresh();
                }
                this.on();
            },
            isDisabled: function () {
                if (this.state.is('disabled') || this.state.is(null) && (this.options.state == 'disabled' || $.isArray(this.options.state) && this.options.state.indexOf('disabled') != -1)) {
                    return true;
                }
                return false;
            },
            stateReady: function (go) {
                if (go) {
                    this.view.show();
                }
                this._super(go);
            },
            ' password_clicked': function (el, ev) {
                var secret = this.options.selectedRs[0].Secret[0].data;
                mad.bus.trigger('passbolt.secret.decrypt', secret);
            },
            '{resource} updated': function (resource) {
                if (!this.isDisabled()) {
                    this.refresh();
                }
            },
            '{mad.bus.element} workspace_showSidebar': function (el, ev, show) {
                if (!this.element)
                    return;
                if (show) {
                    if (this.state.is(null)) {
                        this.options.state = 'ready';
                    } else {
                        this.setState('ready');
                        if (this.options.selectedRs.length == 1) {
                            this.refresh();
                        }
                    }
                } else {
                    if (this.state.is(null)) {
                        this.options.state = [
                            'hidden',
                            'disabled'
                        ];
                    } else {
                        this.setState([
                            'hidden',
                            'disabled'
                        ]);
                    }
                }
            },
            '{selectedRs} add': function (el, ev, resource) {
                if (this.options.selectedRs.length == 0 || this.options.selectedRs.length > 1) {
                    this.options.resource = null;
                    if (!this.isDisabled()) {
                        this.setState('hidden');
                    }
                } else {
                    this.options.resource = this.options.selectedRs[0];
                    if (!this.isDisabled()) {
                        this.load(this.options.resource);
                        this.setState('ready');
                    }
                }
            },
            '{selectedRs} remove': function (el, ev, resource) {
                if (this.options.selectedRs.length == 0 || this.options.selectedRs.length > 1) {
                    this.options.resource = null;
                    if (!this.isDisabled() && !this.state.is(null)) {
                        this.setState('hidden');
                    }
                } else {
                    this.options.resource = this.options.selectedRs[0];
                    if (!this.isDisabled()) {
                        this.load(this.options.resource);
                        this.setState('ready');
                    }
                }
            }
        });
    var $__default = ResourceDetails;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/resource_shortcuts*/
define('app/component/resource_shortcuts', ['mad/component/menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var ResourceShortcuts = passbolt.component.ResourceShortcuts = mad.component.Menu.extend('passbolt.component.ResourceShortcuts', { 'defaults': {} }, {
            afterStart: function () {
                var menuItems = [
                        new mad.model.Action({
                            'id': 'js_pwd_wsp_filter_all',
                            'label': __('All items'),
                            'cssClasses': ['selected'],
                            'action': function () {
                                var filter = new passbolt.model.Filter({
                                        'label': __('All items'),
                                        'order': 'modified',
                                        'type': passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_resources_browser', filter);
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_pwd_wsp_filter_favorite',
                            'label': __('Favorite'),
                            'action': function () {
                                var filter = new passbolt.model.Filter({
                                        'label': __('Favorite'),
                                        'case': 'favorite',
                                        'type': passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_resources_browser', filter);
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_pwd_wsp_filter_modified',
                            'label': __('Recently modified'),
                            'action': function () {
                                var filter = new passbolt.model.Filter({
                                        'label': __('Recently modified'),
                                        'order': 'modified',
                                        'type': passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_resources_browser', filter);
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_pwd_wsp_filter_share',
                            'label': __('Shared with me'),
                            'action': function () {
                                var filter = new passbolt.model.Filter({
                                        'label': __('Shared with me'),
                                        'case': 'shared',
                                        'type': passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_resources_browser', filter);
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_pwd_wsp_filter_own',
                            'label': __('Items I own'),
                            'action': function () {
                                var filter = new passbolt.model.Filter({
                                        'label': __('Items I own'),
                                        'case': 'own',
                                        'type': passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_resources_browser', filter);
                            }
                        })
                    ];
                this.load(menuItems);
            },
            '{mad.bus.element} filter_resources_browser': function (element, evt, filter) {
                if (!this.element)
                    return;
                if (filter.type != passbolt.model.Filter.SHORTCUT) {
                    this.unselectAll();
                }
            }
        });
    var $__default = ResourceShortcuts;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*mad/component/toggle_button*/
define('mad/component/toggle_button', [
    'mad/component/button',
    'mad/view/template/component/button/button.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var ToggleButton = mad.component.ToggleButton = mad.component.Button.extend('mad.component.ToggleButton', { 'defaults': {} }, {
            'click': function (el, ev) {
                this._super(el, ev);
                if (!this.state.is('selected')) {
                    this.setState('selected');
                } else {
                    this.setState('ready');
                }
            },
            'stateSelected': function (go) {
                if (go) {
                    this.element.addClass('selected');
                } else {
                    this.element.removeClass('selected');
                }
            }
        });
    return {};
});
/*app/view/template/component/workspace_secondary_menu.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/workspace_secondary_menu.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_workspace_secondary_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<li>\n\t<a id="js_wk_secondary_menu_view_sidebar_button" href="#" class="button toggle">\n\t\t<i class="icon layout eye big no-text"></i>\n\t\t<span>');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('view sidebar');
                }));
                ___v1ew.push('</span>\n\t</a>\n</li>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/workspace_secondary_menu*/
define('app/component/workspace_secondary_menu', [
    'mad/component/component',
    'mad/component/toggle_button',
    'app/view/template/component/workspace_secondary_menu.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var WorkspaceSecondaryMenu = passbolt.component.WorkspaceSecondaryMenu = mad.Component.extend('passbolt.component.WorkspaceSecondaryMenu', {
            defaults: {
                label: 'Workspace Secondary Menu',
                templateUri: 'app/view/template/component/workspace_secondary_menu.ejs',
                tag: 'ul'
            }
        }, {
            afterStart: function () {
                var showSidebar = mad.Config.read('ui.workspace.showSidebar');
                this.options.viewSidebarButton = new mad.component.ToggleButton($('#js_wk_secondary_menu_view_sidebar_button'), { state: showSidebar ? 'selected' : 'ready' }).start();
                this.on();
            },
            '{mad.bus.element} workspace_showSidebar': function (el, ev, show) {
                if (!this.element)
                    return;
                if (!show && this.options.viewSidebarButton.state.is('selected')) {
                    this.options.viewSidebarButton.setState('ready');
                }
            },
            '{viewSidebarButton.element} click': function (el, ev) {
                var showSidebar = !mad.Config.read('ui.workspace.showSidebar');
                mad.Config.write('ui.workspace.showSidebar', showSidebar);
                mad.bus.trigger('workspace_showSidebar', showSidebar);
            }
        });
    var $__default = WorkspaceSecondaryMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/form/secret/create*/
define('app/form/secret/create', ['mad/form/form'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    passbolt.form.secret = passbolt.form.secret || {};
    var Create = passbolt.form.secret.Create = mad.Form.extend('passbolt.form.secret.Create', {
            defaults: {
                templateBased: false,
                action: 'create',
                secret_i: null
            }
        }, {
            afterStart: function () {
                this.addElement(new mad.form.Textbox($('#js_field_secret_id_' + this.options.secret_i), {
                    modelReference: 'passbolt.model.Secret.id',
                    validate: false
                }).start());
                this.addElement(new mad.form.Textbox($('#js_field_secret_user_id_' + this.options.secret_i), {
                    modelReference: 'passbolt.model.Secret.user_id',
                    validate: false
                }).start());
                this.addElement(new mad.form.Textbox($('#js_field_secret_data_' + this.options.secret_i), {
                    modelReference: 'passbolt.model.Secret.data',
                    validate: false
                }).start());
                this.on();
            }
        });
    var $__default = Create;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/form/resource/create.ejs!lib/can/view/ejs/system*/
define('app/view/template/form/resource/create.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_form_resource_create_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="form-content">\n\t\n\t<input type="hidden" name="passbolt.model.Resource.Category.id" id="js_field_category_id" class="form_field" />\n\t\n\t<div class="input text required js_form_element_wrapper">\n\t\t<label for="js_field_name">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Name');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.name" class="required" maxlength="50" type="text" id="js_field_name" placeholder="name"/>\n\t\t<div id="js_field_name_feedback" class="message">\n\t\t</div>\n\t</div>\n\t\n\t<div class="input text js_form_element_wrapper">\n\t\t<label for="js_field_uri">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('URI');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.uri" maxlength="50" type="text" id="js_field_uri" placeholder="https://example.com/login"/>\n\t\t<div id="js_field_uri_feedback" class="message">\n\t\t</div>\n\t</div>\n\t\n\t<div class="input text required js_form_element_wrapper">\n\t\t<label for="js_field_username">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Username');
                }));
                ___v1ew.push('</label>\n\t\t<input name="passbolt.model.Resource.username" class="required" maxlength="50" type="text" id="js_field_username" placeholder="name"/>\n\t\t<div id="js_field_username_feedback" class="message">\n\t\t</div>\n\t</div>\n\t<div class="js_form_element_wrapper js_form_secret_wrapper">\n\t\t<label for="js_field_secret_data_0">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Password');
                }));
                ___v1ew.push('</label>\n        <div id="js_secret_edit_0" class="js_secret_edit_form">\n            <input type="hidden" name="passbolt.model.Secret.id" id="js_field_secret_id_0" class="js_field_secret_id form_field" />\n            <input type="hidden" name="passbolt.model.Secret.user_id" id="js_field_secret_user_id_0" class="js_field_secret_user_id form_field" />\n            <textarea name="passbolt.model.Secret.data" id="js_field_secret_data_0" class="form_field hidden js_field_secret_data"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('</textarea>\n        </div>\n\t</div>\n\t<div class="input textarea js_form_element_wrapper">\n\t\t<label for="js_field_description">');
                ___v1ew.push(can.view.txt(1, 'label', 0, this, function () {
                    return __('Description');
                }));
                ___v1ew.push('</label>\n\t\t<textarea name="passbolt.model.Resource.description" class="required" maxlength="150" id="js_field_description" placeholder="add a description"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n\t\t</textarea>\n\t\t<div id="js_field_description_feedback" class="message">\n\t\t</div>\n\t</div>\n</div>\n<div class="submit-wrapper clearfix">\n    <input type="submit" class="button primary" value="');
                ___v1ew.push(can.view.txt(true, 'input', 'value', this, function () {
                    return __('save');
                }));
                ___v1ew.push('" ', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n    <a href="#" class="js-dialog-cancel cancel">');
                ___v1ew.push(can.view.txt(1, 'a', 0, this, function () {
                    return __('cancel');
                }));
                ___v1ew.push('</a>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/form/resource/create*/
define('app/form/resource/create', [
    'mad/form/form',
    'app/form/secret/create',
    'app/view/template/form/resource/create.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    passbolt.form.resource = passbolt.form.resource || {};
    var Create = passbolt.form.resource.Create = mad.Form.extend('passbolt.form.resource.Create', {
            defaults: {
                templateBased: true,
                secretField: null,
                action: 'create',
                secretsForms: [],
                resource: null,
                templateUri: 'app/view/template/form/resource/create.ejs'
            }
        }, {
            beforeRender: function () {
                this._super();
                this.setViewData('resource', this.options.data);
            },
            afterStart: function () {
                var self = this;
                this.options.data.Resource = this.options.data.Resource || {};
                this.addElement(new mad.form.Textbox($('#js_field_category_id'), {
                    modelReference: 'passbolt.model.Resource.Category.id',
                    validate: false
                }).start());
                this.addElement(new mad.form.Textbox($('#js_field_name'), { modelReference: 'passbolt.model.Resource.name' }).start(), new mad.form.Feedback($('#js_field_name_feedback'), {}).start());
                this.addElement(new mad.form.Textbox($('#js_field_uri'), { modelReference: 'passbolt.model.Resource.uri' }).start(), new mad.form.Feedback($('#js_field_uri_feedback'), {}).start());
                this.addElement(new mad.form.Textbox($('#js_field_username'), { modelReference: 'passbolt.model.Resource.username' }).start(), new mad.form.Feedback($('#js_field_username_feedback'), {}).start());
                can.each(this.options.data.Secret, function (secret, i) {
                    var form = new passbolt.form.secret.Create('#js_secret_edit_' + i, {
                            data: secret,
                            secret_i: i
                        });
                    form.start();
                    form.load(secret);
                    self.options.secretsForms.push(form);
                });
                this.addElement(new mad.form.Textbox($('#js_field_description'), { modelReference: 'passbolt.model.Resource.description' }).start(), new mad.form.Feedback($('#js_field_description_feedback'), {}).start());
                $('#js_field_name').focus();
                mad.bus.trigger('passbolt.plugin.resource_edition');
            },
            ' submit': function (el, ev) {
                ev.preventDefault();
                if (this.validate()) {
                    var usersIds = [];
                    if (this.options.action == 'edit') {
                        passbolt.model.Permission.findAll({
                            'aco': this.options.data.constructor.shortName,
                            'aco_foreign_key': this.options.data.id
                        }, function (permissions, response, request) {
                            permissions.each(function (permission, i) {
                                usersIds.push(permission.aro_foreign_key);
                            });
                            mad.bus.trigger('passbolt.secret_edition.encrypt', usersIds);
                        });
                    } else {
                        usersIds.push(mad.Config.read('user.id'));
                        mad.bus.trigger('passbolt.secret_edition.encrypt', usersIds);
                    }
                } else {
                    if (this.options.callbacks.error) {
                        this.options.callbacks.error();
                    }
                }
            },
            '{mad.bus.element} secret_edition_secret_encrypted': function (el, ev, armoreds) {
                var data = this.getData();
                data['passbolt.model.Resource'].Secret = [];
                for (var userId in armoreds) {
                    data['passbolt.model.Resource'].Secret.push({
                        'user_id': userId,
                        'data': armoreds[userId]
                    });
                }
                if (this.options.callbacks.submit) {
                    this.options.callbacks.submit(data);
                }
            }
        });
    var $__default = Create;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/filter*/
define('app/model/filter', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Filter = passbolt.model.Filter = mad.Model.extend('passbolt.model.Filter', {
            attributes: {
                label: 'string',
                type: 'string',
                keywords: 'string',
                case: 'string',
                foreignModels: 'array',
                order: 'array',
                requestPrefix: 'string'
            },
            'SHORTCUT': 1,
            'FOREIGN_MODEL': 2,
            'KEYWORD': 3,
            'TAG': 4
        }, {
            init: function (attrs) {
                if (typeof attrs == 'undefined' || typeof attrs['requestPrefix'] == 'undefined') {
                    this.requestPrefix = 'fltr_';
                }
                if (typeof attrs == 'undefined' || typeof attrs['foreignModels'] == 'undefined') {
                    this.foreignModels = new can.List([]);
                }
            },
            toRequest: function () {
                var returnValue = {};
                if (this.keywords != null) {
                    returnValue[this.requestPrefix + 'keywords'] = this.keywords;
                }
                if (this['case'] != null) {
                    returnValue[this.requestPrefix + 'case'] = this['case'];
                }
                if (this.order != null) {
                    returnValue[this.requestPrefix + 'order'] = this.order;
                }
                var foreignModels = this.foreignModels.attr();
                for (var foreignModel in foreignModels) {
                    returnValue[this.requestPrefix + 'model_' + [foreignModel.toLowerCase()]] = can.map(this.foreignModels[foreignModel], function (instance, i) {
                        return instance.id;
                    }).join(',');
                }
                return returnValue;
            },
            getForeignModels: function (name) {
                var returnValue = [];
                if (typeof this.foreignModels != 'undefined' && typeof this.foreignModels[name] != 'undefined') {
                    returnValue = this.foreignModels[name];
                }
                return returnValue;
            }
        });
    var $__default = Filter;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/password_workspace.ejs!lib/can/view/ejs/system*/
define('app/view/template/password_workspace.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_password_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_workspace">\n\t<div class="panel left">\n\t\t<div class="navigation first shortcuts">\n\t\t\t<ul id="js_wsp_pwd_filter_shortcuts" class="clearfix">\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class="navigation last tree categories">\n\t\t\t<ul id="js_wsp_pwd_category_chooser">\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<div class="panel middle">\n        <div id="js_wsp_password_breadcrumb" class="breadcrumbs">\n        </div>\n        <div id="js_wsp_pwd_browser" class="tableview">\n        </div>\n\t</div>\n\t<div id="js_pwd_details" class="panel aside js_wsp_pwd_sidebar_second" ');
                ___v1ew.push(can.view.txt(2, 'div', 'style', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('style="');
                    ___v1ew.push('display:none"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/template/component/create_button.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/create_button.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_create_button_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<i class="icon create"></i>\n<span>create</span>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/password_workspace*/
define('app/component/password_workspace', [
    'mad/component/component',
    'mad/component/confirm',
    'app/component/password_workspace_menu',
    'app/component/breadcrumb/password_breadcrumb',
    'app/component/password_browser',
    'app/component/resource_actions_tab',
    'app/component/resource_details',
    'app/component/resource_shortcuts',
    'app/component/workspace_secondary_menu',
    'app/form/resource/create',
    'app/model/filter',
    'app/view/template/password_workspace.ejs!',
    'app/view/template/component/create_button.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9, $__10, $__11, $__12) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    var PasswordWorkspace = passbolt.component.PasswordWorkspace = mad.Component.extend('passbolt.component.PasswordWorkspace', {
            defaults: {
                label: 'Password',
                templateUri: 'app/view/template/password_workspace.ejs',
                selectedRs: new can.Model.List(),
                filter: new passbolt.model.Filter(),
                silentLoading: false
            }
        }, {
            afterStart: function () {
                var primWkMenu = mad.helper.Component.create($('#js_wsp_primary_menu_wrapper'), 'last', passbolt.component.PasswordWorkspaceMenu, { 'selectedRs': this.options.selectedRs });
                primWkMenu.start();
                var secWkMenu = mad.helper.Component.create($('#js_wsp_secondary_menu_wrapper'), 'last', passbolt.component.WorkspaceSecondaryMenu, {});
                secWkMenu.start();
                this.options.createButton = mad.helper.Component.create($('.main-action-wrapper'), 'last', mad.component.Button, {
                    id: 'js_wsp_create_button',
                    templateBased: true,
                    templateUri: 'app/view/template/component/create_button.ejs',
                    tag: 'a',
                    cssClasses: ['button']
                }).start();
                var rsShortcut = new passbolt.component.ResourceShortcuts('#js_wsp_pwd_filter_shortcuts', {});
                rsShortcut.start();
                this.breadcrumCtl = new passbolt.component.PasswordBreadcrumb($('#js_wsp_password_breadcrumb'), {});
                this.breadcrumCtl.start();
                var passwordBrowserController = new passbolt.component.PasswordBrowser('#js_wsp_pwd_browser', { selectedRs: this.options.selectedRs });
                passwordBrowserController.start();
                var resourceDetails = new passbolt.component.ResourceDetails($('.js_wsp_pwd_sidebar_second', this.element), { 'selectedRs': this.options.selectedRs });
                var filter = new passbolt.model.Filter({
                        label: __('All items'),
                        order: 'modified',
                        type: passbolt.model.Filter.SHORTCUT
                    });
                mad.bus.trigger('filter_resources_browser', filter);
                this.on();
            },
            destroy: function () {
                $('#js_wsp_primary_menu_wrapper').empty();
                $('#js_wsp_secondary_menu_wrapper').empty();
                $('.main-action-wrapper').empty();
                this._super();
            },
            index: function (a, b, c) {
                console.log('Execute function index of the password workspace controller, with the following arguments');
                console.dir(arguments);
            },
            '{createButton.element} click': function (el, ev) {
                var category = this.options.createButton.getValue();
                mad.bus.trigger('request_resource_creation', category);
            },
            '{mad.bus.element} filter_resources_browser': function (element, evt, filter) {
                this.breadcrumCtl.load(filter);
                this.options.selectedRs.splice(0, this.options.selectedRs.length);
                var categories = filter.getForeignModels('Category');
                var createButtonState = 'ready';
                if (!categories) {
                    this.options.createButton.setValue(new can.List([]));
                } else {
                    this.options.createButton.setValue(categories);
                    if (categories.length > 1 || categories.length == 1 && !passbolt.model.Permission.isAllowedTo(categories[0], passbolt.CREATE)) {
                        createButtonState = 'disabled';
                    }
                }
                this.options.createButton.setState(createButtonState);
            },
            '{mad.bus.element} category_selected': function (el, ev, category) {
                if (!this.element)
                    return;
                this.options.selectedRs.splice(0, this.options.selectedRs.length);
                this.options.filter.attr({
                    'foreignModels': { 'Category': new can.List([category]) },
                    'type': passbolt.model.Filter.FOREIGN_MODEL
                });
                mad.bus.trigger('filter_resources_browser', this.options.filter);
            },
            '{mad.bus.element} copy_login_clipboard': function (el, ev, resource) {
                if (!this.element)
                    return;
            },
            '{mad.bus.element} copy_secret_clipboard': function (el, ev, resource) {
                if (!this.element)
                    return;
            },
            '{mad.bus.element} request_category_creation': function (el, ev, data) {
                if (!this.element)
                    return;
                var category = new passbolt.model.Category({ parent_id: data.id });
                var dialog = new mad.component.Dialog(null, {
                        label: __('Create a new Category'),
                        cssClasses: ['dialog-wrapper']
                    }).start();
                var form = dialog.add(passbolt.form.category.Create, {
                        data: category,
                        callbacks: {
                            submit: function (data) {
                                var instance = new passbolt.model.Category(data['passbolt.model.Category']).save();
                                dialog.remove();
                            }
                        }
                    });
                form.load(category);
            },
            '{mad.bus.element} request_category_edition': function (el, ev, category) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, { label: __('Edit a Category') }).start();
                var tab = dialog.add(passbolt.component.CategoryActionsTab, { category: category });
                tab.enableTab('js_cat_edit');
            },
            '{mad.bus.element} request_category_sharing': function (el, ev, category) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, { label: __('Share a Category') }).start();
                var tab = dialog.add(passbolt.component.CategoryActionsTab, { category: category });
                tab.enableTab('js_cat_permission');
            },
            '{mad.bus.element} request_category_deletion': function (el, ev, category) {
                if (!this.element)
                    return;
                category.destroy();
            },
            '{mad.bus.element} request_resource_creation': function (el, ev, categories) {
                if (!this.element)
                    return;
                if (typeof categories == 'undefined') {
                    categories = [];
                } else if (!$.isArray(categories)) {
                    categories = [categories];
                }
                var resource = new passbolt.model.Resource({ Category: categories });
                var dialog = new mad.component.Dialog(null, {
                        label: __('Create Password'),
                        cssClasses: [
                            'create-password-dialog',
                            'dialog-wrapper'
                        ]
                    }).start();
                var form = dialog.add(passbolt.form.resource.Create, {
                        data: resource,
                        callbacks: {
                            submit: function (data) {
                                var rs = new passbolt.model.Resource(data['passbolt.model.Resource']);
                                rs.save();
                                dialog.remove();
                            }
                        }
                    });
                form.load(resource);
            },
            '{mad.bus.element} request_resource_edition': function (el, ev, resource) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, {
                        label: __('Edit Password'),
                        cssClasses: [
                            'edit-password-dialog',
                            'dialog-wrapper'
                        ]
                    }).start();
                var tab = dialog.add(passbolt.component.ResourceActionsTab, { resource: resource });
                tab.enableTab('js_rs_edit');
            },
            '{mad.bus.element} request_resource_deletion': function (el, ev) {
                var args = arguments;
                var confirm = new mad.component.Confirm(null, {
                        label: __('Do you really want to delete password ?'),
                        content: __('Please confirm you really want to delete the password. After clicking ok, it will be deleted permanently.'),
                        action: function () {
                            for (var i = 2; i < args.length; i++) {
                                var rs = args[i];
                                if (!(rs instanceof passbolt.model.Resource)) {
                                    throw passbolt.Exception.get('The parameter [%0] should be an instance of passbolt.model.Resource', i);
                                }
                                rs.destroy();
                            }
                        }
                    }).start();
            },
            '{mad.bus.element} request_resource_sharing': function (el, ev, resource) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, { label: __('Share Password') }).start();
                var tab = dialog.add(passbolt.component.ResourceActionsTab, { resource: resource });
                tab.enableTab('js_rs_permission');
            },
            '{mad.bus.element} request_favorite': function (el, ev, promise, instance) {
                if (!this.element)
                    return;
                var data = {
                        'foreign_model': 'resource',
                        'foreign_id': instance.id
                    };
                new passbolt.model.Favorite(data).save().then(function (favorite) {
                    instance.Favorite = favorite;
                    can.trigger(passbolt.model.Resource, 'updated', instance);
                    promise.resolve();
                }).fail(function (error) {
                    promise.reject();
                });
            },
            '{mad.bus.element} request_unfavorite': function (el, ev, promise, instance) {
                if (!this.element)
                    return;
                instance.Favorite.destroy().then(function () {
                    instance.Favorite = null;
                    can.trigger(passbolt.model.Resource, 'updated', instance);
                    promise.resolve();
                }).fail(function (jqXHR, status, response, request) {
                    promise.rejectWith(promise, [
                        jqXHR,
                        status,
                        response,
                        request
                    ]);
                });
            }
        });
    var $__default = PasswordWorkspace;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/people_workspace_menu.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/people_workspace_menu.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_people_workspace_menu_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                var role = passbolt.model.User.getCurrent().Role.name;
                ;
                ;
                ___v1ew.push('\n');
                ___v1ew.push(can.view.txt(0, 'ul', 0, this, function () {
                    var ___v1ew = [];
                    if (role == 'admin') {
                        ___v1ew.push('\n<li>\n\t<a id="js_user_wk_menu_creation_button" href="#" class="button">\n\t\t<i class="icon create"></i>\n\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('create');
                        }));
                        ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<a id="js_user_wk_menu_edition_button" href="#" class="button">\n\t\t<i class="icon edit"></i>\n\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('edit');
                        }));
                        ___v1ew.push('</span>\n\t</a>\n</li>\n<li>\n\t<a id="js_user_wk_menu_deletion_button" href="#" class="button">\n\t\t<i class="icon delete"></i>\n\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('delete');
                        }));
                        ___v1ew.push('</span>\n\t</a>\n</li>\n<!-- #PASSBOLT-787<li>\n\t<div class="dropdown">\n\t\t<a id="js_user_wk_menu_more_button" href="#" class="button">\n\t\t\t<span>');
                        ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                            return __('more');
                        }));
                        ___v1ew.push('</span>\n\t\t\t<i class="icon after arrowdown"></i>\n\t\t</a>\n\t</div>\n</li>-->\n');
                    }
                    ;
                    return ___v1ew.join('');
                }));
                ___v1ew.push('\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/people_workspace_menu*/
define('app/component/people_workspace_menu', [
    'mad/component/component',
    'mad/component/button',
    'app/view/template/component/people_workspace_menu.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var PeopleWorkspaceMenu = passbolt.component.PeopleWorkspaceMenu = mad.Component.extend('passbolt.component.PeopleWorkspaceMenu', {
            defaults: {
                label: 'User Workspace Menu Controller',
                tag: 'ul',
                selectedUsers: new can.Model.List(),
                selectedGroups: new can.Model.List(),
                templateUri: 'app/view/template/component/people_workspace_menu.ejs'
            }
        }, {
            afterStart: function () {
                var self = this;
                var user = passbolt.model.User.getCurrent();
                var userRole = user.Role.name;
                if (userRole == 'admin') {
                    this.options.creationButton = new mad.component.Button($('#js_user_wk_menu_creation_button')).start();
                    this.options.editionButton = new mad.component.Button($('#js_user_wk_menu_edition_button'), { state: 'disabled' }).start();
                    this.options.deletionButton = new mad.component.Button($('#js_user_wk_menu_deletion_button'), { state: 'disabled' }).start();
                }
                this.on();
            },
            '{creationButton.element} click': function (el, ev) {
                mad.bus.trigger('request_user_creation');
            },
            '{editionButton.element} click': function (el, ev) {
                mad.bus.trigger('request_user_edition');
            },
            '{deletionButton.element} click': function (el, ev) {
                var users = this.options.selectedUsers;
                mad.bus.trigger('request_user_deletion', users);
            },
            '{selectedUsers} add': function (el, ev, user) {
                if (this.options.selectedUsers.length == 0) {
                    this.setState('ready');
                } else if (this.options.selectedUsers.length == 1) {
                    this.setState('selection');
                } else {
                    this.setState('multiSelection');
                }
                if (passbolt.model.User.getCurrent().Role.name == 'admin') {
                }
            },
            '{selectedUsers} remove': function (el, ev, user) {
                if (this.options.selectedUsers.length == 0) {
                    this.setState('ready');
                } else if (this.options.selectedUsers.length == 1) {
                    this.setState('selection');
                } else {
                    this.setState('multiSelection');
                }
            },
            stateSelection: function (go) {
                if (passbolt.model.User.getCurrent().Role.name == 'admin') {
                    if (go) {
                        this.options.editionButton.setValue(this.options.selectedUsers[0]).setState('ready');
                        this.options.deletionButton.setValue(this.options.selectedUsers).setState('ready');
                    } else {
                        this.options.editionButton.setValue(null).setState('disabled');
                        this.options.deletionButton.setValue(null).setState('disabled');
                    }
                }
            },
            stateMultiSelection: function (go) {
                if (passbolt.model.User.getCurrent().Role.name == 'admin') {
                    if (go) {
                        this.options.editionButton.setState('disabled');
                        this.options.deletionButton.setValue(this.options.selectedUsers).setState('ready');
                    } else {
                        this.options.editionButton.setValue(null).setState('disabled');
                        this.options.deletionButton.setValue(null).setState('disabled');
                    }
                }
            }
        });
    var $__default = PeopleWorkspaceMenu;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/people_breadcrumb*/
define('app/component/people_breadcrumb', [
    'mad/component/component',
    'mad/component/menu',
    'app/model/filter',
    'app/model/category',
    'app/view/template/component/breadcrumb/breadcrumb.ejs!',
    'app/view/template/component/breadcrumb/breadcrumb_item.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    var PeopleBreadcrumb = passbolt.component.PeopleBreadcrumb = mad.Component.extend('passbolt.component.PeopleBreadcrumb', {
            defaults: {
                categories: passbolt.model.Category.List,
                templateUri: 'app/view/template/component/breadcrumb/breadcrumb.ejs',
                status: 'hidden',
                filter: null
            }
        }, {
            afterStart: function () {
                var menuSelector = '#' + this.getId() + ' ul';
                this.options.menu = new mad.component.Menu(menuSelector, { itemTemplateUri: 'app/view/template/component/breadcrumb/breadcrumb_item.ejs' });
                this.options.menu.start();
            },
            parseFilter: function (filter) {
                var menuItems = [];
                var menuItem = new mad.model.Action({
                        id: uuid(),
                        label: __('All users'),
                        action: function () {
                            var filter = new passbolt.model.Filter({
                                    label: __('All users'),
                                    type: passbolt.model.Filter.SHORTCUT
                                });
                            mad.bus.trigger('filter_users_browser', filter);
                        }
                    });
                menuItems.push(menuItem);
                if (typeof filter.foreignModels.Group != 'undefined') {
                    if (filter.foreignModels.Group.length == 1) {
                        var group = filter.foreignModels.Group[0];
                        var menuItem = new mad.model.Action({
                                id: uuid(),
                                label: group.name,
                                action: function () {
                                    mad.bus.trigger('group_selected', category);
                                }
                            });
                        menuItems.push(menuItem);
                    }
                } else if (typeof filter.keywords != 'undefined' && filter.keywords != '') {
                    var menuItem = new mad.model.Action({
                            id: uuid(),
                            label: __('Search : %s', filter.keywords)
                        });
                    menuItems.push(menuItem);
                } else {
                    if (typeof filter.label != 'undefined' && filter.label != __('All users')) {
                        var menuItem = new mad.model.Action({
                                id: uuid(),
                                label: filter.label
                            });
                        menuItems.push(menuItem);
                    }
                }
                return menuItems;
            },
            load: function (filter) {
                var menuItems = this.parseFilter(filter);
                this.options.menu.reset();
                this.options.menu.load(menuItems);
            }
        });
    var $__default = PeopleBreadcrumb;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/user/dragged_user.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/user/dragged_user.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_dragged_user_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="dragged_user" id="js_dragged_user">\n\tMove \'<span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return name;
                }));
                ___v1ew.push('</span>\' in a group\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*lib/can/util/domless/domless*/
System.set('lib/can/util/domless/domless', System.newModule({}));
/*lib/can/util/array/makeArray*/
System.set('lib/can/util/array/makeArray', System.newModule({}));
/*app/view/component/user_browser*/
define('app/view/component/user_browser', [
    'mad/view/component/grid',
    'app/view/template/component/user/dragged_user.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var UserBrowser = passbolt.view.component.UserBrowser = mad.view.component.Grid.extend('passbolt.view.component.UserBrowser', {}, {
            'insertItem': function (item, refItemId, position) {
                var $row = this._super(item, refItemId, position);
                var $name = $('.js_grid_column_name', $row);
            },
            'tbody tr contextmenu': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            },
            'tbody tr mousedown': function (el, ev) {
                var self = this;
                ev.stopPropagation();
                ev.preventDefault();
                if (ev.which == 3) {
                    var data = null, tr = el;
                    if (this.getController().getItemClass()) {
                        data = tr.data(this.getController().getItemClass().fullName);
                    } else {
                        data = tr[0].id;
                    }
                    setTimeout(function () {
                        self.element.trigger('item_right_selected', [
                            data,
                            ev
                        ]);
                    }, 0);
                }
                return false;
            }
        });
    var $__default = UserBrowser;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/user_browser*/
define('app/component/user_browser', [
    'moment',
    'mad/component/grid',
    'mad/form/element/checkbox',
    'app/model/user',
    'app/model/group',
    'app/model/profile',
    'app/view/component/user_browser'
], function ($__0, $__2, $__3, $__4, $__5, $__6, $__7) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    var moment = $__0.default;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    var UserBrowser = passbolt.component.UserBrowser = mad.component.Grid.extend('passbolt.component.UserBrowser', {
            defaults: {
                itemClass: passbolt.model.User,
                viewClass: passbolt.view.component.UserBrowser,
                users: new can.Model.List(),
                groups: [],
                selectedUsers: new can.Model.List(),
                silentLoading: false
            }
        }, {
            init: function (el, options) {
                options.map = new mad.Map({
                    id: 'id',
                    name: 'name',
                    username: 'username',
                    modified: 'modified',
                    Group: 'Group',
                    Profile: 'Profile'
                });
                options.columnModel = [
                    {
                        name: 'multipleSelect',
                        index: 'multipleSelect',
                        header: {
                            css: ['selections s-cell'],
                            label: '<div class="input checkbox">' + '<input type="checkbox" name="select all" value="checkbox-select-all" id="checkbox-select-all-people" disabled="disabled">' + '<label for="checkbox-select-all-people">select all</label>                                     </div>'
                        },
                        cellAdapter: function (cellElement, cellValue, mappedItem, item, columnModel) {
                            var availableValues = [];
                            availableValues[item.id] = '';
                            var checkbox = mad.helper.Component.create(cellElement, 'inside_replace', mad.form.Checkbox, {
                                    id: 'multiple_select_checkbox_' + item.id,
                                    name: 'test',
                                    cssClasses: ['js_checkbox_multiple_select'],
                                    availableValues: availableValues
                                });
                            checkbox.start();
                        }
                    },
                    {
                        name: 'avatar',
                        index: 'Profile',
                        header: {
                            css: ['s-cell'],
                            label: ''
                        },
                        titleAdapter: function (value, mappedItem, item, columnModel) {
                            return 'avatar';
                        },
                        valueAdapter: function (value, mappedItem, item, columnModel) {
                            return '<img src="' + item.Profile.avatarPath('small') + '" alt="' + __('Picture of: ') + mappedItem.Profile.first_name + ' ' + mappedItem.Profile.last_name + '" width="30" height="30">';
                        }
                    },
                    {
                        name: 'name',
                        index: 'Profile',
                        header: {
                            css: ['m-cell'],
                            label: __('User')
                        },
                        valueAdapter: function (value, mappedItem, item, columnModel) {
                            return mappedItem.Profile.first_name + ' ' + mappedItem.Profile.last_name;
                        }
                    },
                    {
                        name: 'username',
                        index: 'username',
                        header: {
                            css: ['m-cell'],
                            label: __('Username')
                        }
                    },
                    {
                        name: 'modified',
                        index: 'modified',
                        header: {
                            css: ['m-cell'],
                            label: __('Modified')
                        },
                        valueAdapter: function (value, mappedItem, item, columnModel) {
                            return moment(value).fromNow();
                        }
                    }
                ];
                this._super(el, options);
            },
            showContextualMenu: function (item, x, y, eventTarget) {
                var $item = $('#' + item.id);
                var item_offset = $item.offset();
                var contextualMenu = new mad.component.ContextualMenu(null, {
                        state: 'hidden',
                        source: eventTarget,
                        coordinates: {
                            x: x,
                            y: item_offset.top
                        }
                    });
                contextualMenu.start();
                var action = new mad.model.Action({
                        id: uuid(),
                        label: 'Copy public key',
                        action: function (menu) {
                            var data = {
                                    name: 'public key',
                                    data: item.Gpgkey.key
                                };
                            mad.bus.trigger('passbolt.clipboard', data);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: uuid(),
                        label: 'Copy email address',
                        cssClasses: ['separator-after'],
                        action: function (menu) {
                            var data = {
                                    name: 'email',
                                    data: item.username
                                };
                            mad.bus.trigger('passbolt.clipboard', data);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: uuid(),
                        label: 'Edit',
                        action: function (menu) {
                            mad.bus.trigger('request_user_edition', item);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                var action = new mad.model.Action({
                        id: uuid(),
                        label: 'Delete',
                        action: function (menu) {
                            mad.bus.trigger('request_user_deletion', item);
                            menu.remove();
                        }
                    });
                contextualMenu.insertItem(action);
                contextualMenu.setState('ready');
            },
            insertItem: function (user, refUserId, position) {
                this.options.users.push(user);
                this._super(user, refUserId, position);
            },
            refreshItem: function (item) {
                this._super(item);
                if (this.options.selectedUsers.length > 0) {
                    this.select(this.options.selectedUsers[0]);
                }
            },
            removeItem: function (item) {
                this._super(item);
            },
            reset: function () {
                this.options.users.splice(0, this.options.users.length);
            },
            load: function (users) {
                this._super(users);
            },
            beforeSelect: function (item) {
                var self = this, returnValue = true;
                if (this.state.is('selection')) {
                    if (this.options.selectedUsers.length > 0 && this.options.selectedUsers[0].id == item.id) {
                        this.unselect(item);
                        this.setState('ready');
                        returnValue = false;
                    } else {
                        for (var i = this.options.selectedUsers.length - 1; i > -1; i--) {
                            this.unselect(this.options.selectedUsers[i]);
                        }
                    }
                }
                return returnValue;
            },
            select: function (item, silent) {
                silent = typeof silent == 'undefined' ? false : silent;
                if (!this.state.is('multipleSelection') && this.options.selectedUsers.length > 0) {
                    this.unselect(this.options.selectedUsers[0]);
                }
                this.options.selectedUsers.push(item);
                var checkbox = mad.getControl('multiple_select_checkbox_' + item.id, 'mad.form.Checkbox');
                checkbox.setValue([item.id]);
                this.view.selectItem(item);
                if (!silent) {
                    mad.bus.trigger('user_selected', item);
                }
            },
            beforeUnselect: function (item) {
                var returnValue = true;
                return returnValue;
            },
            unselect: function (item, silent) {
                silent = typeof silent == 'undefined' ? false : silent;
                var controlId = 'multiple_select_checkbox_' + item.id, checkbox = mad.getControl(controlId, 'mad.form.Checkbox');
                checkbox.reset();
                this.view.unselectItem(item);
                mad.model.List.remove(this.options.selectedUsers, item);
                if (!silent) {
                    mad.bus.trigger('user_unselected', item);
                }
            },
            '{passbolt.model.User} created': function (model, ev, user) {
                var self = this;
                self.insertItem(user, null, 'first');
                return false;
            },
            '{passbolt.model.User} updated': function (model, ev, user) {
                if (this.options.users.indexOf(user) != -1) {
                    this.refreshItem(user);
                }
            },
            '{users} remove': function (model, ev, users) {
                var self = this;
                can.each(users, function (user, i) {
                    self.removeItem(user);
                });
            },
            '{passbolt.model.GroupUser} destroyed': function (model, ev, groupUser) {
                for (i in this.options.users) {
                    if (this.options.users[i].id == groupUser.user_id) {
                        break;
                    }
                }
                this.options.users.splice(i, 1);
                for (i in this.options.selectedUsers) {
                    if (this.options.selectedUsers[i].id == groupUser.user_id) {
                        this.options.selectedUsers.splice(i, 1);
                    }
                }
            },
            ' item_selected': function (el, ev, item, srcEvent) {
                this.setState('selection');
                if (this.beforeSelect(item)) {
                    this.select(item);
                }
            },
            ' item_right_selected': function (el, ev, item, srcEvent) {
                this.select(item);
                this.showContextualMenu(item, srcEvent.pageX, srcEvent.pageY, srcEvent.target);
            },
            '.js_checkbox_multiple_select checked': function (el, ev, userId) {
                if (this.state.is('ready')) {
                    this.setState('selection');
                } else if (this.state.is('selection')) {
                    this.setState('multipleSelection');
                }
                var i = mad.model.List.indexOf(this.options.users, userId);
                var user = this.options.users[i];
                if (this.beforeSelect(user)) {
                    this.select(user);
                }
            },
            '.js_checkbox_multiple_select unchecked': function (el, ev, userId) {
                var self = this;
                var i = mad.model.List.indexOf(this.options.users, userId);
                var user = this.options.users[i];
                if (this.beforeUnselect()) {
                    self.unselect(user);
                }
                if (!this.options.selectedUsers.length) {
                    this.setState('ready');
                } else if (this.options.selectedUsers.length == 1) {
                    this.setState('selection');
                }
            },
            '{mad.bus.element} filter_users_browser': function (element, evt, filter) {
                if (!this.element)
                    return;
                var self = this;
                this.filter = filter;
                this.options.groups = [];
                var filteredGroup = filter.getForeignModels('Group');
                if (filteredGroup) {
                    can.each(filteredGroup, function (group, i) {
                        self.options.groups.push(group.id);
                    });
                }
                this.setState('loading');
                passbolt.model.User.findAll({
                    filter: this.filter,
                    recursive: true
                }, function (users, response, request) {
                    self.load(users);
                    self.setState('ready');
                });
            },
            stateReady: function (go) {
            },
            stateSelection: function (go) {
            },
            stateMultipleSelection: function (go) {
            }
        });
    var $__default = UserBrowser;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/user_shortcuts*/
define('app/component/user_shortcuts', ['mad/component/menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var UserShortcuts = passbolt.component.UserShortcuts = mad.component.Menu.extend('passbolt.component.UserShortcuts', { defaults: {} }, {
            afterStart: function () {
                var menuItems = [
                        new mad.model.Action({
                            id: uuid(),
                            label: __('All users'),
                            action: function () {
                                var filter = new passbolt.model.Filter({
                                        label: __('All users'),
                                        type: passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_users_browser', filter);
                            }
                        }),
                        new mad.model.Action({
                            id: uuid(),
                            label: __('Recently modified'),
                            action: function () {
                                var filter = new passbolt.model.Filter({
                                        label: __('Recently modified'),
                                        order: 'modified',
                                        type: passbolt.model.Filter.SHORTCUT
                                    });
                                mad.bus.trigger('filter_users_browser', filter);
                            }
                        })
                    ];
                this.load(menuItems);
            },
            '{mad.bus.element} filter_users_browser': function (element, evt, filter) {
                if (!this.element)
                    return;
                if (filter.type != passbolt.model.Filter.SHORTCUT) {
                    this.unselectAll();
                }
            }
        });
    var $__default = UserShortcuts;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/user_details*/
define('app/view/component/user_details', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var UserDetails = passbolt.view.component.UserDetails = mad.View.extend('passbolt.view.component.UserDetails', {}, {
            '.icon.close click': function (el, ev) {
                mad.Config.write('ui.workspace.showSidebar', false);
                mad.bus.trigger('workspace_showSidebar', false);
            },
            'a.copy-public-key click': function (el, ev) {
                ev.stopPropagation();
                ev.preventDefault();
                this.element.trigger('request_copy_publickey', [ev]);
            }
        });
    var $__default = UserDetails;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/user_details.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/user_details.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_user_details_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="user">\n\t<div class="header">\n\t\t<img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user.Profile.Avatar.url.small);
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'img', 'alt', this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push(' picture"', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n\t\t<h3>\n\t\t\t<span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</span>\n\t\t\t<span class="username">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</span>\n\t\t</h3>\n\t</div>\n\t<a href="#" class="dialog-close"><i class="icon close no-text"></i><span>close</span></a>\n\t<div class="detailed-information">\n\t\t<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Information');
                }));
                ___v1ew.push('</h4>\n\t\t<ul>\n\t\t\t<li class="username">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Password');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">**********</span>\n\t\t\t</li>\n\t\t\t<li class="role">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Role');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Role.name.charAt(0).toUpperCase() + user.Role.name.slice(1);
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="modified">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Modified');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return moment(user.modified).fromNow();
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t<div class="key-information">\n\t\t<h4>');
                ___v1ew.push(can.view.txt(1, 'h4', 0, this, function () {
                    return __('Public Key');
                }));
                ___v1ew.push('</h4>\n\t\t<ul>\n\t\t\t<li class="keyid">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Key id');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Gpgkey.key_id;
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="type">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Type');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Gpgkey.type;
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="created">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Created');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Gpgkey.key_created;
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="expires">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Expires');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Gpgkey.expires;
                }));
                ___v1ew.push('</span>\n\t\t\t</li>\n\t\t\t<li class="key">\n\t\t\t\t<span class="label">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return __('Public key');
                }));
                ___v1ew.push('</span>\n\t\t\t\t<span class="value">\n\t\t\t\t\t<a href="#" class="button copy-public-key">\n\t\t\t\t\t\t<span>copy</span>\n\t\t\t\t\t</a>\n\t\t\t\t</span>\n\t\t\t</li>\n\t\t\t<li class="gpgkey">\n\t\t\t\t<textarea class="code"', can.view.pending({ scope: this }), '>');
                ___v1ew.push(can.view.txt(1, 'textarea', 0, this, function () {
                    return user.Gpgkey.key;
                }));
                ___v1ew.push('</textarea>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/user_details*/
define('app/component/user_details', [
    'mad/view/component/tree',
    'app/view/component/user_details',
    'app/view/template/component/user_details.ejs!'
], function ($__0, $__1, $__2) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    $__0;
    $__1;
    $__2;
    var UserDetails = passbolt.component.UserDetails = mad.Component.extend('passbolt.component.UserDetails', {
            defaults: {
                label: 'User Details Controller',
                viewClass: passbolt.view.component.UserDetails,
                resource: null,
                selectedUsers: new can.Model.List(),
                templateUri: 'app/view/template/component/user_details.ejs'
            }
        }, {
            beforeRender: function () {
                this._super();
                this.setViewData('user', this.options.user);
            },
            load: function (user) {
                this.options.user = user;
                if (this.state.is(null)) {
                    this.start();
                } else {
                    this.refresh();
                }
                this.on();
            },
            isDisabled: function () {
                if (this.state.is('disabled') || this.state.is(null) && (this.options.state == 'disabled' || $.isArray(this.options.state) && this.options.state.indexOf('disabled') != -1)) {
                    return true;
                }
                return false;
            },
            stateReady: function (go) {
                if (go) {
                    this.view.show();
                }
                this._super(go);
            },
            ' request_copy_publickey': function (el, ev) {
                var gpgKey = this.options.selectedUsers[0].Gpgkey.key;
                var data = {
                        name: 'Public key',
                        data: gpgKey
                    };
                mad.bus.trigger('passbolt.clipboard', data);
            },
            '{user} updated': function (user) {
                if (!this.isDisabled()) {
                    this.refresh();
                }
            },
            '{mad.bus.element} workspace_showSidebar': function (el, ev, show) {
                if (!this.element)
                    return;
                if (show) {
                    if (this.state.is(null)) {
                        this.options.state = 'ready';
                    } else {
                        this.setState('ready');
                        if (this.options.selectedUsers.length == 1) {
                            this.refresh();
                        }
                    }
                } else {
                    if (this.state.is(null)) {
                        this.options.state = [
                            'hidden',
                            'disabled'
                        ];
                    } else {
                        this.setState([
                            'hidden',
                            'disabled'
                        ]);
                    }
                }
            },
            '{selectedUsers} add': function (el, ev, user) {
                if (this.options.selectedUsers.length == 0 || this.options.selectedUsers.length > 1) {
                    this.options.user = null;
                    if (!this.isDisabled()) {
                        this.setState('hidden');
                    }
                } else {
                    this.options.user = this.options.selectedUsers[0];
                    if (!this.isDisabled()) {
                        this.load(this.options.user);
                        this.setState('ready');
                    }
                }
            },
            '{selectedUsers} remove': function (el, ev, user) {
                if (this.options.selectedUsers.length == 0 || this.options.selectedUsers.length > 1) {
                    this.options.user = null;
                    if (!this.isDisabled() && !this.state.is(null)) {
                        this.setState('hidden');
                    }
                } else {
                    this.options.user = this.options.selectedUsers[0];
                    if (!this.isDisabled()) {
                        this.load(this.options.user);
                        this.setState('ready');
                    }
                }
            }
        });
    var $__default = UserDetails;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/people_workspace.ejs!lib/can/view/ejs/system*/
define('app/view/template/people_workspace.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_people_workspace_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="js_users_workspace">\n    <div class="panel left">\n\t\t<div class="navigation first shortcuts">\n\t\t\t<ul id="js_wsp_users_filter_shortcuts" class="clearfix">\n\t\t\t</ul>\n\t\t</div>\n        <div class="navigation last tree groups">\n            <ul id="js_wsp_users_group_chooser">\n            </ul>\n        </div>\n    </div>\n    <div class="panel middle">\n        <div id="js_wsp_users_breadcrumb" class="breadcrumbs">\n        </div>\n        <div id="js_wsp_users_browser" class="tableview">\n        </div>\n    </div>\n    <div class="panel aside js_wsp_users_sidebar_second" ');
                ___v1ew.push(can.view.txt(2, 'div', 'style', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('style="');
                    ___v1ew.push('display:none"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('>\n    </div>\n</div>');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/people_workspace*/
define('app/component/people_workspace', [
    'mad/component/component',
    'mad/component/dialog',
    'mad/component/confirm',
    'app/component/people_workspace_menu',
    'app/component/workspace_secondary_menu',
    'app/component/people_breadcrumb',
    'app/component/user_browser',
    'app/component/user_shortcuts',
    'app/component/user_details',
    'app/form/user/create',
    'app/model/user',
    'app/model/filter',
    'app/view/template/people_workspace.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9, $__10, $__11, $__12) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    var PeopleWorkspace = passbolt.component.PeopleWorkspace = mad.Component.extend('passbolt.component.PeopleWorkspace', {
            defaults: {
                label: 'People',
                templateUri: 'app/view/template/people_workspace.ejs',
                selectedUsers: new can.Model.List(),
                selectedGroups: new can.Model.List(),
                filter: new passbolt.model.Filter(),
                silentLoading: false
            }
        }, {
            afterStart: function () {
                var primWkMenu = mad.helper.Component.create($('#js_wsp_primary_menu_wrapper'), 'last', passbolt.component.PeopleWorkspaceMenu, {
                        selectedUsers: this.options.selectedUsers,
                        selectedGroups: this.options.selectedGroups
                    });
                primWkMenu.start();
                var secWkMenu = mad.helper.Component.create($('#js_wsp_secondary_menu_wrapper'), 'last', passbolt.component.WorkspaceSecondaryMenu, {});
                secWkMenu.start();
                this.breadcrumCtl = new passbolt.component.PeopleBreadcrumb($('#js_wsp_users_breadcrumb'), {});
                this.breadcrumCtl.start();
                var userShortcut = new passbolt.component.UserShortcuts('#js_wsp_users_filter_shortcuts', {});
                userShortcut.start();
                var userBrowserController = new passbolt.component.UserBrowser('#js_wsp_users_browser', { selectedUsers: this.options.selectedUsers });
                userBrowserController.start();
                var userDetails = new passbolt.component.UserDetails($('.js_wsp_users_sidebar_second', this.element), {
                        id: 'js_user_details',
                        selectedUsers: this.options.selectedUsers
                    });
                var filter = null;
                if (this.options.filter) {
                    filter = this.options.filter;
                } else {
                    filter = new passbolt.model.Filter({
                        label: __('All users'),
                        type: passbolt.model.Filter.SHORTCUT
                    });
                }
                mad.bus.trigger('filter_users_browser', filter);
            },
            destroy: function () {
                $('#js_wsp_primary_menu_wrapper').empty();
                $('#js_wsp_secondary_menu_wrapper').empty();
                this._super();
            },
            '{mad.bus.element} group_selected': function (el, ev, group) {
                if (!this.element)
                    return;
                console.log('group selected');
                this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
                this.options.filter.attr({
                    foreignModels: { Group: new can.List([group]) },
                    type: passbolt.model.Filter.FOREIGN_MODEL
                });
                mad.bus.trigger('filter_users_browser', this.options.filter);
                this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
                this.options.selectedGroups.push(group);
            },
            '{mad.bus.element} filter_users_browser': function (el, ev, filter) {
                if (!this.element)
                    return;
                if (typeof filter.name != 'undefined') {
                    if (filter.name == 'all') {
                        this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
                    }
                }
                this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
                this.breadcrumCtl.load(filter);
            },
            '{mad.bus.element} request_group_creation': function (el, ev, data) {
                if (!this.element)
                    return;
                var group = new passbolt.model.Group();
                var dialog = new mad.component.Dialog(null, { label: __('Create a new Group') }).start();
                var form = dialog.add(passbolt.form.group.Create, {
                        data: group,
                        callbacks: {
                            submit: function (data) {
                                var instance = new passbolt.model.Group(data['passbolt.model.Group']).save();
                                dialog.remove();
                            }
                        }
                    });
                form.load(group);
            },
            '{mad.bus.element} request_group_edition': function (el, ev, group) {
                if (!this.element)
                    return;
                var dialog = new mad.component.Dialog(null, { label: __('Edit a Group') }).start();
                var form = dialog.add(passbolt.form.group.Create, {
                        data: group,
                        callbacks: {
                            submit: function (data) {
                                group.attr(data['passbolt.model.Group']).save();
                                dialog.remove();
                            }
                        }
                    });
                form.load(group);
            },
            '{mad.bus.element} request_group_deletion': function (el, ev, group) {
                if (!this.element)
                    return;
                group.destroy();
            },
            '{mad.bus.element} request_user_creation': function (el, ev, data) {
                if (!this.element)
                    return;
                var user = new passbolt.model.User({ active: 1 });
                var dialog = new mad.component.Dialog(null, { label: __('Add User') }).start();
                var form = dialog.add(passbolt.form.user.Create, {
                        data: user,
                        action: 'create',
                        callbacks: {
                            submit: function (data) {
                                var user = new passbolt.model.User(data['passbolt.model.User']);
                                user.save(function () {
                                    dialog.remove();
                                }, function (v) {
                                    form.showErrors(JSON.parse(v.responseText)['body']);
                                });
                            }
                        }
                    });
                form.load(user);
            },
            '{mad.bus.element} request_user_edition': function (el, ev, user) {
                if (!this.element)
                    return;
                var self = this;
                user = this.options.selectedUsers[0];
                var dialog = new mad.component.Dialog(null, { label: __('Edit User') }).start();
                var form = dialog.add(passbolt.form.user.Create, {
                        data: user,
                        action: 'edit',
                        callbacks: {
                            submit: function (data) {
                                user.attr(data['passbolt.model.User']).save(function () {
                                    dialog.remove();
                                }, function (v) {
                                    form.showErrors(JSON.parse(v.responseText)['body']);
                                });
                            }
                        }
                    });
                form.load(user);
            },
            '{mad.bus.element} request_user_deletion': function (el, ev) {
                var args = arguments;
                var confirm = new mad.component.Confirm(null, {
                        label: __('Do you really want to delete user ?'),
                        content: __('Please confirm you really want to delete the user. After clicking ok, it will be deleted permanently.'),
                        action: function () {
                            for (var i = 2; i < args.length; i++) {
                                var user = args[i];
                                if (!(user instanceof passbolt.model.User)) {
                                    throw new mad.error.Exception('The parameter ' + i + ' should be an instance of passbolt.model.User');
                                }
                                user.destroy();
                            }
                        }
                    }).start();
            },
            '{mad.bus.element} request_remove_user_from_group': function (el, ev, selectedUsers, selectedGroups) {
                if (!this.element)
                    return;
                if (selectedGroups.attr('length') == 0) {
                    return;
                }
                if (selectedUsers.attr('length') == 0) {
                    return;
                }
                var groupId = selectedGroups[0]['id'];
                for (i in selectedUsers) {
                    for (j in selectedUsers[i]['GroupUser']) {
                        if (selectedUsers[i]['GroupUser'][j]['group_id'] == groupId) {
                            selectedUsers[i]['GroupUser'][j].destroy();
                        }
                    }
                }
            }
        });
    var $__default = PeopleWorkspace;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/app_navigation_left*/
define('app/component/app_navigation_left', ['mad/component/menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var AppNavigationLeft = passbolt.component.AppNavigationLeft = mad.component.Menu.extend('passbolt.component.AppNavigationLeft', { 'defaults': {} }, {
            afterStart: function () {
                var menuItems = [
                        new mad.model.Action({
                            'id': 'js_app_nav_left_home_link',
                            'label': __('home'),
                            'cssClasses': ['home'],
                            'action': function () {
                                mad.bus.trigger('workspace_selected', 'password');
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_app_nav_left_pwd_wsp_link',
                            'label': __('passwords'),
                            'cssClasses': ['passwords'],
                            'action': function () {
                                mad.bus.trigger('workspace_selected', 'password');
                            }
                        }),
                        new mad.model.Action({
                            'id': 'js_app_nav_left_user_wsp_link',
                            'label': __('users'),
                            'cssClasses': ['users'],
                            'action': function () {
                                mad.bus.trigger('workspace_selected', 'people');
                            }
                        })
                    ];
                this.load(menuItems);
            }
        });
    var $__default = AppNavigationLeft;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/app_navigation_right*/
define('app/component/app_navigation_right', ['mad/component/menu'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var AppNavigationRight = passbolt.component.AppNavigationRight = mad.component.Menu.extend('passbolt.component.AppNavigationRight', { defaults: {} }, {
            afterStart: function () {
                var menuItems = [new mad.model.Action({
                            'id': uuid(),
                            'label': __('logout'),
                            'cssClasses': ['logout'],
                            'action': function () {
                                document.location.href = APP_URL + '/logout';
                            }
                        })];
                this.load(menuItems);
            }
        });
    return {};
});
/*app/view/template/component/app_filter.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/app_filter.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_app_filter_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<form id="js_app_filter_form" class="search">\n\t<!-- <ul id="js_filter_tags" class="tags"></ul> -->\n    <div class="input search required">\n        <label for="js_app_filter_keywords"> Search</label>\n        <input id="js_app_filter_keywords" class="required" maxlength="50" type="search" placeholder="search" />\n    </div>\n    <button value="search">\n        <i class="icon search"></i>\n        <span class="text visuallyhidden">search</span>\n    </button>\n</form>\n<!-- <form id="js_filter_form">\n    <ul id="js_filter_tags" class="tags"></ul>\n    <fieldset>\n        <legend>\n            Please enter a search keyword\n        </legend>\n        <div class="input text required">\n            <label for="js_filter_keywords">\n                Search</label>\n            <input id="js_filter_keywords" class="required" maxlength="50" type="text"/>\n        </div>\n    </fieldset>\n    <span id="js_filter_reset" class="control reset">x</span>\n    <div class="submit">\n        <input type="submit" />\n    </div>\n</form> -->');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/view/component/app_filter*/
define('app/view/component/app_filter', [
    'mad/view/view',
    'app/view/template/component/app_filter.ejs!'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var AppFilter = passbolt.view.component.AppFilter = mad.View.extend('passbolt.view.component.AppFilter', { defaults: {} }, {
            'form submit': function (el, ev) {
                this.element.trigger('update');
            }
        });
    var $__default = AppFilter;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/app_filter*/
define('app/component/app_filter', [
    'mad/component/component',
    'mad/form/form',
    'mad/form/element/textbox',
    'app/view/component/app_filter',
    'app/model/filter',
    'app/view/template/component/app_filter.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    var AppFilter = passbolt.component.AppFilter = mad.Component.extend('passbolt.component.AppFilter', {
            defaults: {
                templateUri: 'app/view/template/component/app_filter.ejs',
                viewClass: passbolt.view.component.AppFilter
            }
        }, {
            afterStart: function (options) {
                this.filterForm = new mad.Form('#js_app_filter_form', {});
                this.filterForm.start();
                this.keywordsFormElement = this.filterForm.addElement(new mad.form.Textbox('#js_app_filter_keywords', { modelReference: 'passbolt.model.Filter.keywords' }));
                this.keywordsFormElement.start();
                this.workspace = 'password';
            },
            reset: function () {
                this.keywordsFormElement.setValue('');
            },
            '{mad.bus.element} category_selected': function (el, ev, category) {
                if (!this.element)
                    return;
                this.reset();
            },
            '{mad.bus.element} workspace_selected': function (el, event, workspace) {
                if (!this.element)
                    return;
                this.workspace = workspace;
                if (this.workspace == 'password') {
                    this.keywordsFormElement.element.attr('placeholder', 'search passwords');
                } else {
                    this.keywordsFormElement.element.attr('placeholder', 'search people');
                }
            },
            ' update': function (el, ev) {
                var data = this.filterForm.getData(), filter = new passbolt.model.Filter(data['passbolt.model.Filter']);
                if (this.workspace == 'password') {
                    mad.bus.trigger('filter_resources_browser', filter);
                } else if (this.workspace == 'people') {
                    mad.bus.trigger('filter_users_browser', filter);
                } else if (this.workspace == 'settings') {
                    mad.bus.trigger('workspace_selected', [
                        'people',
                        { filter: filter }
                    ]);
                }
            },
            ' reset': function (el, ev) {
                this.reset();
                var filter = new passbolt.model.Filter({
                        'keywords': '',
                        'tags': []
                    });
                mad.bus.trigger('filter_resources_browser', filter);
            }
        });
    var $__default = AppFilter;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/profile_dropdown.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/profile_dropdown.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_profile_dropdown_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div class="center-cell-wrapper">\n    <div class="details center-cell">\n        <span class="name">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.first_name;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.Profile.last_name;
                }));
                ___v1ew.push('</span>\n        <span class="email">');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return user.username;
                }));
                ___v1ew.push('</span>\n    </div>\n</div>\n<div class="picture left-cell">\n    <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push(user['Profile'].avatarPath('small'));
                    ___v1ew.push('"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="your picture"', can.view.pending({ scope: this }), '/>');
                ___v1ew.push('\n</div>\n<div class="more right-cell">\n    <a href="#"><span>more</span></a>\n</div>\n<ul class="dropdown-content right">\n</ul>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/profile_dropdown*/
define('app/component/profile_dropdown', [
    'mad/component/component',
    'mad/component/button_dropdown',
    'app/model/user',
    'app/view/template/component/profile_dropdown.ejs!'
], function ($__0, $__1, $__2, $__3) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    $__0;
    $__1;
    $__2;
    $__3;
    var ProfileDropdown = passbolt.component.ProfileDropdown = mad.component.ButtonDropdown.extend('passbolt.component.ProfileDropdown', {
            defaults: {
                label: null,
                cssClasses: [],
                templateBased: true,
                templateUri: 'app/view/template/component/profile_dropdown.ejs',
                contentElement: '#js_app_profile_dropdown .dropdown-content',
                user: null
            }
        }, {
            afterStart: function () {
                this._super();
                var self = this;
                self.options.user = passbolt.model.User.getCurrent();
                var action = new mad.model.Action({
                        'id': uuid(),
                        'label': 'my profile',
                        'action': function (menu) {
                            mad.bus.trigger('workspace_selected', 'settings');
                            mad.bus.trigger('request_settings_section', 'profile');
                            self.view.close();
                        }
                    });
                this.options.menu.insertItem(action);
                var action = new mad.model.Action({
                        'id': uuid(),
                        'label': 'manage your keys',
                        'action': function (menu) {
                            mad.bus.trigger('workspace_selected', 'settings');
                            mad.bus.trigger('request_settings_section', 'keys');
                            self.view.close();
                        }
                    });
                this.options.menu.insertItem(action);
                var action = new mad.model.Action({
                        'id': uuid(),
                        'label': 'logout',
                        'action': function (menu) {
                            document.location.href = APP_URL + '/logout';
                        }
                    });
                this.options.menu.insertItem(action);
            },
            beforeRender: function () {
                this._super();
                this.setViewData('user', this.options.user);
            },
            '{user} updated': function (user) {
                if (!this.state.is('disabled') && !this.state.is(null)) {
                    this.refresh();
                }
            }
        });
    var $__default = ProfileDropdown;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/model/notification*/
define('app/model/notification', ['mad/model/model'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Notification = passbolt.model.Notification = mad.Model.extend('passbolt.model.Notification', {
            attributes: {
                status: 'string',
                title: 'string'
            }
        }, {});
    var $__default = Notification;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/notification*/
define('app/view/component/notification', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var Notification = passbolt.view.component.Notification = mad.View.extend('passbolt.view.component.Notification', {
            defaults: {
                timeout: 2500,
                notifications: []
            }
        }, {
            init: function (elt, opts, notifications) {
                var timeoutConf = mad.Config.read('notification.timeout');
                if (typeof timeoutConf != 'undefined') {
                    this.options.timeout = timeoutConf;
                }
                this._super(elt, opts);
            },
            load: function (notification) {
                this.notifications.push(notification);
            },
            render: function () {
                var self = this;
                var notifications = this.getController().options.notifications, notification = notifications.shift();
                this.getController().setViewData(notification);
                setTimeout(function () {
                    if (notifications.length) {
                        self.getController().refresh();
                    } else {
                        self.getController().setState('hidden');
                    }
                }, self.options.timeout);
                return this._super();
            }
        });
    var $__default = Notification;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/component/notification.ejs!lib/can/view/ejs/system*/
define('app/view/template/component/notification.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_component_notification_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<span class="message animated fadeInUp ');
                ___v1ew.push(can.view.txt(true, 'span', 'class', this, function () {
                    return title;
                }));
                ___v1ew.push(' ');
                ___v1ew.push(can.view.txt(true, 'span', 'class', this, function () {
                    return status;
                }));
                ___v1ew.push('" id="notification_');
                ___v1ew.push(can.view.txt(true, 'span', 'id', this, function () {
                    return id;
                }));
                ___v1ew.push('"', can.view.pending({ scope: this }), '>');
                ___v1ew.push('\n    <strong>');
                ___v1ew.push(can.view.txt(1, 'strong', 0, this, function () {
                    return status;
                }));
                ___v1ew.push('</strong>\n    ');
                ___v1ew.push(can.view.txt(1, 'span', 0, this, function () {
                    return message;
                }));
                ___v1ew.push('\n</span>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/notification*/
define('app/component/notification', [
    'mad/component/component',
    'app/model/notification',
    'app/view/component/notification',
    'app/util/common',
    'app/view/template/component/notification.ejs!'
], function ($__0, $__1, $__2, $__3, $__4) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    var Notification = passbolt.component.Notification = mad.Component.extend('passbolt.component.Notification', {
            defaults: {
                label: 'Notification Component',
                viewClass: passbolt.view.component.Notification,
                status: 'hidden',
                notifications: [],
                templateUri: 'app/view/template/component/notification.ejs'
            }
        }, {
            _getNotificationSettings: function (notification) {
                var notifSettings = mad.Config.read('notification.messages.' + notification.title);
                if (notifSettings == undefined) {
                    return null;
                }
                if (can.getObject('severity', notifSettings) == undefined) {
                    notifSettings.severity = notification.status != undefined ? notification.status : 'notice';
                }
                if (can.getObject('group', notifSettings) == undefined) {
                    notifSettings.group = 'main';
                }
                if (can.getObject('msg', notifSettings) == undefined) {
                    return null;
                }
                return notifSettings;
            },
            _buildMessage: function (notification, settings) {
                var msg = can.getObject('msg', settings);
                var variables = msg.match(/%([^%]*)%/g);
                var data = notification.data;
                for (var i in variables) {
                    var dataKey = variables[i].replace(/%/g, '');
                    var value = can.getObject(dataKey, data);
                    if (value == undefined) {
                        value = 'undefined';
                    }
                    msg = msg.replace(variables[i], value);
                }
                return msg;
            },
            _populateNotification: function (notification, settings) {
                if (!mad.Config.read('notification.messages.' + notification.title)) {
                    return null;
                }
                notification.message = this._buildMessage(notification, settings);
                notification.status = notification.status != undefined ? notification.status : settings.severity;
                notification.severity = settings.severity;
                notification.id = passbolt.Common.uuid(notification.title);
                return notification;
            },
            _checkShouldBeDisplayed: function (notification, settings) {
                var displaySeverity = mad.Config.read('notification.displaySeverity');
                if (displaySeverity == undefined) {
                    return false;
                }
                if (displaySeverity.indexOf(notification.severity) != -1) {
                    return true;
                }
                return false;
            },
            load: function (notification) {
                var notifSettings = this._getNotificationSettings(notification);
                if (notifSettings === null) {
                    return;
                }
                var notification = this._populateNotification(notification, notifSettings);
                var display = this._checkShouldBeDisplayed(notification, notifSettings);
                if (notification === null) {
                    return;
                }
                if (display === false) {
                    return;
                }
                this.options.notifications.push(notification);
                if (this.view == null) {
                    this.start();
                } else if (this.state.is('hidden')) {
                    this.refresh();
                    this.setState('ready');
                }
            },
            '{mad.bus.element} passbolt_notify': function (el, ev, notif) {
                this.load(new passbolt.model.Notification(notif));
            }
        });
    var $__default = Notification;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/component/loading_bar*/
define('app/view/component/loading_bar', ['mad/view/view'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    var LoadingBar = passbolt.view.component.LoadingBar = mad.View.extend('passbolt.view.component.LoadingBar', { 'defaults': {} }, {
            update: function (size, animate, callback) {
                animate = typeof animate != 'undefined' ? animate : true;
                callback = callback || null;
                var percent = size + '%';
                if (animate) {
                    $('.progress-bar span', this.element).animate({ width: percent }, callback);
                } else {
                    $('.progress-bar span', this.element).css('width', percent);
                    if (callback) {
                        callback();
                    }
                }
            }
        });
    var $__default = LoadingBar;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/component/loading_bar*/
define('app/component/loading_bar', [
    'mad/component/component',
    'app/view/component/loading_bar'
], function ($__0, $__1) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    $__0;
    $__1;
    var LoadingBar = passbolt.component.LoadingBar = mad.Component.extend('passbolt.component.LoadingBar', {
            defaults: {
                label: 'Loading Bar Component',
                viewClass: passbolt.view.component.LoadingBar,
                templateBased: false,
                currentProcs: 0,
                previousProcs: 0,
                maxProcs: 0,
                loadingPercent: 0,
                postponedUpdate: false,
                progressionLeft: 100
            }
        }, {
            loading_start: function (callback) {
                this.view.update(20, true, function () {
                    if (callback) {
                        callback();
                    }
                });
            },
            loading_complete: function (callback) {
                var self = this;
                this.options.progressionLeft = 100;
                this.view.update(100, true, function () {
                    self.view.update(0, false);
                    if (callback) {
                        callback();
                    }
                });
            },
            stateLoading: function (go) {
            },
            update: function (postponedUpdate) {
                var self = this;
                if (typeof postponedUpdate != 'undefined' && postponedUpdate) {
                    this.options.postponedUpdate = false;
                }
                if (this.state.is('updating')) {
                    if (!this.options.postponedUpdate) {
                        this.options.postponedUpdate = true;
                        setTimeout(function () {
                            self.update(true);
                        }, 100);
                    }
                    return;
                } else {
                    this.state.addState('updating');
                }
                var currentProcs = this.options.currentProcs;
                if (this.options.maxProcs < currentProcs) {
                    this.options.maxProcs = currentProcs;
                }
                var diffProcs = currentProcs - this.options.previousProcs;
                if (!diffProcs) {
                    this.state.removeState('updating');
                } else if (!currentProcs) {
                    this.state.addState('completing');
                    this.loading_complete(function () {
                        mad.bus.trigger('passbolt_application_loading_completed', [this]);
                        self.state.setState('ready');
                    });
                } else {
                    if (!this.state.is('progressing')) {
                        mad.bus.trigger('passbolt_application_loading', [this]);
                        this.state.addState('progressing');
                    }
                    var procSpace = 100 / this.options.maxProcs * 1 / 2;
                    var spaceLeft = (this.options.maxProcs - (this.options.maxProcs - this.options.currentProcs)) * procSpace;
                    if (spaceLeft <= this.options.progressionLeft) {
                        this.options.progressionLeft = spaceLeft;
                    }
                    this.view.update(100 - this.options.progressionLeft, true, function () {
                        self.state.removeState('updating');
                    });
                }
                this.options.previousProcs = currentProcs;
            },
            '{mad.bus.element} passbolt_component_loading_start': function (el, ev, component) {
                if (!component.options.silentLoading) {
                    this.options.currentProcs++;
                    this.update();
                }
            },
            '{mad.bus.element} passbolt_component_loading_complete': function (el, ev, component) {
                if (!component.options.silentLoading) {
                    this.options.currentProcs--;
                    this.update();
                }
            },
            '{mad.bus.element} passbolt_ajax_request_start': function (el, ev, request) {
                if (!request.silentLoading) {
                    this.options.currentProcs++;
                    this.update();
                }
            },
            '{mad.bus.element} passbolt_ajax_request_complete': function (el, ev, request) {
                if (!request.silentLoading) {
                    this.options.currentProcs--;
                    this.update();
                }
            },
            '{mad.bus.element} passbolt_loading': function (el, ev) {
                this.options.currentProcs++;
                this.update();
            },
            '{mad.bus.element} passbolt_loading_complete': function (el, ev) {
                this.options.currentProcs--;
                this.update();
            }
        });
    var $__default = LoadingBar;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/view/template/app.ejs!lib/can/view/ejs/system*/
define('app/view/template/app.ejs!lib/can/view/ejs/system', ['can/view/ejs/ejs'], function (can) {
    return can.view.preloadStringRenderer('app_view_template_app_ejs', can.EJS(function (_CONTEXT, _VIEW) {
        with (_VIEW) {
            with (_CONTEXT) {
                var ___v1ew = [];
                ___v1ew.push('<div id="js_app_loading_bar" class="update-loading-bar">\n\t<div class="progress-bar">\n\t\t<span ');
                ___v1ew.push(can.view.txt(2, 'span', 'style', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('style="');
                    ___v1ew.push('width:0%"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push('></span>\n\t</div>\n</div>\n<div class="notification-container">\n    <div id="js_app_notificator" class="notification col2_3 push_1">\n    </div>\n</div>\n<div class="header first">\n    <nav>\n        <div class="primary navigation top">\n            <ul id="js_app_navigation_left" class="left">\n            </ul>\n            <ul id="js_app_navigation_right" class="right">\n            </ul>\n        </div>\n    </nav>\n</div>\n<div class="header second">\n    <div class="col1">\n        <div class="logo">\n            <img ');
                ___v1ew.push(can.view.txt(2, 'img', 'src', this, function () {
                    var ___v1ew = [];
                    ___v1ew.push('src="');
                    ___v1ew.push('img/logo/logo.png"');
                    return ___v1ew.join('');
                }));
                ___v1ew.push(' alt="passbolt"/>\n        </div>\n    </div>\n    <div class="col2 search-wrapper">\n        <div id="js_app_filter">\n        </div>\n    </div>\n    <div class="col3 profile-wrapper">\n        <div id="js_app_profile_dropdown" class="user profile dropdown">\n        </div>\n    </div>\n</div>\n<div class="header third">\n    <div class="col1 main-action-wrapper">\n    </div>\n\t<div class="col2_3 actions-wrapper">\n\t\t<div id="js_wsp_primary_menu_wrapper" class="actions">\n\t\t</div>\n\t\t<div id="js_wsp_secondary_menu_wrapper" class="actions secondary">\n\t\t</div>\n\t</div>\n</div>\n<div id="js_app_panel_main" class="panel main">\n</div>\n');
                ;
                return ___v1ew.join('');
            }
        }
    }));
});
/*app/component/app*/
define('app/component/app', [
    'mad/component/component',
    'app/util/common',
    'app/component/settings_workspace',
    'app/component/password_workspace',
    'app/component/people_workspace',
    'app/component/app_navigation_left',
    'app/component/app_navigation_right',
    'app/component/app_filter',
    'app/component/profile_dropdown',
    'app/component/notification',
    'app/component/loading_bar',
    'app/model/user',
    'app/view/template/app.ejs!'
], function ($__0, $__1, $__2, $__3, $__4, $__5, $__6, $__7, $__8, $__9, $__10, $__11, $__12) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__1 || !$__1.__esModule)
        $__1 = { default: $__1 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__3 || !$__3.__esModule)
        $__3 = { default: $__3 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__10 || !$__10.__esModule)
        $__10 = { default: $__10 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    if (!$__12 || !$__12.__esModule)
        $__12 = { default: $__12 };
    $__0;
    $__1;
    $__2;
    $__3;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    $__9;
    $__10;
    $__11;
    $__12;
    var App = passbolt.component.App = mad.Component.extend('passbolt.component.App', {
            defaults: {
                templateUri: 'app/view/template/app.ejs',
                workspaces: [
                    'password',
                    'people',
                    'settings'
                ]
            }
        }, {
            afterStart: function () {
                var self = this;
                this.workspace = null;
                var navLeftCtl = new passbolt.component.AppNavigationLeft($('#js_app_navigation_left'));
                navLeftCtl.start();
                var navRightCtl = new passbolt.component.AppNavigationRight($('#js_app_navigation_right'));
                navRightCtl.start();
                var filterCtl = new passbolt.component.AppFilter($('#js_app_filter'), {});
                filterCtl.start();
                passbolt.model.User.findOne({
                    id: mad.Config.read('user.id'),
                    async: false
                }).then(function (user) {
                    passbolt.model.User.setCurrent(user);
                    self.profileDropDownCtl = new passbolt.component.ProfileDropdown($('#js_app_profile_dropdown'), { user: user });
                    self.profileDropDownCtl.start();
                });
                var notifCtl = new passbolt.component.Notification($('#js_app_notificator'), {});
                var loadingBarCtl = new passbolt.component.LoadingBar($('#js_app_loading_bar'), { 'state': 'ready' });
                loadingBarCtl.start();
            },
            '{mad.bus.element} workspace_selected': function (el, event, workspace, options) {
                options = typeof options != 'undefined' ? options : {};
                if (workspace == this.workspace) {
                    return;
                }
                $('#js_app_panel_main').empty();
                $('#container').removeClass(this.options.workspaces.join(' ')).addClass(workspace);
                var workspaceId = 'js_passbolt_' + workspace + '_workspace_controller', workspaceClass = passbolt.component[can.capitalize(workspace) + 'Workspace'], workspaceOptions = {
                        id: workspaceId,
                        label: workspace
                    };
                $.extend(workspaceOptions, options);
                var component = mad.helper.Component.create($('#js_app_panel_main'), 'last', workspaceClass, workspaceOptions);
                component.start();
                this.workspace = workspace;
            },
            '{mad.bus.element} request_dialog': function (el, ev, options) {
                var options = options || {};
                new mad.component.Dialog(null, options).start();
            },
            '{mad.bus.element} passbolt_application_loading_completed': function (el, ev, options) {
                if (!$('html').hasClass('loaded')) {
                    $('html').removeClass('loading').addClass('loaded');
                }
            },
            '{mad.bus.element} passbolt_application_loading': function (el, ev, options) {
                if (!$('html').hasClass('loading')) {
                    $('html').removeClass('loaded').addClass('loading');
                }
            },
            '{mad.bus.element} request_dialog_close_latest': function (el, ev, options) {
                mad.component.Dialog.closeLatest();
            },
            stateLoading: function (go) {
                if (this.view) {
                    this.view.loading(go);
                }
            },
            stateReady: function (go) {
                mad.bus.trigger('workspace_selected', 'password');
                $('html').removeClass('launching');
            }
        });
    var $__default = App;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/config/config.json*/
define('app/config/config.json', [], function () {
    return {
        'app': {
            'name': 'Passbolt',
            'punchline': 'The simple password management system',
            'copyright': '2013 &copy; Passbolt.com',
            'title': '%s | Passbolt',
            'version': {
                'number': '2.13.3',
                'name': 'Sauvage',
                'song': 'http://youtu.be/DaRG0ukxYqQ'
            },
            'url': 'http://192.168.99.100:8081',
            'hostname': '192.168.99.100:8081',
            'controllerElt': '#js_app_controller',
            'namespace': 'passbolt',
            'ControllerClassName': 'passbolt.component.App'
        },
        'notification': { 'timeout': 6000 },
        'error': { 'ErrorHandlerClassName': 'passbolt.error.ErrorHandler' },
        'event': { 'eventBusControllerElt': '#js_bus_controller' },
        'i18n': { 'lang': 'EN-en' },
        'secret': {
            'generator': {
                'masks': [
                    'alpha',
                    'uppercase',
                    'digit',
                    'special'
                ],
                'length': 13
            }
        },
        'net': { 'ResponseHandlerClassName': 'passbolt.net.ResponseHandler' },
        'route': {
            'defaultRoute': {
                'extension': 'passbolt',
                'controller': 'passwordWorkspace',
                'action': 'index'
            }
        }
    };
});
/*app/config/notification.json*/
define('app/config/notification.json', [], function () {
    return {
        'notification': {
            'timeout': 10000,
            'displaySeverity': [
                'success',
                'error'
            ],
            'messages': {
                'app_resources_index_success': {
                    'msg': 'The passwords have been loaded',
                    'severity': 'notice'
                },
                'app_resources_add_success': { 'msg': 'The password %body.Resource.name% has been created' },
                'app_resources_delete_success': { 'msg': 'The password has been deleted' },
                'app_resources_edit_success': { 'msg': 'The password %body.Resource.name% has been updated successfully' },
                'app_users_add_success': { 'msg': 'The user %body.User.username% has been added successfully' },
                'app_users_delete_success': { 'msg': 'The user has been deleted' },
                'app_users_edit_success': { 'msg': 'The user %body.User.username% has been updated successfully' },
                'app_users_editavatar_success': { 'msg': 'The picture for user %body.User.username% has been updated successfully' },
                'plugin_secret_copy_success': { 'msg': 'The password has been copied to clipboard' },
                'plugin_clipboard_copy_success': { 'msg': 'The %name% has been copied to clipboard' },
                'app_favorites_add_success': { 'msg': 'The password has been added as a favorite' },
                'app_favorites_delete_success': { 'msg': 'The password has been removed from favorites' },
                'app_comments_addforeigncomment_success': { 'msg': 'The comment has been added' },
                'app_comments_delete_success': { 'msg': 'The comment has been deleted' }
            }
        }
    };
});
/*app/bootstrap*/
define('app/bootstrap', [
    'moment',
    'app/util/util',
    'mad/mad',
    'mad/bootstrap',
    'app/error/error_handler',
    'app/net/response_handler',
    'app/component/app',
    'app/config/config.json',
    'app/config/notification.json'
], function ($__0, $__2, $__4, $__5, $__6, $__7, $__8, $__9, $__11) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    if (!$__2 || !$__2.__esModule)
        $__2 = { default: $__2 };
    if (!$__4 || !$__4.__esModule)
        $__4 = { default: $__4 };
    if (!$__5 || !$__5.__esModule)
        $__5 = { default: $__5 };
    if (!$__6 || !$__6.__esModule)
        $__6 = { default: $__6 };
    if (!$__7 || !$__7.__esModule)
        $__7 = { default: $__7 };
    if (!$__8 || !$__8.__esModule)
        $__8 = { default: $__8 };
    if (!$__9 || !$__9.__esModule)
        $__9 = { default: $__9 };
    if (!$__11 || !$__11.__esModule)
        $__11 = { default: $__11 };
    var moment = $__0.default;
    var passbolt = $__2.default;
    $__4;
    $__5;
    $__6;
    $__7;
    $__8;
    var appConfig = $__9.default;
    var notifConfig = $__11.default;
    var Bootstrap = passbolt.Bootstrap = mad.Bootstrap.extend('passbolt.Bootstrap', { defaults: {} }, {
            init: function (options) {
                mad.Config.load(appConfig);
                mad.Config.load(notifConfig);
                mad.Config.load(cakephpConfig);
                this._super(options);
                this.loadViewHelpers();
            },
            loadViewHelpers: function () {
                can.ejs.Helpers.prototype.moment = moment;
            }
        });
    var $__default = Bootstrap;
    return {
        get default() {
            return $__default;
        },
        __esModule: true
    };
});
/*app/passbolt*/
define('app/passbolt', ['app/bootstrap'], function ($__0) {
    'use strict';
    if (!$__0 || !$__0.__esModule)
        $__0 = { default: $__0 };
    $__0;
    $(document).ready(function () {
        var bootstrap = new passbolt.Bootstrap();
    });
    return {};
});